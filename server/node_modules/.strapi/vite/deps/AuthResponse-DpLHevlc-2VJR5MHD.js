import {
  Page,
  login,
  require_defaultsDeep,
  require_isEqual,
  require_set,
  useTypedDispatch
} from "./chunk-2SBBHQ4D.js";
import {
  getCookieValue,
  require_clone,
  require_get,
  require_lib,
  require_pipe,
  require_toPath,
  require_trimEnd,
  useIntl
} from "./chunk-WWJMSCQY.js";
import {
  useMatch,
  useNavigate
} from "./chunk-TUXTO2Z5.js";
import "./chunk-FOD4ENRR.js";
import "./chunk-O3RC3EKQ.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-NZJWPNT2.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/chunks/AuthResponse-DpLHevlc.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var import_clone = __toESM(require_clone(), 1);
var import_toPath = __toESM(require_toPath(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);
var import_get = __toESM(require_get(), 1);
var import_set = __toESM(require_set(), 1);
var import_defaultsDeep = __toESM(require_defaultsDeep(), 1);
var import_trimEnd = __toESM(require_trimEnd(), 1);
var import_pipe = __toESM(require_pipe(), 1);
var AuthResponse = () => {
  const match = useMatch("/auth/login/:authResponse");
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const dispatch = useTypedDispatch();
  const redirectToOops = React.useCallback(() => {
    navigate({
      pathname: "/auth/oops",
      search: `?info=${encodeURIComponent(formatMessage({
        id: "Auth.form.button.login.providers.error",
        defaultMessage: "We cannot connect you through the selected provider."
      }))}`
    });
  }, [
    navigate,
    formatMessage
  ]);
  React.useEffect(() => {
    if ((match == null ? void 0 : match.params.authResponse) === "error") {
      redirectToOops();
    }
    if ((match == null ? void 0 : match.params.authResponse) === "success") {
      const jwtToken = getCookieValue("jwtToken");
      if (jwtToken) {
        dispatch(login({
          token: jwtToken
        }));
        navigate("/auth/login");
      } else {
        redirectToOops();
      }
    }
  }, [
    dispatch,
    match,
    redirectToOops,
    navigate
  ]);
  return (0, import_jsx_runtime.jsx)(Page.Loading, {});
};
export {
  AuthResponse
};
//# sourceMappingURL=AuthResponse-DpLHevlc-2VJR5MHD.js.map
