import { jsx } from 'react/jsx-runtime';
import * as React from 'react';
import { useIntl } from 'react-intl';
import { useMatch, useNavigate } from 'react-router-dom';
import { u as useTypedDispatch, l as login, P as Page } from './Theme-V3hA9wVU.mjs';
import { g as getCookieValue } from './admin-DcWCrquO.mjs';
import '@radix-ui/react-context';
import '@strapi/design-system';
import '@strapi/icons';
import '@strapi/icons/symbols';
import 'qs';
import 'lodash/clone';
import 'lodash/toPath';
import 'lodash/isEqual';
import 'axios';
import 'immer';
import 'lodash/get';
import 'lodash/set';
import 'use-context-selector';
import 'lodash/defaultsDeep';
import 'react-redux';
import 'styled-components';
import '@reduxjs/toolkit';
import 'lodash/trimEnd';
import '@reduxjs/toolkit/query/react';
import 'lodash/fp/pipe';

const AuthResponse = ()=>{
    const match = useMatch('/auth/login/:authResponse');
    const { formatMessage } = useIntl();
    const navigate = useNavigate();
    const dispatch = useTypedDispatch();
    const redirectToOops = React.useCallback(()=>{
        navigate({
            pathname: '/auth/oops',
            search: `?info=${encodeURIComponent(formatMessage({
                id: 'Auth.form.button.login.providers.error',
                defaultMessage: 'We cannot connect you through the selected provider.'
            }))}`
        });
    }, [
        navigate,
        formatMessage
    ]);
    React.useEffect(()=>{
        if (match?.params.authResponse === 'error') {
            redirectToOops();
        }
        if (match?.params.authResponse === 'success') {
            const jwtToken = getCookieValue('jwtToken');
            if (jwtToken) {
                dispatch(login({
                    token: jwtToken
                }));
                navigate('/auth/login');
            } else {
                redirectToOops();
            }
        }
    }, [
        dispatch,
        match,
        redirectToOops,
        navigate
    ]);
    return /*#__PURE__*/ jsx(Page.Loading, {});
};

export { AuthResponse };
//# sourceMappingURL=AuthResponse-DpLHevlc.mjs.map
