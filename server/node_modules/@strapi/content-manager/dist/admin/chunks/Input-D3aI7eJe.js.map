{"version":3,"file":"Input-D3aI7eJe.js","sources":["../../../admin/src/hooks/useLazyComponents.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/constants.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/conversions.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/enterKey.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Code.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Heading.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Image.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/links.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/types.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Link.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/List.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Paragraph.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Quote.tsx","../../../admin/src/pages/EditView/components/EditorToolbarObserver.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksToolbar.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksContent.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/EditorLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Modifiers.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withImages.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withLinks.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withStrapiSchema.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksEditor.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksInput.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Initializer.tsx","../../../admin/src/pages/EditView/components/FormInputs/ComponentContext.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/AddComponentButton.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/ComponentCategory.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/ComponentPicker.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/DynamicComponent.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/DynamicZoneLabel.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/Field.tsx","../../../admin/src/pages/EditView/components/FormInputs/NotAllowed.tsx","../../../admin/src/pages/EditView/components/FormInputs/Relations/RelationModal.tsx","../../../admin/src/pages/EditView/components/FormInputs/Relations/Relations.tsx","../../../admin/src/services/uid.ts","../../../admin/src/pages/EditView/components/FormInputs/UID.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/mdRenderer.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/PreviewWysiwyg.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/continueList.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/Editor.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/EditorLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/utils.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygStyles.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygFooter.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygNav.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/Field.tsx","../../../admin/src/pages/EditView/components/InputRenderer.tsx","../../../admin/src/pages/EditView/components/FormLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/NonRepeatable.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Repeatable.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Input.tsx"],"sourcesContent":["import { ComponentType, useCallback, useEffect, useState } from 'react';\n\nimport { StrapiAppContextValue, useStrapiApp } from '@strapi/admin/strapi-admin';\n\nconst componentStore = new Map<string, ComponentType | undefined>();\n\ntype LazyComponentStore = Record<string, ComponentType | undefined>;\n\ntype CustomField = NonNullable<ReturnType<StrapiAppContextValue['customFields']['get']>>;\n\ninterface UseLazyComponentsReturn {\n  isLazyLoading: boolean;\n  lazyComponentStore: LazyComponentStore;\n  cleanup: () => void;\n}\n\n/**\n * @description A hook to lazy load custom field components\n */\nconst useLazyComponents = (componentUids: string[] = []): UseLazyComponentsReturn => {\n  const [lazyComponentStore, setLazyComponentStore] = useState(Object.fromEntries(componentStore));\n  /**\n   * Start loading only if there are any components passed in\n   * and there are some new to load\n   */\n  const newUids = componentUids.filter((uid) => !componentStore.get(uid));\n  const [loading, setLoading] = useState(() => !!newUids.length);\n  const getCustomField = useStrapiApp('useLazyComponents', (state) => state.customFields.get);\n\n  useEffect(() => {\n    const setStore = (store: Record<string, ComponentType | undefined>) => {\n      setLazyComponentStore(store);\n      setLoading(false);\n    };\n\n    const lazyLoadComponents = async (\n      uids: string[],\n      components: Array<ReturnType<CustomField['components']['Input']>>\n    ) => {\n      const modules = await Promise.all(components);\n\n      uids.forEach((uid, index) => {\n        componentStore.set(uid, modules[index].default);\n      });\n\n      setStore(Object.fromEntries(componentStore));\n    };\n\n    if (newUids.length > 0) {\n      setLoading(true);\n\n      const componentPromises = newUids.reduce<\n        Array<ReturnType<CustomField['components']['Input']>>\n      >((arrayOfPromises, uid) => {\n        const customField = getCustomField(uid);\n\n        if (customField) {\n          arrayOfPromises.push(customField.components.Input());\n        }\n\n        return arrayOfPromises;\n      }, []);\n\n      if (componentPromises.length > 0) {\n        lazyLoadComponents(newUids, componentPromises);\n      }\n    }\n  }, [newUids, getCustomField]);\n\n  /**\n   * Wrap this in a callback so it can be used in\n   * effects to cleanup the cached store if required\n   */\n  const cleanup = useCallback(() => {\n    componentStore.clear();\n    setLazyComponentStore({});\n  }, []);\n\n  return { isLazyLoading: loading, lazyComponentStore, cleanup };\n};\n\nexport { useLazyComponents };\nexport type { UseLazyComponentsReturn, LazyComponentStore };\n","export const codeLanguages: {\n  value: string;\n  label: string;\n  decorate?: string;\n}[] = [\n  {\n    value: 'asm',\n    label: 'Assembly',\n    decorate: 'asmatmel',\n  },\n  {\n    value: 'bash',\n    label: 'Bash',\n  },\n  {\n    value: 'c',\n    label: 'C',\n  },\n  {\n    value: 'clojure',\n    label: 'Clojure',\n  },\n  {\n    value: 'cobol',\n    label: 'COBOL',\n  },\n  {\n    value: 'cpp',\n    label: 'C++',\n  },\n  {\n    value: 'csharp',\n    label: 'C#',\n  },\n  {\n    value: 'css',\n    label: 'CSS',\n  },\n  {\n    value: 'dart',\n    label: 'Dart',\n  },\n  {\n    value: 'dockerfile',\n    label: 'Dockerfile',\n    decorate: 'docker',\n  },\n  {\n    value: 'elixir',\n    label: 'Elixir',\n  },\n  {\n    value: 'erlang',\n    label: 'Erlang',\n  },\n  {\n    value: 'fortran',\n    label: 'Fortran',\n  },\n  {\n    value: 'fsharp',\n    label: 'F#',\n  },\n  {\n    value: 'go',\n    label: 'Go',\n  },\n  {\n    value: 'graphql',\n    label: 'GraphQL',\n  },\n  {\n    value: 'groovy',\n    label: 'Groovy',\n  },\n  {\n    value: 'haskell',\n    label: 'Haskell',\n  },\n  {\n    value: 'haxe',\n    label: 'Haxe',\n  },\n  {\n    value: 'html',\n    label: 'HTML',\n  },\n  {\n    value: 'ini',\n    label: 'INI',\n  },\n  {\n    value: 'java',\n    label: 'Java',\n  },\n  {\n    value: 'javascript',\n    label: 'JavaScript',\n  },\n  {\n    value: 'jsx',\n    label: 'JavaScript (React)',\n  },\n  {\n    value: 'json',\n    label: 'JSON',\n  },\n  {\n    value: 'julia',\n    label: 'Julia',\n  },\n  {\n    value: 'kotlin',\n    label: 'Kotlin',\n  },\n  {\n    value: 'latex',\n    label: 'LaTeX',\n  },\n  {\n    value: 'lua',\n    label: 'Lua',\n  },\n  {\n    value: 'markdown',\n    label: 'Markdown',\n  },\n  {\n    value: 'matlab',\n    label: 'MATLAB',\n  },\n  {\n    value: 'makefile',\n    label: 'Makefile',\n  },\n  {\n    value: 'objectivec',\n    label: 'Objective-C',\n  },\n  {\n    value: 'perl',\n    label: 'Perl',\n  },\n  {\n    value: 'php',\n    label: 'PHP',\n  },\n  {\n    value: 'plaintext',\n    label: 'Plain text',\n  },\n  {\n    value: 'powershell',\n    label: 'PowerShell',\n  },\n  {\n    value: 'python',\n    label: 'Python',\n  },\n  {\n    value: 'r',\n    label: 'R',\n  },\n  {\n    value: 'ruby',\n    label: 'Ruby',\n  },\n  {\n    value: 'rust',\n    label: 'Rust',\n  },\n  {\n    value: 'sas',\n    label: 'SAS',\n  },\n  {\n    value: 'scala',\n    label: 'Scala',\n  },\n  {\n    value: 'scheme',\n    label: 'Scheme',\n  },\n  {\n    value: 'shell',\n    label: 'Shell',\n  },\n  {\n    value: 'sql',\n    label: 'SQL',\n  },\n  {\n    value: 'stata',\n    label: 'Stata',\n  },\n  {\n    value: 'swift',\n    label: 'Swift',\n  },\n  {\n    value: 'typescript',\n    label: 'TypeScript',\n    decorate: 'ts',\n  },\n  {\n    value: 'tsx',\n    label: 'TypeScript (React)',\n  },\n  {\n    value: 'vbnet',\n    label: 'VB.NET',\n  },\n  {\n    value: 'xml',\n    label: 'XML',\n  },\n  {\n    value: 'yaml',\n    label: 'YAML',\n    decorate: 'yml',\n  },\n];\n","import { type Element, type Path, Editor, Transforms } from 'slate';\n\n/**\n * Extracts some logic that is common to most blocks' handleConvert functions.\n * @returns The path of the converted block\n */\nconst baseHandleConvert = <T extends Element>(\n  editor: Editor,\n  attributesToSet: Partial<T> & { type: T['type'] }\n): void | Path => {\n  // If there is no selection, convert last inserted node\n  const [_, lastNodePath] = Editor.last(editor, []);\n\n  // If the selection is inside a list, split the list so that the modified block is outside of it\n  Transforms.unwrapNodes(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    split: true,\n    at: editor.selection ?? lastNodePath,\n  });\n\n  // Make sure we get a block node, not an inline node\n  const [, updatedLastNodePath] = Editor.last(editor, []);\n  const entry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type !== 'text' && node.type !== 'link',\n    at: editor.selection ?? updatedLastNodePath,\n  });\n\n  if (!entry || Editor.isEditor(entry[0])) {\n    return;\n  }\n\n  const [element, elementPath] = entry;\n\n  Transforms.setNodes(\n    editor,\n    {\n      ...getAttributesToClear(element),\n      ...attributesToSet,\n    } as Partial<Element>,\n    { at: elementPath }\n  );\n\n  return elementPath;\n};\n\n/**\n * Set all attributes except type and children to null so that Slate deletes them\n */\nconst getAttributesToClear = (element: Element) => {\n  const { children: _children, type: _type, ...extra } = element;\n\n  const attributesToClear = Object.keys(extra).reduce(\n    (currentAttributes, key) => ({ ...currentAttributes, [key]: null }),\n    {}\n  );\n\n  return attributesToClear as Record<string, null>;\n};\n\nexport { baseHandleConvert, getAttributesToClear };\n","import { type Text, Editor, Node, Transforms } from 'slate';\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * Inserts a line break the first time the user presses enter, and exits the node the second time.\n */\nconst pressEnterTwiceToExit = (editor: Editor) => {\n  /**\n   * To determine if we should break out of the node, check 2 things:\n   * 1. If the cursor is at the end of the node\n   * 2. If the last line of the node is empty\n   */\n  const nodeEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && !['link', 'text'].includes(node.type),\n  });\n  if (!nodeEntry || !editor.selection) {\n    return;\n  }\n  const [node, nodePath] = nodeEntry;\n  const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, nodePath);\n  const lastTextNode = node.children.at(-1);\n  const isEmptyLine = isText(lastTextNode) && lastTextNode.text.endsWith('\\n');\n\n  if (isNodeEnd && isEmptyLine) {\n    // Remove the last line break\n    Transforms.delete(editor, { distance: 1, unit: 'character', reverse: true });\n    // Break out of the node by creating a new paragraph\n    Transforms.insertNodes(editor, {\n      type: 'paragraph',\n      children: [{ type: 'text', text: '' }],\n    });\n    return;\n  }\n\n  // Otherwise insert a new line within the node\n  Transforms.insertText(editor, '\\n');\n\n  // If there's nothing after the cursor, disable modifiers\n  if (isNodeEnd) {\n    ['bold', 'italic', 'underline', 'strikethrough', 'code'].forEach((modifier) => {\n      Editor.removeMark(editor, modifier);\n    });\n  }\n};\n\nexport { pressEnterTwiceToExit };\n","import * as React from 'react';\n\nimport { Box, SingleSelect, SingleSelectOption } from '@strapi/design-system';\nimport { CodeBlock as CodeBlockIcon } from '@strapi/icons';\nimport * as Prism from 'prismjs';\nimport { useIntl } from 'react-intl';\nimport { BaseRange, Element, Editor, Node, NodeEntry, Transforms } from 'slate';\nimport { useSelected, type RenderElementProps, useFocused, ReactEditor } from 'slate-react';\nimport { styled } from 'styled-components';\n\nimport { useBlocksEditorContext, type BlocksStore } from '../BlocksEditor';\nimport { codeLanguages } from '../utils/constants';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { pressEnterTwiceToExit } from '../utils/enterKey';\nimport { type Block } from '../utils/types';\n\nimport 'prismjs/themes/prism-solarizedlight.css';\nimport 'prismjs/components/prism-asmatmel';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-basic';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-clojure';\nimport 'prismjs/components/prism-cobol';\nimport 'prismjs/components/prism-cpp';\nimport 'prismjs/components/prism-csharp';\nimport 'prismjs/components/prism-dart';\nimport 'prismjs/components/prism-docker';\nimport 'prismjs/components/prism-elixir';\nimport 'prismjs/components/prism-erlang';\nimport 'prismjs/components/prism-fortran';\nimport 'prismjs/components/prism-fsharp';\nimport 'prismjs/components/prism-go';\nimport 'prismjs/components/prism-graphql';\nimport 'prismjs/components/prism-groovy';\nimport 'prismjs/components/prism-haskell';\nimport 'prismjs/components/prism-haxe';\nimport 'prismjs/components/prism-ini';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-julia';\nimport 'prismjs/components/prism-kotlin';\nimport 'prismjs/components/prism-latex';\nimport 'prismjs/components/prism-lua';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-matlab';\nimport 'prismjs/components/prism-makefile';\nimport 'prismjs/components/prism-objectivec';\nimport 'prismjs/components/prism-perl';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-powershell';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-r';\nimport 'prismjs/components/prism-ruby';\nimport 'prismjs/components/prism-rust';\nimport 'prismjs/components/prism-sas';\nimport 'prismjs/components/prism-scala';\nimport 'prismjs/components/prism-scheme';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-stata';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-vbnet';\nimport 'prismjs/components/prism-yaml';\n\ntype BaseRangeCustom = BaseRange & { className: string };\n\nexport const decorateCode = ([node, path]: NodeEntry) => {\n  const ranges: BaseRangeCustom[] = [];\n\n  // make sure it is an Slate Element\n  if (!Element.isElement(node) || node.type !== 'code') return ranges;\n  // transform the Element into a string\n  const text = Node.string(node);\n  const language = codeLanguages.find((lang) => lang.value === node.language);\n  const decorateKey = language?.decorate ?? language?.value;\n\n  const selectedLanguage = Prism.languages[decorateKey || 'plaintext'];\n\n  // create \"tokens\" with \"prismjs\" and put them in \"ranges\"\n  const tokens = Prism.tokenize(text, selectedLanguage);\n  let start = 0;\n  for (const token of tokens) {\n    const length = token.length;\n    const end = start + length;\n    if (typeof token !== 'string') {\n      ranges.push({\n        anchor: { path, offset: start },\n        focus: { path, offset: end },\n        className: `token ${token.type}`,\n      });\n    }\n    start = end;\n  }\n\n  // these will be found in \"renderLeaf\" in \"leaf\" and their \"className\" will be applied\n  return ranges;\n};\n\nconst CodeBlock = styled.pre`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  background-color: ${({ theme }) => theme.colors.neutral100};\n  max-width: 100%;\n  overflow: auto;\n  padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n  flex-shrink: 1;\n\n  & > code {\n    font-family: 'SF Mono', SFMono-Regular, ui-monospace, 'DejaVu Sans Mono', Menlo, Consolas,\n      monospace;\n    color: ${({ theme }) => theme.colors.neutral800};\n    overflow: auto;\n    max-width: 100%;\n  }\n`;\n\nconst CodeEditor = (props: RenderElementProps) => {\n  const { editor } = useBlocksEditorContext('ImageDialog');\n  const editorIsFocused = useFocused();\n  const imageIsSelected = useSelected();\n  const { formatMessage } = useIntl();\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const shouldDisplayLanguageSelect = (editorIsFocused && imageIsSelected) || isSelectOpen;\n\n  return (\n    <Box position=\"relative\" width=\"100%\">\n      <CodeBlock {...props.attributes}>\n        <code>{props.children}</code>\n      </CodeBlock>\n      {shouldDisplayLanguageSelect && (\n        <Box\n          position=\"absolute\"\n          background=\"neutral0\"\n          borderColor=\"neutral150\"\n          borderStyle=\"solid\"\n          borderWidth=\"0.5px\"\n          shadow=\"tableShadow\"\n          top=\"100%\"\n          marginTop={1}\n          right={0}\n          padding={1}\n          hasRadius\n        >\n          <SingleSelect\n            onChange={(open) => {\n              Transforms.setNodes(\n                editor,\n                { language: open.toString() },\n                { match: (node) => !Editor.isEditor(node) && node.type === 'code' }\n              );\n            }}\n            value={(props.element.type === 'code' && props.element.language) || 'plaintext'}\n            onOpenChange={(open) => {\n              setIsSelectOpen(open);\n\n              // Focus the editor again when closing the select so the user can continue typing\n              if (!open) {\n                ReactEditor.focus(editor);\n              }\n            }}\n            onCloseAutoFocus={(e) => e.preventDefault()}\n            aria-label={formatMessage({\n              id: 'components.Blocks.blocks.code.languageLabel',\n              defaultMessage: 'Select a language',\n            })}\n          >\n            {codeLanguages.map(({ value, label }) => (\n              <SingleSelectOption value={value} key={value}>\n                {label}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst codeBlocks: Pick<BlocksStore, 'code'> = {\n  code: {\n    renderElement: (props) => <CodeEditor {...props} />,\n    icon: CodeBlockIcon,\n    label: {\n      id: 'components.Blocks.blocks.code',\n      defaultMessage: 'Code block',\n    },\n    matchNode: (node) => node.type === 'code',\n    isInBlocksSelector: true,\n    handleConvert(editor) {\n      baseHandleConvert<Block<'code'>>(editor, { type: 'code', language: 'plaintext' });\n    },\n    handleEnterKey(editor) {\n      pressEnterTwiceToExit(editor);\n    },\n    snippets: ['```'],\n  },\n};\n\nexport { codeBlocks };\n","import * as React from 'react';\n\nimport { Typography, TypographyComponent } from '@strapi/design-system';\nimport {\n  HeadingFive,\n  HeadingFour,\n  HeadingOne,\n  HeadingSix,\n  HeadingThree,\n  HeadingTwo,\n} from '@strapi/icons';\nimport { Editor } from 'slate';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { type Block } from '../utils/types';\n\nconst H1 = styled<TypographyComponent<'h1'>>(Typography).attrs({ tag: 'h1' })`\n  font-size: 4.2rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H2 = styled<TypographyComponent<'h2'>>(Typography).attrs({ tag: 'h2' })`\n  font-size: 3.5rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H3 = styled<TypographyComponent<'h3'>>(Typography).attrs({ tag: 'h3' })`\n  font-size: 2.9rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H4 = styled<TypographyComponent<'h4'>>(Typography).attrs({ tag: 'h4' })`\n  font-size: 2.4rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H5 = styled<TypographyComponent<'h5'>>(Typography).attrs({ tag: 'h5' })`\n  font-size: 2rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H6 = styled<TypographyComponent<'h6'>>(Typography).attrs({ tag: 'h6' })`\n  font-size: 1.6rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\n/**\n * Common handler for converting a node to a heading\n */\nconst handleConvertToHeading = (editor: Editor, level: Block<'heading'>['level']) => {\n  baseHandleConvert<Block<'heading'>>(editor, { type: 'heading', level });\n};\n\nconst headingBlocks: Pick<\n  BlocksStore,\n  'heading-one' | 'heading-two' | 'heading-three' | 'heading-four' | 'heading-five' | 'heading-six'\n> = {\n  'heading-one': {\n    renderElement: (props) => <H1 {...props.attributes}>{props.children}</H1>,\n    icon: HeadingOne,\n    label: {\n      id: 'components.Blocks.blocks.heading1',\n      defaultMessage: 'Heading 1',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 1),\n    matchNode: (node) => node.type === 'heading' && node.level === 1,\n    isInBlocksSelector: true,\n    snippets: ['#'],\n    dragHandleTopMargin: '14px',\n  },\n  'heading-two': {\n    renderElement: (props) => <H2 {...props.attributes}>{props.children}</H2>,\n    icon: HeadingTwo,\n    label: {\n      id: 'components.Blocks.blocks.heading2',\n      defaultMessage: 'Heading 2',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 2),\n    matchNode: (node) => node.type === 'heading' && node.level === 2,\n    isInBlocksSelector: true,\n    snippets: ['##'],\n    dragHandleTopMargin: '10px',\n  },\n  'heading-three': {\n    renderElement: (props) => <H3 {...props.attributes}>{props.children}</H3>,\n    icon: HeadingThree,\n    label: {\n      id: 'components.Blocks.blocks.heading3',\n      defaultMessage: 'Heading 3',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 3),\n    matchNode: (node) => node.type === 'heading' && node.level === 3,\n    isInBlocksSelector: true,\n    snippets: ['###'],\n    dragHandleTopMargin: '7px',\n  },\n  'heading-four': {\n    renderElement: (props) => <H4 {...props.attributes}>{props.children}</H4>,\n    icon: HeadingFour,\n    label: {\n      id: 'components.Blocks.blocks.heading4',\n      defaultMessage: 'Heading 4',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 4),\n    matchNode: (node) => node.type === 'heading' && node.level === 4,\n    isInBlocksSelector: true,\n    snippets: ['####'],\n    dragHandleTopMargin: '4px',\n  },\n  'heading-five': {\n    renderElement: (props) => <H5 {...props.attributes}>{props.children}</H5>,\n    icon: HeadingFive,\n    label: {\n      id: 'components.Blocks.blocks.heading5',\n      defaultMessage: 'Heading 5',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 5),\n    matchNode: (node) => node.type === 'heading' && node.level === 5,\n    isInBlocksSelector: true,\n    snippets: ['#####'],\n  },\n  'heading-six': {\n    renderElement: (props) => <H6 {...props.attributes}>{props.children}</H6>,\n    icon: HeadingSix,\n    label: {\n      id: 'components.Blocks.blocks.heading6',\n      defaultMessage: 'Heading 6',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 6),\n    matchNode: (node) => node.type === 'heading' && node.level === 6,\n    isInBlocksSelector: true,\n    snippets: ['######'],\n    dragHandleTopMargin: '-2px',\n  },\n};\n\nexport { headingBlocks };\n","import * as React from 'react';\n\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FlexComponent } from '@strapi/design-system';\nimport { Image as Picture } from '@strapi/icons';\nimport { type Element, Transforms, Editor } from 'slate';\nimport { useFocused, type RenderElementProps, useSelected } from 'slate-react';\nimport { styled, css } from 'styled-components';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../../../utils/urls';\nimport { useBlocksEditorContext, type BlocksStore } from '../BlocksEditor';\nimport { type Block } from '../utils/types';\n\nimport type { Schema } from '@strapi/types';\n\nconst ImageWrapper = styled<FlexComponent>(Flex)<{ $isFocused?: boolean }>`\n  transition-property: box-shadow;\n  transition-duration: 0.2s;\n  ${(props) =>\n    props.$isFocused &&\n    css`\n      box-shadow: ${props.theme.colors.primary600} 0px 0px 0px 3px;\n    `}\n\n  & > img {\n    height: auto;\n    // The max-height is decided with the design team, the 56px is the height of the toolbar\n    max-height: calc(512px - 56px);\n    max-width: 100%;\n    object-fit: contain;\n  }\n`;\n\nconst IMAGE_SCHEMA_FIELDS = [\n  'name',\n  'alternativeText',\n  'url',\n  'caption',\n  'width',\n  'height',\n  'formats',\n  'hash',\n  'ext',\n  'mime',\n  'size',\n  'previewUrl',\n  'provider',\n  'provider_metadata',\n  'createdAt',\n  'updatedAt',\n];\n\nconst pick = <T extends object, K extends keyof T>(object: T, keys: K[]): Pick<T, K> => {\n  const entries = keys.map((key) => [key, object[key]]);\n  return Object.fromEntries(entries);\n};\n\n// Type guard to force TypeScript to narrow the type of the element in Blocks component\nconst isImage = (element: Element): element is Block<'image'> => {\n  return element.type === 'image';\n};\n\n// Added a background color to the image wrapper to make it easier to recognize the image block\nconst Image = ({ attributes, children, element }: RenderElementProps) => {\n  const editorIsFocused = useFocused();\n  const imageIsSelected = useSelected();\n\n  if (!isImage(element)) {\n    return null;\n  }\n  const { url, alternativeText, width, height } = element.image;\n\n  return (\n    <Box {...attributes}>\n      {children}\n      <ImageWrapper\n        background=\"neutral100\"\n        contentEditable={false}\n        justifyContent=\"center\"\n        $isFocused={editorIsFocused && imageIsSelected}\n        hasRadius\n      >\n        <img src={url} alt={alternativeText} width={width} height={height} />\n      </ImageWrapper>\n    </Box>\n  );\n};\n\nconst ImageDialog = () => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  const { editor } = useBlocksEditorContext('ImageDialog');\n  const components = useStrapiApp('ImageDialog', (state) => state.components);\n\n  if (!components || !isOpen) return null;\n\n  const MediaLibraryDialog = components['media-library'] as React.ComponentType<{\n    allowedTypes: Schema.Attribute.MediaKind[];\n    onClose: () => void;\n    onSelectAssets: (_images: Schema.Attribute.MediaValue<true>) => void;\n  }>;\n\n  const insertImages = (images: Block<'image'>['image'][]) => {\n    // If the selection is inside a list, split the list so that the modified block is outside of it\n    Transforms.unwrapNodes(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      split: true,\n    });\n\n    // Save the path of the node that is being replaced by an image to insert the images there later\n    // It's the closest full block node above the selection\n    const nodeEntryBeingReplaced = Editor.above(editor, {\n      match(node) {\n        if (Editor.isEditor(node)) return false;\n\n        const isInlineNode = ['text', 'link'].includes(node.type);\n\n        return !isInlineNode;\n      },\n    });\n\n    if (!nodeEntryBeingReplaced) return;\n    const [, pathToInsert] = nodeEntryBeingReplaced;\n\n    // Remove the previous node that is being replaced by an image\n    Transforms.removeNodes(editor);\n\n    // Convert images to nodes and insert them\n    const nodesToInsert = images.map((image) => {\n      const imageNode: Block<'image'> = {\n        type: 'image',\n        image,\n        children: [{ type: 'text', text: '' }],\n      };\n      return imageNode;\n    });\n    Transforms.insertNodes(editor, nodesToInsert, { at: pathToInsert });\n\n    // Set the selection on the image since it was cleared by calling removeNodes\n    Transforms.select(editor, pathToInsert);\n  };\n\n  const handleSelectAssets = (images: Schema.Attribute.MediaValue<true>) => {\n    const formattedImages = images.map((image) => {\n      // Create an object with imageSchema defined and exclude unnecessary props coming from media library config\n      const expectedImage = pick(image, IMAGE_SCHEMA_FIELDS);\n\n      const nodeImage: Block<'image'>['image'] = {\n        ...expectedImage,\n        alternativeText: expectedImage.alternativeText || expectedImage.name,\n        url: prefixFileUrlWithBackendUrl(image.url),\n      };\n\n      return nodeImage;\n    });\n\n    insertImages(formattedImages);\n    setIsOpen(false);\n  };\n\n  return (\n    <MediaLibraryDialog\n      allowedTypes={['images']}\n      onClose={() => setIsOpen(false)}\n      onSelectAssets={handleSelectAssets}\n    />\n  );\n};\n\nconst imageBlocks: Pick<BlocksStore, 'image'> = {\n  image: {\n    renderElement: (props) => <Image {...props} />,\n    icon: Picture,\n    label: {\n      id: 'components.Blocks.blocks.image',\n      defaultMessage: 'Image',\n    },\n    matchNode: (node) => node.type === 'image',\n    isInBlocksSelector: true,\n    handleBackspaceKey(editor) {\n      // Prevent issue where the image remains when it's the only block in the document\n      if (editor.children.length === 1) {\n        Transforms.setNodes(editor, {\n          type: 'paragraph',\n          // @ts-expect-error we're only setting image as null so that Slate deletes it\n          image: null,\n          children: [{ type: 'text', text: '' }],\n        });\n      } else {\n        Transforms.removeNodes(editor);\n      }\n    },\n    handleEnterKey(editor) {\n      Transforms.insertNodes(editor, {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      });\n    },\n    handleConvert: () => {\n      /**\n       * All the logic is managed inside the ImageDialog component,\n       * because the blocks are only created when the user selects images in the modal and submits\n       * and if he closes the modal, then no changes are made to the editor\n       */\n      return () => <ImageDialog />;\n    },\n    snippets: ['!['],\n  },\n};\n\nexport { imageBlocks };\n","import { Transforms, Editor, Element as SlateElement, Node, Range } from 'slate';\n\nimport { type Block } from './types';\n\nconst removeLink = (editor: Editor) => {\n  Transforms.unwrapNodes(editor, {\n    match: (node) => !Editor.isEditor(node) && SlateElement.isElement(node) && node.type === 'link',\n  });\n};\n\nconst insertLink = (editor: Editor, { url }: { url: string }) => {\n  if (editor.selection) {\n    // We want to remove all link on the selection\n    const linkNodes = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => !Editor.isEditor(node) && node.type === 'link',\n      })\n    );\n\n    linkNodes.forEach(([, path]) => {\n      Transforms.unwrapNodes(editor, { at: path });\n    });\n\n    if (Range.isCollapsed(editor.selection)) {\n      const link: Block<'link'> = {\n        type: 'link',\n        url: url ?? '',\n        children: [{ type: 'text', text: url }],\n      };\n\n      Transforms.insertNodes(editor, link);\n    } else {\n      Transforms.wrapNodes(editor, { type: 'link', url: url ?? '' } as Block<'link'>, {\n        split: true,\n      });\n    }\n  }\n};\n\nconst editLink = (editor: Editor, link: { url: string; text: string }) => {\n  const { url, text } = link;\n\n  if (!editor.selection) {\n    return;\n  }\n\n  const linkEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'link',\n  });\n\n  if (linkEntry) {\n    const [, linkPath] = linkEntry;\n    Transforms.setNodes(editor, { url }, { at: linkPath });\n\n    // If link text is different, we remove the old text and insert the new one\n    if (text !== '' && text !== Editor.string(editor, linkPath)) {\n      const linkNodeChildrens = Array.from(Node.children(editor, linkPath, { reverse: true }));\n\n      linkNodeChildrens.forEach(([, childPath]) => {\n        Transforms.removeNodes(editor, { at: childPath });\n      });\n\n      Transforms.insertNodes(editor, [{ type: 'text', text }], { at: linkPath.concat(0) });\n    }\n  }\n};\n\nexport { insertLink, editLink, removeLink };\n","import type { Schema } from '@strapi/types';\nimport type { Element, Node } from 'slate';\n\ntype Block<T extends Element['type']> = Extract<Node, { type: T }>;\n\n// Wrap Object.entries to get the correct types\nconst getEntries = <T extends object>(object: T) =>\n  Object.entries(object) as [keyof T, T[keyof T]][];\n\n// Wrap Object.keys to get the correct types\nconst getKeys = <T extends object>(object: T) => Object.keys(object) as (keyof T)[];\n\nconst isLinkNode = (element: Element): element is Schema.Attribute.LinkInlineNode => {\n  return element.type === 'link';\n};\n\nconst isListNode = (element: Element): element is Schema.Attribute.ListBlockNode => {\n  return element.type === 'list';\n};\n\nexport { type Block, getEntries, getKeys, isLinkNode, isListNode };\n","import * as React from 'react';\n\nimport { Box, Button, Field, Flex, Popover, useComposedRefs } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { Editor, Path, Range, Transforms } from 'slate';\nimport { type RenderElementProps, ReactEditor } from 'slate-react';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore, useBlocksEditorContext } from '../BlocksEditor';\nimport { editLink, removeLink } from '../utils/links';\nimport { isLinkNode, type Block } from '../utils/types';\n\nconst StyledLink = styled(Box)`\n  text-decoration: none;\n`;\n\nconst RemoveButton = styled(Button)<{ $visible: boolean }>`\n  visibility: ${(props) => (props.$visible ? 'visible' : 'hidden')};\n`;\n\ninterface LinkContentProps extends RenderElementProps {\n  link: Block<'link'>;\n}\n\nconst LinkContent = React.forwardRef<HTMLAnchorElement, LinkContentProps>(\n  ({ link, children, attributes }, forwardedRef) => {\n    const { formatMessage } = useIntl();\n    const { editor } = useBlocksEditorContext('Link');\n    const path = ReactEditor.findPath(editor, link);\n    const [popoverOpen, setPopoverOpen] = React.useState(\n      editor.lastInsertedLinkPath ? Path.equals(path, editor.lastInsertedLinkPath) : false\n    );\n    const elementText = link.children.map((child) => child.text).join('');\n    const [linkText, setLinkText] = React.useState(elementText);\n    const [linkUrl, setLinkUrl] = React.useState(link.url);\n    const linkInputRef = React.useRef<HTMLInputElement>(null);\n    const isLastInsertedLink = editor.lastInsertedLinkPath\n      ? !Path.equals(path, editor.lastInsertedLinkPath)\n      : true;\n    const [isSaveDisabled, setIsSaveDisabled] = React.useState(false);\n\n    const onLinkChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setIsSaveDisabled(false);\n      setLinkUrl(e.target.value);\n\n      try {\n        // eslint-disable-next-line no-new\n        new URL(\n          e.target.value?.startsWith('/') ? `https://strapi.io${e.target.value}` : e.target.value\n        );\n      } catch (error) {\n        setIsSaveDisabled(true);\n      }\n    };\n\n    const handleSave: React.FormEventHandler = (e) => {\n      e.stopPropagation();\n\n      // If the selection is collapsed, we select the parent node because we want all the link to be replaced)\n      if (editor.selection && Range.isCollapsed(editor.selection)) {\n        const [, parentPath] = Editor.parent(editor, editor.selection.focus?.path);\n        Transforms.select(editor, parentPath);\n      }\n\n      editLink(editor, { url: linkUrl, text: linkText });\n      setPopoverOpen(false);\n      editor.lastInsertedLinkPath = null;\n      ReactEditor.focus(editor);\n    };\n\n    const handleClose = () => {\n      if (link.url === '') {\n        removeLink(editor);\n      }\n\n      setPopoverOpen(false);\n      ReactEditor.focus(editor);\n    };\n\n    React.useEffect(() => {\n      // Focus on the link input element when the popover opens\n      if (popoverOpen) linkInputRef.current?.focus();\n    }, [popoverOpen]);\n\n    const inputNotDirty =\n      !linkText ||\n      !linkUrl ||\n      (link.url && link.url === linkUrl && elementText && elementText === linkText);\n\n    return (\n      <Popover.Root open={popoverOpen}>\n        <Popover.Trigger>\n          <StyledLink\n            {...attributes}\n            ref={forwardedRef}\n            tag=\"a\"\n            href={link.url}\n            onClick={() => setPopoverOpen(true)}\n            color=\"primary600\"\n          >\n            {children}\n          </StyledLink>\n        </Popover.Trigger>\n        <Popover.Content onPointerDownOutside={handleClose}>\n          <Flex padding={4} direction=\"column\" gap={4}>\n            <Field.Root width=\"368px\">\n              <Flex direction=\"column\" gap={1} alignItems=\"stretch\">\n                <Field.Label>\n                  {formatMessage({\n                    id: 'components.Blocks.popover.text',\n                    defaultMessage: 'Text',\n                  })}\n                </Field.Label>\n                <Field.Input\n                  name=\"text\"\n                  placeholder={formatMessage({\n                    id: 'components.Blocks.popover.text.placeholder',\n                    defaultMessage: 'Enter link text',\n                  })}\n                  value={linkText}\n                  onChange={(e) => {\n                    setLinkText(e.target.value);\n                  }}\n                />\n              </Flex>\n            </Field.Root>\n            <Field.Root width=\"368px\">\n              <Flex direction=\"column\" gap={1} alignItems=\"stretch\">\n                <Field.Label>\n                  {formatMessage({\n                    id: 'components.Blocks.popover.link',\n                    defaultMessage: 'Link',\n                  })}\n                </Field.Label>\n                <Field.Input\n                  ref={linkInputRef}\n                  name=\"url\"\n                  placeholder={formatMessage({\n                    id: 'components.Blocks.popover.link.placeholder',\n                    defaultMessage: 'Paste link',\n                  })}\n                  value={linkUrl}\n                  onChange={onLinkChange}\n                />\n              </Flex>\n            </Field.Root>\n            <Flex justifyContent=\"space-between\" width=\"100%\">\n              <RemoveButton\n                variant=\"danger-light\"\n                onClick={() => removeLink(editor)}\n                $visible={isLastInsertedLink}\n              >\n                {formatMessage({\n                  id: 'components.Blocks.popover.remove',\n                  defaultMessage: 'Remove',\n                })}\n              </RemoveButton>\n              <Flex gap={2}>\n                <Button variant=\"tertiary\" onClick={handleClose}>\n                  {formatMessage({\n                    id: 'global.cancel',\n                    defaultMessage: 'Cancel',\n                  })}\n                </Button>\n                <Button disabled={Boolean(inputNotDirty) || isSaveDisabled} onClick={handleSave}>\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Popover.Content>\n      </Popover.Root>\n    );\n  }\n);\n\nconst Link = React.forwardRef<HTMLAnchorElement, RenderElementProps>((props, forwardedRef) => {\n  if (!isLinkNode(props.element)) {\n    return null;\n  }\n\n  // LinkContent uses React hooks that rely on props.element being a link. If the type guard above\n  // doesn't pass, those hooks would be called conditionnally, which is not allowed.\n  // Hence the need for a separate component.\n  return <LinkContent {...props} link={props.element} ref={forwardedRef} />;\n});\n\nconst linkBlocks: Pick<BlocksStore, 'link'> = {\n  link: {\n    renderElement: (props) => (\n      <Link element={props.element} attributes={props.attributes}>\n        {props.children}\n      </Link>\n    ),\n    // No handleConvert here, links are created via the link button in the toolbar\n    matchNode: (node) => node.type === 'link',\n    isInBlocksSelector: false,\n  },\n};\n\nexport { linkBlocks };\n","import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { BulletList, NumberList } from '@strapi/icons';\nimport { type Text, Editor, Node, Transforms, Path } from 'slate';\nimport { type RenderElementProps, ReactEditor } from 'slate-react';\nimport { styled, type CSSProperties, css } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { isListNode, type Block } from '../utils/types';\n\nconst listStyle = css`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spaces[2]};\n  margin-inline-start: ${({ theme }) => theme.spaces[0]};\n  margin-inline-end: ${({ theme }) => theme.spaces[0]};\n  padding-inline-start: ${({ theme }) => theme.spaces[2]};\n\n  ol,\n  ul {\n    margin-block-start: ${({ theme }) => theme.spaces[0]};\n    margin-block-end: ${({ theme }) => theme.spaces[0]};\n  }\n\n  li {\n    margin-inline-start: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nconst Orderedlist = styled.ol<{ $listStyleType: CSSProperties['listStyleType'] }>`\n  list-style-type: ${(props) => props.$listStyleType};\n  ${listStyle}\n`;\n\nconst Unorderedlist = styled.ul<{ $listStyleType: CSSProperties['listStyleType'] }>`\n  list-style-type: ${(props) => props.$listStyleType};\n  ${listStyle}\n`;\n\nconst orderedStyles = ['decimal', 'lower-alpha', 'upper-roman'];\nconst unorderedStyles = ['disc', 'circle', 'square'];\n\nconst List = ({ attributes, children, element }: RenderElementProps) => {\n  if (!isListNode(element)) {\n    return null;\n  }\n\n  // Decide the subsequent style by referencing the given styles according to the format,\n  // allowing for infinite nested lists\n  const listStyles = element.format === 'ordered' ? orderedStyles : unorderedStyles;\n  const nextIndex = (element.indentLevel || 0) % listStyles!.length;\n  const listStyleType = listStyles![nextIndex];\n\n  if (element.format === 'ordered') {\n    return (\n      <Orderedlist $listStyleType={listStyleType} {...attributes}>\n        {children}\n      </Orderedlist>\n    );\n  }\n\n  return (\n    <Unorderedlist $listStyleType={listStyleType} {...attributes}>\n      {children}\n    </Unorderedlist>\n  );\n};\n\nconst replaceListWithEmptyBlock = (editor: Editor, currentListPath: Path) => {\n  // Delete the empty list\n  Transforms.removeNodes(editor, { at: currentListPath });\n\n  if (currentListPath[0] === 0) {\n    // If the list was the only (or first) block element then insert empty paragraph as editor needs default value\n    Transforms.insertNodes(\n      editor,\n      {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      },\n      { at: currentListPath }\n    );\n    Transforms.select(editor, currentListPath);\n  }\n};\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * Common handler for the backspace event on ordered and unordered lists\n */\nconst handleBackspaceKeyOnList = (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => {\n  if (!editor.selection) return;\n\n  const [currentListItem, currentListItemPath] = Editor.parent(editor, editor.selection.anchor);\n  const [currentList, currentListPath] = Editor.parent(editor, currentListItemPath);\n  const isListEmpty =\n    currentList.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isListItemEmpty =\n    currentListItem.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isFocusAtTheBeginningOfAChild =\n    editor.selection.focus.offset === 0 && editor.selection.focus.path.at(-2) === 0;\n\n  if (isListEmpty) {\n    const parentListEntry = Editor.above(editor, {\n      at: currentListPath,\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    });\n    if (!parentListEntry) {\n      event.preventDefault();\n      replaceListWithEmptyBlock(editor, currentListPath);\n    }\n  } else if (isFocusAtTheBeginningOfAChild) {\n    // If the focus is at the beginning of a child node we need to replace it with a paragraph\n    Transforms.liftNodes(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n    });\n    Transforms.setNodes(editor, { type: 'paragraph' });\n  } else if (isListItemEmpty) {\n    const previousEntry = Editor.previous(editor, {\n      at: currentListItemPath,\n    });\n    const nextEntry = Editor.next(editor, {\n      at: currentListItemPath,\n    });\n\n    if (previousEntry && nextEntry) {\n      // If previous and next nodes are lists or list-items, delete empty list item\n      event.preventDefault();\n      Transforms.removeNodes(editor, {\n        at: currentListItemPath,\n      });\n\n      // If previous and next nodes are lists with same format and indent Levels, then merge the nodes\n      const [previousList] = previousEntry;\n      const [nextList] = nextEntry;\n      if (\n        !Editor.isEditor(previousList) &&\n        !isText(previousList) &&\n        isListNode(previousList) &&\n        !Editor.isEditor(nextList) &&\n        !isText(nextList) &&\n        isListNode(nextList)\n      ) {\n        if (\n          previousList.type === 'list' &&\n          nextList.type === 'list' &&\n          previousList.format === nextList.format &&\n          previousList.indentLevel === nextList.indentLevel\n        ) {\n          Transforms.mergeNodes(editor, {\n            at: currentListItemPath,\n          });\n        }\n      }\n    }\n  }\n};\n\n/**\n * Common handler for the enter key on ordered and unordered lists\n */\nconst handleEnterKeyOnList = (editor: Editor) => {\n  const currentListItemEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n  });\n\n  if (!currentListItemEntry || !editor.selection) {\n    return;\n  }\n\n  const [currentListItem, currentListItemPath] = currentListItemEntry;\n  const [currentList, currentListPath] = Editor.parent(editor, currentListItemPath);\n  const isListEmpty =\n    currentList.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isListItemEmpty =\n    currentListItem.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isFocusAtTheBeginningOfAChild =\n    editor.selection.focus.offset === 0 && editor.selection.focus.path.at(-1) === 0;\n\n  if (isListEmpty) {\n    replaceListWithEmptyBlock(editor, currentListPath);\n  } else if (isFocusAtTheBeginningOfAChild && !isListItemEmpty) {\n    // If the focus is at the beginning of a child node, shift below the list item and create a new list-item\n    const currentNode = Editor.above(editor, { at: editor.selection.anchor });\n    Transforms.insertNodes(editor, { type: 'list-item', children: [{ type: 'text', text: '' }] });\n    if (currentNode) {\n      const path = currentNode[1];\n      const updatedPath = [...path.slice(0, -1), path[path.length - 1] + 1];\n      Transforms.select(editor, {\n        anchor: { path: updatedPath.concat(0), offset: 0 },\n        focus: { path: updatedPath.concat(0), offset: 0 },\n      });\n    }\n  } else if (isListItemEmpty) {\n    // Check if there is a list above the current list and shift list-item under it\n    if (\n      !Editor.isEditor(currentList) &&\n      isListNode(currentList) &&\n      currentList?.indentLevel &&\n      currentList.indentLevel > 0\n    ) {\n      const previousIndentLevel = currentList.indentLevel - 1;\n\n      const parentListNodeEntry = Editor.above(editor, {\n        match: (node) =>\n          !Editor.isEditor(node) &&\n          node.type === 'list' &&\n          (node.indentLevel || 0) === previousIndentLevel,\n      });\n\n      if (parentListNodeEntry) {\n        // Get the parent list path and add 1 to it to exit from the current list\n        const modifiedPath = currentListItemPath.slice(0, -1);\n        if (modifiedPath.length > 0) {\n          modifiedPath[modifiedPath.length - 1] += 1;\n        }\n\n        // Shift list-item under parent list\n        Transforms.moveNodes(editor, {\n          at: currentListItemPath,\n          to: modifiedPath,\n        });\n        return;\n      }\n    }\n\n    // Otherwise delete the empty list item and create a new paragraph below the parent list\n    Transforms.removeNodes(editor, { at: currentListItemPath });\n\n    const createdParagraphPath = Path.next(currentListPath);\n    Transforms.insertNodes(\n      editor,\n      {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      },\n      { at: createdParagraphPath }\n    );\n\n    // Move the selection to the newly created paragraph\n    Transforms.select(editor, createdParagraphPath);\n  } else {\n    // Check if the cursor is at the end of the list item\n    const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, currentListItemPath);\n\n    if (isNodeEnd) {\n      // If there was nothing after the cursor, create a fresh new list item,\n      // in order to avoid carrying over the modifiers from the previous list item\n      Transforms.insertNodes(editor, { type: 'list-item', children: [{ type: 'text', text: '' }] });\n    } else {\n      // If there is something after the cursor, split the current list item,\n      // so that we keep the content and the modifiers\n      Transforms.splitNodes(editor);\n    }\n  }\n};\n\n/**\n * Common handler for converting a node to a list\n */\nconst handleConvertToList = (editor: Editor, format: Block<'list'>['format']) => {\n  const convertedPath = baseHandleConvert<Block<'list-item'>>(editor, { type: 'list-item' });\n\n  if (!convertedPath) return;\n\n  Transforms.wrapNodes(editor, { type: 'list', format, children: [] }, { at: convertedPath });\n};\n\n/**\n * Common handler for the tab key on ordered and unordered lists\n */\nconst handleTabOnList = (editor: Editor) => {\n  const currentListItemEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n  });\n\n  if (!currentListItemEntry || !editor.selection) {\n    return;\n  }\n\n  const [currentListItem, currentListItemPath] = currentListItemEntry;\n  const [currentList] = Editor.parent(editor, currentListItemPath);\n\n  // Skip tabbing if list-item is the first item in the list\n  if (currentListItem === currentList.children[0]) return;\n\n  const currentListItemIndex = currentList.children.findIndex((item) => item === currentListItem);\n  const previousNode = currentList.children[currentListItemIndex - 1];\n\n  // If previous node is a list block then move the list-item under it\n  if (previousNode.type === 'list') {\n    const nodePath = ReactEditor.findPath(editor, previousNode);\n    const insertAtPath = previousNode.children.length;\n\n    Transforms.moveNodes(editor, {\n      at: currentListItemPath,\n      to: nodePath.concat(insertAtPath),\n    });\n    return;\n  }\n\n  if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n    // Wrap list-item with list block on tab\n    Transforms.wrapNodes(editor, {\n      type: 'list',\n      format: currentList.format,\n      indentLevel: (currentList.indentLevel || 0) + 1,\n      children: [],\n    });\n  }\n};\n\nconst listBlocks: Pick<BlocksStore, 'list-ordered' | 'list-unordered' | 'list-item'> = {\n  'list-ordered': {\n    renderElement: (props) => <List {...props} />,\n    label: {\n      id: 'components.Blocks.blocks.orderedList',\n      defaultMessage: 'Numbered list',\n    },\n    icon: NumberList,\n    matchNode: (node) => node.type === 'list' && node.format === 'ordered',\n    isInBlocksSelector: true,\n    handleConvert: (editor) => handleConvertToList(editor, 'ordered'),\n    handleEnterKey: handleEnterKeyOnList,\n    handleBackspaceKey: handleBackspaceKeyOnList,\n    handleTab: handleTabOnList,\n    snippets: ['1.'],\n  },\n  'list-unordered': {\n    renderElement: (props) => <List {...props} />,\n    label: {\n      id: 'components.Blocks.blocks.unorderedList',\n      defaultMessage: 'Bulleted list',\n    },\n    icon: BulletList,\n    matchNode: (node) => node.type === 'list' && node.format === 'unordered',\n    isInBlocksSelector: true,\n    handleConvert: (editor) => handleConvertToList(editor, 'unordered'),\n    handleEnterKey: handleEnterKeyOnList,\n    handleBackspaceKey: handleBackspaceKeyOnList,\n    handleTab: handleTabOnList,\n    snippets: ['-', '*', '+'],\n  },\n  'list-item': {\n    renderElement: (props) => (\n      <Typography tag=\"li\" {...props.attributes}>\n        {props.children}\n      </Typography>\n    ),\n    // No handleConvert, list items are created when converting to the parent list\n    matchNode: (node) => node.type === 'list-item',\n    isInBlocksSelector: false,\n    dragHandleTopMargin: '-2px',\n  },\n};\n\nexport { listBlocks };\n","import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { Paragraph } from '@strapi/icons';\nimport { type Text, Editor, Transforms } from 'slate';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { type Block } from '../utils/types';\n\nconst paragraphBlocks: Pick<BlocksStore, 'paragraph'> = {\n  paragraph: {\n    renderElement: (props) => (\n      <Typography tag=\"p\" variant=\"omega\" {...props.attributes}>\n        {props.children}\n      </Typography>\n    ),\n    icon: Paragraph,\n    label: {\n      id: 'components.Blocks.blocks.text',\n      defaultMessage: 'Text',\n    },\n    matchNode: (node) => node.type === 'paragraph',\n    isInBlocksSelector: true,\n    dragHandleTopMargin: '-2px',\n    handleConvert(editor) {\n      baseHandleConvert<Block<'paragraph'>>(editor, { type: 'paragraph' });\n    },\n    handleEnterKey(editor) {\n      if (!editor.selection) {\n        return;\n      }\n\n      // We need to keep track of the initial position of the cursor\n      const anchorPathInitialPosition = editor.selection.anchor.path;\n      /**\n       * Split the nodes where the cursor is. This will create a new paragraph with the content\n       * after the cursor, while retaining all the children, modifiers etc.\n       */\n      Transforms.splitNodes(editor, {\n        // Makes sure we always create a new node,\n        // even if there's nothing to the right of the cursor in the node.\n        always: true,\n      });\n\n      // Check if the created node is empty (if there was no text after the cursor in the node)\n      // This lets us know if we need to carry over the modifiers from the previous node\n      const parentBlockEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n      });\n      if (!parentBlockEntry) {\n        return;\n      }\n      const [, parentBlockPath] = parentBlockEntry;\n      const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, parentBlockPath);\n\n      /**\n       * Delete and recreate the node that was created at the right of the cursor.\n       * This is to avoid node pollution\n       * (e.g. keeping the level attribute when converting a heading to a paragraph).\n       * Select the parent of the selection because we want the full block, not the leaf.\n       * And copy its children to make sure we keep the modifiers.\n       */\n      const [fragmentedNode] = Editor.parent(editor, editor.selection.anchor.path);\n      Transforms.removeNodes(editor);\n\n      // Check if after the current position there is another node\n      const hasNextNode = editor.children.length - anchorPathInitialPosition[0] > 1;\n\n      // Insert the new node at the right position.\n      // The next line after the editor selection if present or otherwise at the end of the editor.\n      Transforms.insertNodes(\n        editor,\n        {\n          type: 'paragraph',\n          // Don't carry over the modifiers from the previous node if there was no text after the cursor\n          children: (isNodeEnd ? [{ type: 'text', text: '' }] : fragmentedNode.children) as Text[],\n        },\n        {\n          at: hasNextNode ? [anchorPathInitialPosition[0] + 1] : [editor.children.length],\n        }\n      );\n\n      /**\n       * The new selection will by default be at the end of the created node.\n       * Instead we manually move it to the start of the created node.\n       * Make sure to we go to the start of the node and not the start of the leaf.\n       */\n      Transforms.select(editor, editor.start([anchorPathInitialPosition[0] + 1]));\n    },\n  },\n};\n\nexport { paragraphBlocks };\n","import { Quotes } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { pressEnterTwiceToExit } from '../utils/enterKey';\nimport { type Block } from '../utils/types';\n\nconst Blockquote = styled.blockquote.attrs({ role: 'blockquote' })`\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  border-left: ${({ theme }) => `${theme.spaces[1]} solid ${theme.colors.neutral200}`};\n  padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[4]};\n  color: ${({ theme }) => theme.colors.neutral600};\n`;\n\nconst quoteBlocks: Pick<BlocksStore, 'quote'> = {\n  quote: {\n    renderElement: (props) => (\n      // The div is needed to make sure the padding bottom from BlocksContent is applied properly\n      // when the quote is the last block in the editor\n      <div>\n        <Blockquote {...props.attributes}>{props.children}</Blockquote>\n      </div>\n    ),\n    icon: Quotes,\n    label: {\n      id: 'components.Blocks.blocks.quote',\n      defaultMessage: 'Quote',\n    },\n    matchNode: (node) => node.type === 'quote',\n    isInBlocksSelector: true,\n    handleConvert(editor) {\n      baseHandleConvert<Block<'quote'>>(editor, { type: 'quote' });\n    },\n    handleEnterKey(editor) {\n      pressEnterTwiceToExit(editor);\n    },\n    snippets: ['>'],\n  },\n};\n\nexport { quoteBlocks };\n","import * as React from 'react';\n\nimport { useElementOnScreen } from '@strapi/admin/strapi-admin';\nimport { IconButton, Menu } from '@strapi/design-system';\nimport { More } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * ObservedToolbarComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ObservedToolbarComponentProps {\n  index: number;\n  lastVisibleIndex: number;\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst ObservedToolbarComponent = ({\n  index,\n  lastVisibleIndex,\n  setLastVisibleIndex,\n  rootRef,\n  children,\n}: ObservedToolbarComponentProps) => {\n  const isVisible = index <= lastVisibleIndex;\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(\n    (isVisible) => {\n      /**\n       * It's the MoreMenu's job to make an item not visible when there's not room for it.\n       * But we need to react here to the element becoming visible again.\n       */\n      if (isVisible) {\n        setLastVisibleIndex((prev) => Math.max(prev, index));\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        /**\n         * Use visibility so that the element occupies the space if requires even when there's not\n         * enough room for it to be visible. The empty reserved space will be clipped by the\n         * overflow:hidden rule on the parent, so it doesn't affect the UI.\n         * This way we can keep observing its visiblity and react to browser resize events.\n         */\n        visibility: isVisible ? 'visible' : 'hidden',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditorToolbarObserver\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface ObservedComponent {\n  toolbar: React.ReactNode;\n  menu: React.ReactNode;\n  key: string;\n}\n\nexport const EditorToolbarObserver = ({\n  observedComponents,\n  menuTriggerVariant = 'ghost',\n}: {\n  observedComponents: ObservedComponent[];\n  menuTriggerVariant?: Menu.TriggerProps['variant'];\n}) => {\n  const { formatMessage } = useIntl();\n  const toolbarRef = React.useRef<HTMLElement>(null);\n\n  const [lastVisibleIndex, setLastVisibleIndex] = React.useState<number>(\n    observedComponents.length - 1\n  );\n  const hasHiddenItems = lastVisibleIndex < observedComponents.length - 1;\n  const menuIndex = lastVisibleIndex + 1;\n\n  const [open, setOpen] = React.useState(false);\n  const isMenuOpenWithContent = open && hasHiddenItems;\n  const menuTriggerRef = useElementOnScreen<HTMLButtonElement>(\n    (isVisible) => {\n      // We only react to the menu becoming invisible. When that happens, we hide the last item.\n      if (!isVisible) {\n        /**\n         * If there's no room for any item, the index can be -1.\n         * This is intentional, in that case only the more menu will be visible.\n         **/\n        setLastVisibleIndex((prev) => prev - 1);\n        // Maintain the menu state if it has content\n        setOpen(isMenuOpenWithContent);\n      }\n    },\n    { threshold: 1, root: toolbarRef.current }\n  );\n\n  return observedComponents\n    .map((component, index) => {\n      return (\n        <ObservedToolbarComponent\n          key={component.key}\n          index={index}\n          lastVisibleIndex={lastVisibleIndex}\n          setLastVisibleIndex={setLastVisibleIndex}\n          rootRef={toolbarRef}\n        >\n          {component.toolbar}\n        </ObservedToolbarComponent>\n      );\n    })\n    .toSpliced(\n      menuIndex,\n      0,\n      <Menu.Root\n        key=\"more-menu\"\n        defaultOpen={false}\n        open={isMenuOpenWithContent}\n        onOpenChange={setOpen}\n      >\n        <Menu.Trigger\n          paddingLeft={0}\n          paddingRight={0}\n          ref={menuTriggerRef}\n          variant={menuTriggerVariant}\n          style={{ visibility: hasHiddenItems ? 'visible' : 'hidden' }}\n          label={formatMessage({ id: 'global.more', defaultMessage: 'More' })}\n          tag={IconButton}\n          icon={<More />}\n        />\n        <Menu.Content\n          onCloseAutoFocus={(e) => e.preventDefault()}\n          maxHeight=\"100%\"\n          minWidth=\"256px\"\n          popoverPlacement=\"bottom-end\"\n          zIndex={2}\n        >\n          {observedComponents.slice(menuIndex).map((component) => (\n            <React.Fragment key={component.key}>{component.menu}</React.Fragment>\n          ))}\n        </Menu.Content>\n      </Menu.Root>\n    );\n};\n","import * as React from 'react';\n\nimport * as Toolbar from '@radix-ui/react-toolbar';\nimport { useElementOnScreen } from '@strapi/admin/strapi-admin';\nimport {\n  Flex,\n  Tooltip,\n  SingleSelect,\n  SingleSelectOption,\n  Box,\n  FlexComponent,\n  BoxComponent,\n  Menu,\n  IconButton,\n} from '@strapi/design-system';\nimport { Link, More } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { Editor, Transforms, Element as SlateElement, Node, type Ancestor } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { css, styled } from 'styled-components';\n\nimport { EditorToolbarObserver } from '../../EditorToolbarObserver';\n\nimport {\n  type BlocksStore,\n  type SelectorBlockKey,\n  isSelectorBlockKey,\n  useBlocksEditorContext,\n} from './BlocksEditor';\nimport { insertLink } from './utils/links';\nimport { type Block, getEntries, getKeys } from './utils/types';\n\nconst ToolbarWrapper = styled<FlexComponent>(Flex)`\n  &[aria-disabled='true'] {\n    cursor: not-allowed;\n    background: ${({ theme }) => theme.colors.neutral150};\n  }\n`;\n\nconst ToolbarSeparator = styled(Toolbar.Separator)`\n  background: ${({ theme }) => theme.colors.neutral150};\n  width: 1px;\n  height: 2.4rem;\n`;\n\nconst FlexButton = styled<FlexComponent<'button'>>(Flex)`\n  // Inherit the not-allowed cursor from ToolbarWrapper when disabled\n  &[aria-disabled] {\n    cursor: not-allowed;\n  }\n\n  &[aria-disabled='false'] {\n    cursor: pointer;\n\n    // Only apply hover styles if the button is enabled\n    &:hover {\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n  }\n`;\n\nconst SelectWrapper = styled<BoxComponent>(Box)`\n  // Styling changes to SingleSelect component don't work, so adding wrapper to target SingleSelect\n  div[role='combobox'] {\n    border: none;\n    cursor: pointer;\n    min-height: unset;\n    padding-top: 6px;\n    padding-bottom: 6px;\n\n    &[aria-disabled='false']:hover {\n      cursor: pointer;\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n\n    &[aria-disabled] {\n      background: transparent;\n      cursor: inherit;\n\n      // Select text and icons should also have disabled color\n      span {\n        color: ${({ theme }) => theme.colors.neutral600};\n      }\n    }\n  }\n`;\n\n/**\n * Handles the modal component that may be returned by a block when converting it\n */\nfunction useConversionModal() {\n  const [modalElement, setModalComponent] = React.useState<React.JSX.Element | null>(null);\n\n  const handleConversionResult = (renderModal: void | (() => React.JSX.Element) | undefined) => {\n    // Not all blocks return a modal\n    if (renderModal) {\n      // Use cloneElement to apply a key because to create a new instance of the component\n      // Without the new key, the state is kept from previous times that option was picked\n      setModalComponent(React.cloneElement(renderModal(), { key: Date.now() }));\n    }\n  };\n\n  return { modalElement, handleConversionResult };\n}\n\ninterface ToolbarButtonProps {\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  name: string;\n  label: MessageDescriptor;\n  isActive: boolean;\n  disabled: boolean;\n  handleClick: () => void;\n}\n\nconst ToolbarButton = ({\n  icon: Icon,\n  name,\n  label,\n  isActive,\n  disabled,\n  handleClick,\n}: ToolbarButtonProps) => {\n  const { editor } = useBlocksEditorContext('ToolbarButton');\n  const { formatMessage } = useIntl();\n  const labelMessage = formatMessage(label);\n\n  const enabledColor = isActive ? 'primary600' : 'neutral600';\n\n  return (\n    <Tooltip label={labelMessage}>\n      <Toolbar.ToggleItem\n        value={name}\n        data-state={isActive ? 'on' : 'off'}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          handleClick();\n          ReactEditor.focus(editor);\n        }}\n        aria-disabled={disabled}\n        disabled={disabled}\n        aria-label={labelMessage}\n        asChild\n      >\n        <FlexButton\n          tag=\"button\"\n          background={isActive ? 'primary100' : ''}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width={7}\n          height={7}\n          hasRadius\n        >\n          <Icon fill={disabled ? 'neutral300' : enabledColor} />\n        </FlexButton>\n      </Toolbar.ToggleItem>\n    </Tooltip>\n  );\n};\n\nconst BlocksDropdown = () => {\n  const { editor, blocks, disabled } = useBlocksEditorContext('BlocksDropdown');\n  const { formatMessage } = useIntl();\n  const { modalElement, handleConversionResult } = useConversionModal();\n\n  const blockKeysToInclude: SelectorBlockKey[] = getEntries(blocks).reduce<\n    ReturnType<typeof getEntries>\n  >((currentKeys, entry) => {\n    const [key, block] = entry;\n\n    return block.isInBlocksSelector ? [...currentKeys, key] : currentKeys;\n  }, []);\n\n  const [blockSelected, setBlockSelected] = React.useState<SelectorBlockKey>('paragraph');\n\n  const handleSelect = (optionKey: unknown) => {\n    if (!isSelectorBlockKey(optionKey)) {\n      return;\n    }\n\n    const editorIsEmpty =\n      editor.children.length === 1 && Editor.isEmpty(editor, editor.children[0]);\n\n    if (!editor.selection && !editorIsEmpty) {\n      // When there is no selection, create an empty block at the end of the editor\n      // so that it can be converted to the selected block\n      Transforms.insertNodes(\n        editor,\n        {\n          type: 'quote',\n          children: [{ type: 'text', text: '' }],\n        },\n        {\n          select: true,\n          // Since there's no selection, Slate will automatically insert the node at the end\n        }\n      );\n    } else if (!editor.selection && editorIsEmpty) {\n      // When there is no selection and the editor is empty,\n      // select the empty paragraph from Slate's initialValue so it gets converted\n      Transforms.select(editor, Editor.start(editor, [0, 0]));\n    }\n\n    // If selection is already a list block, toggle its format\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    });\n\n    if (currentListEntry && ['list-ordered', 'list-unordered'].includes(optionKey)) {\n      const [currentList, currentListPath] = currentListEntry;\n      const format = optionKey === 'list-ordered' ? 'ordered' : 'unordered';\n\n      if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n        // Format is different, toggle list format\n        if (currentList.format !== format) {\n          Transforms.setNodes(editor, { format }, { at: currentListPath });\n        }\n      }\n      return;\n    }\n\n    // Let the block handle the Slate conversion logic\n    const maybeRenderModal = blocks[optionKey].handleConvert?.(editor);\n    handleConversionResult(maybeRenderModal);\n\n    setBlockSelected(optionKey);\n\n    ReactEditor.focus(editor);\n  };\n\n  /**\n   * Prevent the select from focusing itself so ReactEditor.focus(editor) can focus the editor instead.\n   *\n   * The editor first loses focus to a blur event when clicking the select button. However,\n   * refocusing the editor is not enough since the select's default behavior is to refocus itself\n   * after an option is selected.\n   *\n   */\n  const preventSelectFocus = (e: Event) => e.preventDefault();\n\n  // Listen to the selection change and update the selected block in the dropdown\n  React.useEffect(() => {\n    if (editor.selection) {\n      let selectedNode: Ancestor;\n\n      // If selection anchor is a list-item, get its parent\n      const currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: editor.selection.anchor,\n      });\n\n      if (currentListEntry) {\n        const [currentList] = currentListEntry;\n        selectedNode = currentList;\n      } else {\n        // Get the parent node of the anchor other than list-item\n        const [anchorNode] = Editor.parent(editor, editor.selection.anchor, {\n          edge: 'start',\n          depth: 2,\n        });\n\n        // @ts-expect-error slate's delete behaviour creates an exceptional type\n        if (anchorNode.type === 'list-item') {\n          // When the last node in the selection is a list item,\n          // slate's default delete operation leaves an empty list-item instead of converting it into a paragraph.\n          // Issue: https://github.com/ianstormtaylor/slate/issues/2500\n\n          Transforms.setNodes(editor, { type: 'paragraph' });\n          // @ts-expect-error convert explicitly type to paragraph\n          selectedNode = { ...anchorNode, type: 'paragraph' };\n        } else {\n          selectedNode = anchorNode;\n        }\n      }\n\n      // Find the block key that matches the anchor node\n      const anchorBlockKey = getKeys(blocks).find(\n        (blockKey) => !Editor.isEditor(selectedNode) && blocks[blockKey].matchNode(selectedNode)\n      );\n\n      // Change the value selected in the dropdown if it doesn't match the anchor block key\n      if (anchorBlockKey && anchorBlockKey !== blockSelected) {\n        setBlockSelected(anchorBlockKey as SelectorBlockKey);\n      }\n    }\n  }, [editor.selection, editor, blocks, blockSelected]);\n\n  const Icon = blocks[blockSelected].icon;\n\n  return (\n    <>\n      <SelectWrapper>\n        <SingleSelect\n          startIcon={<Icon />}\n          onChange={handleSelect}\n          placeholder={formatMessage(blocks[blockSelected].label)}\n          value={blockSelected}\n          onCloseAutoFocus={preventSelectFocus}\n          aria-label={formatMessage({\n            id: 'components.Blocks.blocks.selectBlock',\n            defaultMessage: 'Select a block',\n          })}\n          disabled={disabled}\n        >\n          {blockKeysToInclude.map((key) => (\n            <BlockOption\n              key={key}\n              value={key}\n              label={blocks[key].label}\n              icon={blocks[key].icon}\n              blockSelected={blockSelected}\n            />\n          ))}\n        </SingleSelect>\n      </SelectWrapper>\n      {modalElement}\n    </>\n  );\n};\n\ninterface BlockOptionProps {\n  value: string;\n  icon: React.ComponentType<React.SVGProps<SVGElement>>;\n  label: MessageDescriptor;\n  blockSelected: string;\n}\n\nconst BlockOption = ({ value, icon: Icon, label, blockSelected }: BlockOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  const isSelected = value === blockSelected;\n\n  return (\n    <SingleSelectOption\n      startIcon={<Icon fill={isSelected ? 'primary600' : 'neutral600'} />}\n      value={value}\n    >\n      {formatMessage(label)}\n    </SingleSelectOption>\n  );\n};\n\nconst isListNode = (node: unknown): node is Block<'list'> => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'list';\n};\n\ninterface ListButtonProps {\n  block: BlocksStore['list-ordered'] | BlocksStore['list-unordered'];\n  format: Block<'list'>['format'];\n  location?: 'toolbar' | 'menu';\n}\n\nconst ListButton = ({ block, format, location = 'toolbar' }: ListButtonProps) => {\n  const { editor, disabled, blocks } = useBlocksEditorContext('ListButton');\n  const { formatMessage } = useIntl();\n\n  const isListActive = () => {\n    if (!editor.selection) return false;\n\n    // Get the parent list at selection anchor node\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      at: editor.selection.anchor,\n    });\n\n    if (currentListEntry) {\n      const [currentList] = currentListEntry;\n      if (!Editor.isEditor(currentList) && isListNode(currentList) && currentList.format === format)\n        return true;\n    }\n    return false;\n  };\n\n  /**\n   * @TODO: Currently, applying list while multiple blocks are selected is not supported.\n   * We should implement this feature in the future.\n   */\n  const isListDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const toggleList = (format: Block<'list'>['format']) => {\n    let currentListEntry;\n    if (editor.selection) {\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      });\n    } else {\n      // If no selection, toggle last inserted node\n      const [_, lastNodePath] = Editor.last(editor, []);\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: lastNodePath,\n      });\n    }\n\n    if (!currentListEntry) {\n      // If selection is not a list then convert it to list\n      blocks[`list-${format}`].handleConvert!(editor);\n      return;\n    }\n\n    // If selection is already a list then toggle format\n    const [currentList, currentListPath] = currentListEntry;\n\n    if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n      if (currentList.format !== format) {\n        // Format is different, toggle list format\n        Transforms.setNodes(editor, { format }, { at: currentListPath });\n      } else {\n        // Format is same, convert selected list-item to paragraph\n        blocks['paragraph'].handleConvert!(editor);\n      }\n    }\n  };\n\n  if (location === 'menu') {\n    const Icon = block.icon;\n\n    return (\n      <StyledMenuItem\n        onSelect={() => toggleList(format)}\n        isActive={isListActive()}\n        disabled={isListDisabled()}\n      >\n        <Icon />\n        {formatMessage(block.label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={block.icon}\n      name={format}\n      label={block.label}\n      isActive={isListActive()}\n      disabled={isListDisabled()}\n      handleClick={() => toggleList(format)}\n    />\n  );\n};\n\nconst LinkButton = ({\n  disabled,\n  location = 'toolbar',\n}: {\n  disabled: boolean;\n  location?: 'toolbar' | 'menu';\n}) => {\n  const { editor } = useBlocksEditorContext('LinkButton');\n  const { formatMessage } = useIntl();\n\n  const isLinkActive = () => {\n    const { selection } = editor;\n\n    if (!selection) return false;\n\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        at: Editor.unhangRange(editor, selection),\n        match: (node) => SlateElement.isElement(node) && node.type === 'link',\n      })\n    );\n\n    return Boolean(match);\n  };\n\n  const isLinkDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const addLink = () => {\n    editor.shouldSaveLinkPath = true;\n    // We insert an empty anchor, so we split the DOM to have a element we can use as reference for the popover\n    insertLink(editor, { url: '' });\n  };\n\n  const label = {\n    id: 'components.Blocks.link',\n    defaultMessage: 'Link',\n  } as MessageDescriptor;\n\n  if (location === 'menu') {\n    return (\n      <StyledMenuItem onSelect={addLink} isActive={isLinkActive()} disabled={isLinkDisabled()}>\n        <Link />\n        {formatMessage(label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={Link}\n      name=\"link\"\n      label={label}\n      isActive={isLinkActive()}\n      handleClick={addLink}\n      disabled={isLinkDisabled()}\n    />\n  );\n};\n\ninterface ObservedToolbarComponentProps {\n  index: number;\n  lastVisibleIndex: number;\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst ObservedToolbarComponent = ({\n  index,\n  lastVisibleIndex,\n  setLastVisibleIndex,\n  rootRef,\n  children,\n}: ObservedToolbarComponentProps) => {\n  const isVisible = index <= lastVisibleIndex;\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(\n    (isVisible) => {\n      /**\n       * It's the MoreMenu's job to make an item not visible when there's not room for it.\n       * But we need to react here to the element becoming visible again.\n       */\n      if (isVisible) {\n        setLastVisibleIndex((prev) => Math.max(prev, index));\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        /**\n         * Use visibility so that the element occupies the space if requires even when there's not\n         * enough room for it to be visible. The empty reserved space will be clipped by the\n         * overflow:hidden rule on the parent, so it doesn't affect the UI.\n         * This way we can keep observing its visiblity and react to browser resize events.\n         */\n        visibility: isVisible ? 'visible' : 'hidden',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\ninterface ObservedComponent {\n  toolbar: React.ReactNode;\n  menu: React.ReactNode;\n  key: string;\n}\n\ninterface MoreMenuProps {\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  hasHiddenItems: boolean;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst MoreMenu = ({ setLastVisibleIndex, hasHiddenItems, rootRef, children }: MoreMenuProps) => {\n  const { formatMessage } = useIntl();\n  const containerRef = useElementOnScreen<HTMLButtonElement>(\n    (isVisible) => {\n      // We only react to the menu becoming invisible. When that happens, we hide the last item.\n      if (!isVisible) {\n        /**\n         * If there's no room for any item, the index can be -1.\n         * This is intentional, in that case only the more menu will be visible.\n         **/\n        setLastVisibleIndex((prev) => prev - 1);\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <Menu.Root defaultOpen={false}>\n      <Menu.Trigger\n        endIcon={null}\n        paddingLeft={0}\n        paddingRight={0}\n        ref={containerRef}\n        style={{ visibility: hasHiddenItems ? 'visible' : 'hidden' }}\n      >\n        <IconButton\n          variant=\"ghost\"\n          label={formatMessage({ id: 'global.more', defaultMessage: 'More' })}\n          tag=\"span\"\n        >\n          <More aria-hidden focusable={false} />\n        </IconButton>\n      </Menu.Trigger>\n      <Menu.Content onCloseAutoFocus={(e) => e.preventDefault()}>{children}</Menu.Content>\n    </Menu.Root>\n  );\n};\n\nconst StyledMenuItem = styled(Menu.Item)<{ isActive: boolean }>`\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.primary100};\n  }\n\n  ${(props) =>\n    props.isActive &&\n    css`\n      font-weight: bold;\n      background-color: ${({ theme }) => theme.colors.primary100};\n      color: ${({ theme }) => theme.colors.primary600};\n      font-weight: bold;\n    `}\n\n  > span {\n    display: inline-flex;\n    gap: ${({ theme }) => theme.spaces[2]};\n    align-items: center;\n  }\n\n  svg {\n    fill: ${({ theme, isActive }) =>\n      isActive ? theme.colors.primary600 : theme.colors.neutral600};\n  }\n`;\n\nconst BlocksToolbar = () => {\n  const { editor, blocks, modifiers, disabled } = useBlocksEditorContext('BlocksToolbar');\n  const { formatMessage } = useIntl();\n\n  /**\n   * The modifier buttons are disabled when an image is selected.\n   */\n  const checkButtonDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    if (!editor.selection) {\n      return false;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n\n    if (['image', 'code'].includes(selectedNode.type)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isButtonDisabled = checkButtonDisabled();\n\n  /**\n   * Observed components are ones that may or may not be visible in the toolbar, depending on the\n   * available space. They provide two render props:\n   * - renderInToolbar: for when we try to render the component in the toolbar (may be hidden)\n   * - renderInMenu: for when the component didn't fit in the toolbar and is relegated\n   *   to the \"more\" menu\n   */\n  const observedComponents: ObservedComponent[] = [\n    ...Object.entries(modifiers).map(([name, modifier]) => {\n      const Icon = modifier.icon;\n      const isActive = modifier.checkIsActive(editor);\n      const handleSelect = () => modifier.handleToggle(editor);\n\n      return {\n        toolbar: (\n          <ToolbarButton\n            key={name}\n            name={name}\n            icon={modifier.icon}\n            label={modifier.label}\n            isActive={modifier.checkIsActive(editor)}\n            handleClick={handleSelect}\n            disabled={isButtonDisabled}\n          />\n        ),\n        menu: (\n          <StyledMenuItem onSelect={handleSelect} isActive={isActive}>\n            <Icon />\n            {formatMessage(modifier.label)}\n          </StyledMenuItem>\n        ),\n        key: `modifier.${name}`,\n      };\n    }),\n    {\n      toolbar: <LinkButton disabled={isButtonDisabled} location=\"toolbar\" />,\n      menu: <LinkButton disabled={isButtonDisabled} location=\"menu\" />,\n      key: 'block.link',\n    },\n    {\n      // List buttons can only be rendered together when in the toolbar\n      toolbar: (\n        <Flex direction=\"row\" gap={1}>\n          <ToolbarSeparator />\n          <Toolbar.ToggleGroup type=\"single\" asChild>\n            <Flex gap={1}>\n              <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"toolbar\" />\n              <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"toolbar\" />\n            </Flex>\n          </Toolbar.ToggleGroup>\n        </Flex>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"menu\" />\n          <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"menu\" />\n        </>\n      ),\n      key: 'block.list',\n    },\n  ];\n\n  return (\n    <Toolbar.Root aria-disabled={disabled} asChild>\n      <ToolbarWrapper gap={2} padding={2} width=\"100%\">\n        <BlocksDropdown />\n        <ToolbarSeparator />\n        <Toolbar.ToggleGroup type=\"multiple\" asChild>\n          <Flex direction=\"row\" gap={1} grow={1} overflow=\"hidden\">\n            <EditorToolbarObserver observedComponents={observedComponents} />\n          </Flex>\n        </Toolbar.ToggleGroup>\n      </ToolbarWrapper>\n    </Toolbar.Root>\n  );\n};\n\nexport { BlocksToolbar, useConversionModal };\n","import * as React from 'react';\n\nimport {\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  IconButton,\n  IconButtonComponent,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { Drag } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Editor, Range, Transforms } from 'slate';\nimport { ReactEditor, type RenderElementProps, type RenderLeafProps, Editable } from 'slate-react';\nimport { styled, CSSProperties, css } from 'styled-components';\n\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDragAndDrop, DIRECTIONS } from '../../../../../hooks/useDragAndDrop';\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { decorateCode } from './Blocks/Code';\nimport { type BlocksStore, useBlocksEditorContext } from './BlocksEditor';\nimport { useConversionModal } from './BlocksToolbar';\nimport { type ModifiersStore } from './Modifiers';\nimport { getEntries, isLinkNode, isListNode } from './utils/types';\n\nconst StyledEditable = styled(Editable)<{ isExpandedMode: boolean }>`\n  // The outline style is set on the wrapper with :focus-within\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spaces[3]};\n  height: 100%;\n  // For fullscreen align input in the center with fixed width\n  width: ${(props) => (props.isExpandedMode ? '512px' : '100%')};\n  margin: auto;\n\n  > *:last-child {\n    padding-bottom: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nconst Wrapper = styled<BoxComponent>(Box)<{ isOverDropTarget: boolean }>`\n  position: ${({ isOverDropTarget }) => isOverDropTarget && 'relative'};\n`;\n\ntype DragDirection = (typeof DIRECTIONS)[keyof typeof DIRECTIONS];\n\nconst DropPlaceholder = styled<BoxComponent>(Box)<{\n  dragDirection: DragDirection | null;\n  placeholderMargin: 1 | 2;\n}>`\n  position: absolute;\n  right: 0;\n\n  // Show drop placeholder 8px above or below the drop target\n  ${({ dragDirection, theme, placeholderMargin }) => css`\n    top: ${dragDirection === DIRECTIONS.UPWARD && `-${theme.spaces[placeholderMargin]}`};\n    bottom: ${dragDirection === DIRECTIONS.DOWNWARD && `-${theme.spaces[placeholderMargin]}`};\n  `}\n`;\n\nconst DragItem = styled<FlexComponent>(Flex)<{ $dragVisibility: CSSProperties['visibility'] }>`\n  // Style each block rendered using renderElement()\n  & > [data-slate-node='element'] {\n    width: 100%;\n    opacity: inherit;\n  }\n\n  // Set the visibility of drag button\n  [role='button'] {\n    visibility: ${(props) => props.$dragVisibility};\n    opacity: inherit;\n  }\n  &[aria-disabled='true'] {\n    user-drag: none;\n  }\n`;\n\nconst DragIconButton = styled<IconButtonComponent<'div'>>(IconButton)<{\n  $dragHandleTopMargin?: CSSProperties['marginTop'];\n}>`\n  user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  padding-left: ${({ theme }) => theme.spaces[0]};\n  padding-right: ${({ theme }) => theme.spaces[0]};\n  padding-top: ${({ theme }) => theme.spaces[1]};\n  padding-bottom: ${({ theme }) => theme.spaces[1]};\n  visibility: hidden;\n  cursor: grab;\n  opacity: inherit;\n  margin-top: ${(props) => props.$dragHandleTopMargin ?? 0};\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n  &:active {\n    cursor: grabbing;\n    background: ${({ theme }) => theme.colors.neutral150};\n  }\n  &[aria-disabled='true'] {\n    visibility: hidden;\n  }\n  svg {\n    min-width: ${({ theme }) => theme.spaces[3]};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\ntype Direction = {\n  setDragDirection: (direction: DragDirection) => void;\n  dragDirection: DragDirection | null;\n};\n\ntype DragAndDropElementProps = Direction & {\n  children: RenderElementProps['children'];\n  index: Array<number>;\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n};\n\nconst DragAndDropElement = ({\n  children,\n  index,\n  setDragDirection,\n  dragDirection,\n  dragHandleTopMargin,\n}: DragAndDropElementProps) => {\n  const { editor, disabled, name, setLiveText } = useBlocksEditorContext('drag-and-drop');\n  const { formatMessage } = useIntl();\n  const [dragVisibility, setDragVisibility] = React.useState<CSSProperties['visibility']>('hidden');\n\n  const handleMoveBlock = React.useCallback(\n    (newIndex: Array<number>, currentIndex: Array<number>) => {\n      Transforms.moveNodes(editor, {\n        at: currentIndex,\n        to: newIndex,\n      });\n\n      // Add 1 to the index for the live text message\n      const currentIndexPosition = [currentIndex[0] + 1, ...currentIndex.slice(1)];\n      const newIndexPosition = [newIndex[0] + 1, ...newIndex.slice(1)];\n\n      setLiveText(\n        formatMessage(\n          {\n            id: getTranslation('components.Blocks.dnd.reorder'),\n            defaultMessage: '{item}, moved. New position in the editor: {position}.',\n          },\n          {\n            item: `${name}.${currentIndexPosition.join(',')}`,\n            position: `${newIndexPosition.join(',')} of ${editor.children.length}`,\n          }\n        )\n      );\n    },\n    [editor, formatMessage, name, setLiveText]\n  );\n\n  const [{ handlerId, isDragging, isOverDropTarget, direction }, blockRef, dropRef, dragRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.BLOCKS}_${name}`,\n      index,\n      item: {\n        index,\n        displayedValue: children,\n      },\n      onDropItem(currentIndex, newIndex) {\n        if (newIndex) handleMoveBlock(newIndex, currentIndex);\n      },\n    });\n\n  const composedBoxRefs = useComposedRefs(blockRef, dropRef);\n\n  // Set Drag direction before loosing state while dragging\n  React.useEffect(() => {\n    if (direction) {\n      setDragDirection(direction);\n    }\n  }, [direction, setDragDirection]);\n\n  // On selection change hide drag handle\n  React.useEffect(() => {\n    setDragVisibility('hidden');\n  }, [editor.selection]);\n\n  return (\n    <Wrapper ref={composedBoxRefs} isOverDropTarget={isOverDropTarget}>\n      {isOverDropTarget && (\n        <DropPlaceholder\n          borderStyle=\"solid\"\n          borderColor=\"secondary200\"\n          borderWidth=\"2px\"\n          width=\"calc(100% - 24px)\"\n          marginLeft=\"auto\"\n          dragDirection={dragDirection}\n          // For list items placeholder reduce the margin around\n          placeholderMargin={children.props.as && children.props.as === 'li' ? 1 : 2}\n        />\n      )}\n      {isDragging ? (\n        <CloneDragItem dragHandleTopMargin={dragHandleTopMargin}>{children}</CloneDragItem>\n      ) : (\n        <DragItem\n          ref={dragRef}\n          data-handler-id={handlerId}\n          gap={2}\n          paddingLeft={2}\n          alignItems=\"start\"\n          onDragStart={(event) => {\n            const target = event.target as HTMLElement;\n            const currentTarget = event.currentTarget as HTMLElement;\n\n            // Dragging action should only trigger drag event when button is dragged, however update styles on the whole dragItem.\n            if (target.getAttribute('role') !== 'button') {\n              event.preventDefault();\n            } else {\n              // Setting styles using dragging state is not working, so set it on current target element as nodes get dragged\n              currentTarget.style.opacity = '0.5';\n            }\n          }}\n          onDragEnd={(event) => {\n            const currentTarget = event.currentTarget as HTMLElement;\n            currentTarget.style.opacity = '1';\n          }}\n          onMouseMove={() => setDragVisibility('visible')}\n          onSelect={() => setDragVisibility('visible')}\n          onMouseLeave={() => setDragVisibility('hidden')}\n          aria-disabled={disabled}\n          $dragVisibility={dragVisibility}\n        >\n          <DragIconButton\n            tag=\"div\"\n            contentEditable={false}\n            role=\"button\"\n            tabIndex={0}\n            withTooltip={false}\n            label={formatMessage({\n              id: getTranslation('components.DragHandle-label'),\n              defaultMessage: 'Drag',\n            })}\n            onClick={(e) => e.stopPropagation()}\n            aria-disabled={disabled}\n            disabled={disabled}\n            draggable\n            // For some blocks top margin added to drag handle to align at the text level\n            $dragHandleTopMargin={dragHandleTopMargin}\n          >\n            <Drag color=\"primary500\" />\n          </DragIconButton>\n          {children}\n        </DragItem>\n      )}\n    </Wrapper>\n  );\n};\n\ninterface CloneDragItemProps {\n  children: RenderElementProps['children'];\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n}\n\n// To prevent applying opacity to the original item being dragged, display a cloned element without opacity.\nconst CloneDragItem = ({ children, dragHandleTopMargin }: CloneDragItemProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <DragItem gap={2} paddingLeft={2} alignItems=\"start\" $dragVisibility=\"visible\">\n      <DragIconButton\n        tag=\"div\"\n        role=\"button\"\n        withTooltip={false}\n        label={formatMessage({\n          id: getTranslation('components.DragHandle-label'),\n          defaultMessage: 'Drag',\n        })}\n        $dragHandleTopMargin={dragHandleTopMargin}\n      >\n        <Drag color=\"neutral600\" />\n      </DragIconButton>\n      {children}\n    </DragItem>\n  );\n};\n\ninterface ExtendedRenderLeafProps extends RenderLeafProps {\n  leaf: RenderLeafProps['leaf'] & { className?: string };\n}\n\nconst baseRenderLeaf = (props: ExtendedRenderLeafProps, modifiers: ModifiersStore) => {\n  // Recursively wrap the children for each active modifier\n  const wrappedChildren = getEntries(modifiers).reduce((currentChildren, modifierEntry) => {\n    const [name, modifier] = modifierEntry;\n\n    if (props.leaf[name]) {\n      return modifier.renderLeaf(currentChildren);\n    }\n\n    return currentChildren;\n  }, props.children);\n\n  return (\n    <span {...props.attributes} className={props.leaf.className}>\n      {wrappedChildren}\n    </span>\n  );\n};\n\ntype BaseRenderElementProps = Direction & {\n  props: RenderElementProps['children'];\n  blocks: BlocksStore;\n  editor: Editor;\n};\n\nconst baseRenderElement = ({\n  props,\n  blocks,\n  editor,\n  setDragDirection,\n  dragDirection,\n}: BaseRenderElementProps) => {\n  const { element } = props;\n\n  const blockMatch = Object.values(blocks).find((block) => block.matchNode(element));\n  const block = blockMatch || blocks.paragraph;\n  const nodePath = ReactEditor.findPath(editor, element);\n\n  // Link is inline block so it cannot be dragged\n  // List items and nested list blocks i.e. lists with indent level higher than 0 are skipped from dragged items\n  if (\n    isLinkNode(element) ||\n    (isListNode(element) && element.indentLevel && element.indentLevel > 0) ||\n    element.type === 'list-item'\n  ) {\n    return block.renderElement(props);\n  }\n\n  return (\n    <DragAndDropElement\n      index={nodePath}\n      setDragDirection={setDragDirection}\n      dragDirection={dragDirection}\n      dragHandleTopMargin={block.dragHandleTopMargin}\n    >\n      {block.renderElement(props)}\n    </DragAndDropElement>\n  );\n};\n\ninterface BlocksContentProps {\n  placeholder?: string;\n  ariaLabelId: string;\n}\n\nconst BlocksContent = ({ placeholder, ariaLabelId }: BlocksContentProps) => {\n  const { editor, disabled, blocks, modifiers, setLiveText, isExpandedMode } =\n    useBlocksEditorContext('BlocksContent');\n  const blocksRef = React.useRef<HTMLDivElement>(null);\n  const { formatMessage } = useIntl();\n  const [dragDirection, setDragDirection] = React.useState<DragDirection | null>(null);\n  const { modalElement, handleConversionResult } = useConversionModal();\n\n  // Create renderLeaf function based on the modifiers store\n  const renderLeaf = React.useCallback(\n    (props: ExtendedRenderLeafProps) => baseRenderLeaf(props, modifiers),\n    [modifiers]\n  );\n\n  const handleMoveBlocks = (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) return;\n\n    const start = Range.start(editor.selection);\n    const currentIndex = [start.path[0]];\n    let newIndexPosition = 0;\n\n    if (event.key === 'ArrowUp') {\n      newIndexPosition = currentIndex[0] > 0 ? currentIndex[0] - 1 : currentIndex[0];\n    } else {\n      newIndexPosition =\n        currentIndex[0] < editor.children.length - 1 ? currentIndex[0] + 1 : currentIndex[0];\n    }\n\n    const newIndex = [newIndexPosition];\n\n    if (newIndexPosition !== currentIndex[0]) {\n      Transforms.moveNodes(editor, {\n        at: currentIndex,\n        to: newIndex,\n      });\n\n      setLiveText(\n        formatMessage(\n          {\n            id: getTranslation('components.Blocks.dnd.reorder'),\n            defaultMessage: '{item}, moved. New position in the editor: {position}.',\n          },\n          {\n            item: `${name}.${currentIndex[0] + 1}`,\n            position: `${newIndex[0] + 1} of ${editor.children.length}`,\n          }\n        )\n      );\n\n      event.preventDefault();\n    }\n  };\n\n  // Create renderElement function base on the blocks store\n  const renderElement = React.useCallback(\n    (props: RenderElementProps) =>\n      baseRenderElement({ props, blocks, editor, dragDirection, setDragDirection }),\n    [blocks, editor, dragDirection, setDragDirection]\n  );\n\n  const checkSnippet = (event: React.KeyboardEvent<HTMLElement>) => {\n    // Get current text block\n    if (!editor.selection) {\n      return;\n    }\n\n    const [textNode, textNodePath] = Editor.node(editor, editor.selection.anchor.path);\n\n    // Narrow the type to a text node\n    if (Editor.isEditor(textNode) || textNode.type !== 'text') {\n      return;\n    }\n\n    // Don't check for snippets if we're not at the start of a block\n    if (textNodePath.at(-1) !== 0) {\n      return;\n    }\n\n    // Check if the text node starts with a known snippet\n    const blockMatchingSnippet = Object.values(blocks).find((block) => {\n      return block.snippets?.includes(textNode.text);\n    });\n\n    if (blockMatchingSnippet?.handleConvert) {\n      // Prevent the space from being created and delete the snippet\n      event.preventDefault();\n      Transforms.delete(editor, {\n        distance: textNode.text.length,\n        unit: 'character',\n        reverse: true,\n      });\n\n      // Convert the selected block\n      const maybeRenderModal = blockMatchingSnippet.handleConvert(editor);\n      handleConversionResult(maybeRenderModal);\n    }\n  };\n\n  const handleEnter = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n    if (!selectedBlock) {\n      return;\n    }\n\n    // Allow forced line breaks when shift is pressed\n    if (event.shiftKey && selectedNode.type !== 'image') {\n      Transforms.insertText(editor, '\\n');\n      return;\n    }\n\n    // Check if there's an enter handler for the selected block\n    if (selectedBlock.handleEnterKey) {\n      selectedBlock.handleEnterKey(editor);\n    } else {\n      blocks.paragraph.handleEnterKey!(editor);\n    }\n  };\n\n  const handleBackspaceEvent = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n\n    if (!selectedBlock) {\n      return;\n    }\n\n    if (selectedBlock.handleBackspaceKey) {\n      selectedBlock.handleBackspaceKey(editor, event);\n    }\n  };\n\n  const handleTab = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n    if (!selectedBlock) {\n      return;\n    }\n\n    if (selectedBlock.handleTab) {\n      event.preventDefault();\n      selectedBlock.handleTab(editor);\n    }\n  };\n\n  const handleKeyboardShortcuts = (event: React.KeyboardEvent<HTMLElement>) => {\n    const isCtrlOrCmd = event.metaKey || event.ctrlKey;\n\n    if (isCtrlOrCmd) {\n      // Check if there's a modifier to toggle\n      Object.values(modifiers).forEach((value) => {\n        if (value.isValidEventKey(event)) {\n          value.handleToggle(editor);\n          return;\n        }\n      });\n      if (event.shiftKey && ['ArrowUp', 'ArrowDown'].includes(event.key)) {\n        handleMoveBlocks(editor, event);\n      }\n    }\n  };\n\n  const handleKeyDown: React.KeyboardEventHandler<HTMLElement> = (event) => {\n    // Find the right block-specific handlers for enter and backspace key presses\n    switch (event.key) {\n      case 'Enter':\n        event.preventDefault();\n        return handleEnter(event);\n      case 'Backspace':\n        return handleBackspaceEvent(event);\n      case 'Tab':\n        return handleTab(event);\n      case 'Escape':\n        return ReactEditor.blur(editor);\n    }\n\n    handleKeyboardShortcuts(event);\n\n    // Check if a snippet was triggered\n    if (event.key === ' ') {\n      checkSnippet(event);\n    }\n  };\n\n  /**\n   *  scrollSelectionIntoView : Slate's default method to scroll a DOM selection into the view,\n   *  thats shifting layout for us when there is a overflowY:scroll on the viewport.\n   *  We are overriding it to check if the selection is not fully within the visible area of the editor,\n   *  we use scrollBy one line to the bottom\n   */\n  const handleScrollSelectionIntoView = () => {\n    if (!editor.selection) return;\n    const domRange = ReactEditor.toDOMRange(editor, editor.selection);\n    const domRect = domRange.getBoundingClientRect();\n    const blocksInput = blocksRef.current;\n\n    if (!blocksInput) {\n      return;\n    }\n\n    const editorRect = blocksInput.getBoundingClientRect();\n\n    // Check if the selection is not fully within the visible area of the editor\n    if (domRect.top < editorRect.top || domRect.bottom > editorRect.bottom) {\n      // Scroll by one line to the bottom\n      blocksInput.scrollBy({\n        top: 28, // 20px is the line-height + 8px line gap\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  return (\n    <Box\n      ref={blocksRef}\n      grow={1}\n      width=\"100%\"\n      overflow=\"auto\"\n      fontSize={2}\n      background=\"neutral0\"\n      color=\"neutral800\"\n      lineHeight={6}\n      paddingRight={7}\n      paddingTop={6}\n      paddingBottom={3}\n    >\n      <StyledEditable\n        aria-labelledby={ariaLabelId}\n        readOnly={disabled}\n        placeholder={placeholder}\n        isExpandedMode={isExpandedMode}\n        decorate={decorateCode}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={handleKeyDown}\n        scrollSelectionIntoView={handleScrollSelectionIntoView}\n        // As we have our own handler to drag and drop the elements returing true will skip slate's own event handler\n        onDrop={() => {\n          return true;\n        }}\n        onDragStart={() => {\n          return true;\n        }}\n      />\n      {modalElement}\n    </Box>\n  );\n};\n\nexport { BlocksContent, BlocksContentProps };\n","import * as React from 'react';\n\nimport { Box, Flex, FocusTrap, Portal, IconButton, FlexComponent } from '@strapi/design-system';\nimport { Collapse } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { css, styled } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { useBlocksEditorContext } from './BlocksEditor';\n\nconst CollapseIconButton = styled(IconButton)`\n  position: absolute;\n  bottom: 1.2rem;\n  right: 1.2rem;\n`;\n\nconst ExpandWrapper = styled<FlexComponent>(Flex)`\n  // Background with 20% opacity\n  background: ${({ theme }) => `${theme.colors.neutral800}1F`};\n`;\n\ninterface EditorLayoutProps {\n  children: React.ReactNode;\n  error?: string;\n  onCollapse: () => void;\n  disabled: boolean;\n  ariaDescriptionId: string;\n}\n\nconst EditorLayout = ({\n  children,\n  error,\n  disabled,\n  onCollapse,\n  ariaDescriptionId,\n}: EditorLayoutProps) => {\n  const { formatMessage } = useIntl();\n  const { isExpandedMode } = useBlocksEditorContext('editorLayout');\n\n  React.useEffect(() => {\n    if (isExpandedMode) {\n      document.body.classList.add('lock-body-scroll');\n    }\n\n    return () => {\n      document.body.classList.remove('lock-body-scroll');\n    };\n  }, [isExpandedMode]);\n\n  if (isExpandedMode) {\n    return (\n      <Portal role=\"dialog\" aria-modal={false}>\n        <FocusTrap onEscape={onCollapse}>\n          <ExpandWrapper\n            position=\"fixed\"\n            top={0}\n            left={0}\n            right={0}\n            bottom={0}\n            zIndex={4}\n            justifyContent=\"center\"\n            onClick={onCollapse}\n          >\n            <Box<'div'>\n              background=\"neutral0\"\n              hasRadius\n              shadow=\"popupShadow\"\n              overflow=\"hidden\"\n              width=\"90%\"\n              height=\"90%\"\n              onClick={(e) => e.stopPropagation()}\n              aria-describedby={ariaDescriptionId}\n              position=\"relative\"\n            >\n              <Flex height=\"100%\" alignItems=\"flex-start\" direction=\"column\">\n                {children}\n                <CollapseIconButton\n                  label={formatMessage({\n                    id: getTranslation('components.Blocks.collapse'),\n                    defaultMessage: 'Collapse',\n                  })}\n                  onClick={onCollapse}\n                >\n                  <Collapse />\n                </CollapseIconButton>\n              </Flex>\n            </Box>\n          </ExpandWrapper>\n        </FocusTrap>\n      </Portal>\n    );\n  }\n\n  return (\n    <InputWrapper\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      height=\"512px\"\n      $disabled={disabled}\n      $hasError={Boolean(error)}\n      style={{ overflow: 'hidden' }}\n      aria-describedby={ariaDescriptionId}\n      position=\"relative\"\n    >\n      {children}\n    </InputWrapper>\n  );\n};\n\nconst InputWrapper = styled<FlexComponent>(Flex)<{ $disabled?: boolean; $hasError?: boolean }>`\n  border: 1px solid\n    ${({ theme, $hasError }) => ($hasError ? theme.colors.danger600 : theme.colors.neutral200)};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  background: ${({ theme }) => theme.colors.neutral0};\n\n  ${({ theme, $hasError = false }) => css`\n    outline: none;\n    box-shadow: 0;\n    transition-property: border-color, box-shadow, fill;\n    transition-duration: 0.2s;\n\n    &:focus-within {\n      border: 1px solid ${$hasError ? theme.colors.danger600 : theme.colors.primary600};\n      box-shadow: ${$hasError ? theme.colors.danger600 : theme.colors.primary600} 0px 0px 0px 2px;\n    }\n  `}\n\n  ${({ theme, $disabled }) =>\n    $disabled\n      ? css`\n          color: ${theme.colors.neutral600};\n          background: ${theme.colors.neutral150};\n        `\n      : undefined}\n`;\n\nexport { EditorLayout };\n","import * as React from 'react';\n\nimport { Typography, TypographyComponent } from '@strapi/design-system';\nimport { Bold, Italic, Underline, StrikeThrough, Code } from '@strapi/icons';\nimport { type MessageDescriptor } from 'react-intl';\nimport { Editor, Text, Transforms } from 'slate';\nimport { styled, css } from 'styled-components';\n\nconst stylesToInherit = css`\n  font-size: inherit;\n  color: inherit;\n  line-height: inherit;\n`;\n\nconst BoldText = styled<TypographyComponent>(Typography).attrs({ fontWeight: 'bold' })`\n  ${stylesToInherit}\n`;\n\nconst ItalicText = styled<TypographyComponent>(Typography)`\n  font-style: italic;\n  ${stylesToInherit}\n`;\n\nconst UnderlineText = styled<TypographyComponent>(Typography).attrs({\n  textDecoration: 'underline',\n})`\n  ${stylesToInherit}\n`;\n\nconst StrikeThroughText = styled<TypographyComponent>(Typography).attrs({\n  textDecoration: 'line-through',\n})`\n  ${stylesToInherit}\n`;\n\nconst InlineCode = styled.code`\n  background-color: ${({ theme }) => theme.colors.neutral150};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  padding: ${({ theme }) => `0 ${theme.spaces[2]}`};\n  font-family: 'SF Mono', SFMono-Regular, ui-monospace, 'DejaVu Sans Mono', Menlo, Consolas,\n    monospace;\n  color: inherit;\n`;\n\ntype ModifierKey = Exclude<keyof Text, 'type' | 'text'>;\n\ntype ModifiersStore = {\n  [K in ModifierKey]: {\n    icon: React.ComponentType;\n    isValidEventKey: (event: React.KeyboardEvent<HTMLElement>) => boolean;\n    label: MessageDescriptor;\n    checkIsActive: (editor: Editor) => boolean;\n    handleToggle: (editor: Editor) => void;\n    renderLeaf: (children: React.JSX.Element | string) => React.JSX.Element;\n  };\n};\n\n/**\n * The default handler for checking if a modifier is active\n */\nconst baseCheckIsActive = (editor: Editor, name: ModifierKey) => {\n  const marks = Editor.marks(editor);\n  if (!marks) return false;\n\n  return Boolean(marks[name]);\n};\n\n/**\n * The default handler for toggling a modifier\n */\nconst baseHandleToggle = (editor: Editor, name: ModifierKey) => {\n  const marks = Editor.marks(editor);\n\n  // If there is no selection, set selection to the end of line\n  if (!editor.selection) {\n    const endOfEditor = Editor.end(editor, []);\n    Transforms.select(editor, endOfEditor);\n  }\n\n  // Toggle the modifier\n  if (marks?.[name]) {\n    Editor.removeMark(editor, name);\n  } else {\n    Editor.addMark(editor, name, true);\n  }\n};\n\nconst modifiers: ModifiersStore = {\n  bold: {\n    icon: Bold,\n    isValidEventKey: (event) => event.key === 'b',\n    label: { id: 'components.Blocks.modifiers.bold', defaultMessage: 'Bold' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'bold'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'bold'),\n    renderLeaf: (children) => <BoldText>{children}</BoldText>,\n  },\n  italic: {\n    icon: Italic,\n    isValidEventKey: (event) => event.key === 'i',\n    label: { id: 'components.Blocks.modifiers.italic', defaultMessage: 'Italic' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'italic'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'italic'),\n    renderLeaf: (children) => <ItalicText>{children}</ItalicText>,\n  },\n  underline: {\n    icon: Underline,\n    isValidEventKey: (event) => event.key === 'u',\n    label: { id: 'components.Blocks.modifiers.underline', defaultMessage: 'Underline' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'underline'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'underline'),\n    renderLeaf: (children) => <UnderlineText>{children}</UnderlineText>,\n  },\n  strikethrough: {\n    icon: StrikeThrough,\n    isValidEventKey: (event) => event.key === 'S' && event.shiftKey,\n    label: { id: 'components.Blocks.modifiers.strikethrough', defaultMessage: 'Strikethrough' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'strikethrough'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'strikethrough'),\n    renderLeaf: (children) => <StrikeThroughText>{children}</StrikeThroughText>,\n  },\n  code: {\n    icon: Code,\n    isValidEventKey: (event) => event.key === 'e',\n    label: { id: 'components.Blocks.modifiers.code', defaultMessage: 'Inline code' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'code'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'code'),\n    renderLeaf: (children) => <InlineCode>{children}</InlineCode>,\n  },\n};\n\nexport { type ModifiersStore, modifiers };\n","import { type Editor } from 'slate';\n\n/**\n * Images are void elements. They handle the rendering of their children instead of Slate.\n * See the Slate documentation for more information:\n * - https://docs.slatejs.org/api/nodes/element#void-vs-not-void\n * - https://docs.slatejs.org/api/nodes/element#rendering-void-elements\n */\nconst withImages = (editor: Editor) => {\n  const { isVoid } = editor;\n\n  editor.isVoid = (element) => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nexport { withImages };\n","import { type BaseEditor, Path, Transforms, Range, Point, Editor } from 'slate';\n\nimport { insertLink } from '../utils/links';\n\ninterface LinkEditor extends BaseEditor {\n  lastInsertedLinkPath: Path | null;\n  shouldSaveLinkPath: boolean;\n}\n\nconst withLinks = (editor: Editor) => {\n  const { isInline, apply, insertText, insertData } = editor;\n\n  // Links are inline elements, so we need to override the isInline method for slate\n  editor.isInline = (element) => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  // We keep a track of the last inserted link path\n  // So we can show the popover on the link component if that link is the last one inserted\n  editor.lastInsertedLinkPath = null;\n\n  // We intercept the apply method, so everytime we insert a new link, we save its path\n  editor.apply = (operation) => {\n    if (operation.type === 'insert_node') {\n      if (\n        !Editor.isEditor(operation.node) &&\n        operation.node.type === 'link' &&\n        editor.shouldSaveLinkPath\n      ) {\n        editor.lastInsertedLinkPath = operation.path;\n      }\n    } else if (operation.type === 'move_node') {\n      // We need to update the last inserted link path when link is moved\n      // If link is the first word in the paragraph we dont need to update the path\n      if (\n        Path.hasPrevious(operation.path) &&\n        editor.lastInsertedLinkPath &&\n        editor.shouldSaveLinkPath\n      ) {\n        editor.lastInsertedLinkPath = Path.transform(editor.lastInsertedLinkPath, operation);\n      }\n    }\n\n    apply(operation);\n  };\n\n  editor.insertText = (text) => {\n    // When selection is at the end of a link and user types a space, we want to break the link\n    if (editor.selection && Range.isCollapsed(editor.selection) && text === ' ') {\n      const linksInSelection = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !Editor.isEditor(node) && node.type === 'link',\n        })\n      );\n\n      const selectionIsInLink = editor.selection && linksInSelection.length > 0;\n      const selectionIsAtEndOfLink =\n        selectionIsInLink &&\n        Point.equals(editor.selection.anchor, Editor.end(editor, linksInSelection[0][1]));\n\n      if (selectionIsAtEndOfLink) {\n        Transforms.insertNodes(\n          editor,\n          { text: ' ', type: 'text' },\n          { at: Path.next(linksInSelection[0][1]), select: true }\n        );\n\n        return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  // Add data as a clickable link if its a valid URL\n  editor.insertData = (data) => {\n    const pastedText = data.getData('text/plain');\n\n    if (pastedText) {\n      try {\n        // eslint-disable-next-line no-new\n        new URL(pastedText);\n        // Do not show link popup on copy-paste a link, so do not save its path\n        editor.shouldSaveLinkPath = false;\n        insertLink(editor, { url: pastedText });\n        return;\n      } catch (error) {\n        // continue normal data insertion\n      }\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\nexport { withLinks, type LinkEditor };\n","import { type Text, Node, Editor, Element, Transforms } from 'slate';\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * This plugin is used to normalize the Slate document to match the Strapi schema.\n */\nconst withStrapiSchema = (editor: Editor) => {\n  const { normalizeNode } = editor;\n\n  /**\n   * On the strapi schema, we want text nodes to have type: text\n   * By default, Slate add text nodes without type: text\n   * So we add this normalization for the cases when Slate add text nodes automatically\n   */\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    if (!Element.isElement(node) && !isText(node)) {\n      Transforms.setNodes(editor, { type: 'text' }, { at: path });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nexport { withStrapiSchema };\n","import * as React from 'react';\n\nimport { createContext, type FieldValue } from '@strapi/admin/strapi-admin';\nimport { IconButton, Divider, VisuallyHidden } from '@strapi/design-system';\nimport { Expand } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { Editor, type Descendant, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { type RenderElementProps, Slate, withReact, ReactEditor, useSlate } from 'slate-react';\nimport { styled, type CSSProperties } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { codeBlocks } from './Blocks/Code';\nimport { headingBlocks } from './Blocks/Heading';\nimport { imageBlocks } from './Blocks/Image';\nimport { linkBlocks } from './Blocks/Link';\nimport { listBlocks } from './Blocks/List';\nimport { paragraphBlocks } from './Blocks/Paragraph';\nimport { quoteBlocks } from './Blocks/Quote';\nimport { BlocksContent, type BlocksContentProps } from './BlocksContent';\nimport { BlocksToolbar } from './BlocksToolbar';\nimport { EditorLayout } from './EditorLayout';\nimport { type ModifiersStore, modifiers } from './Modifiers';\nimport { withImages } from './plugins/withImages';\nimport { withLinks } from './plugins/withLinks';\nimport { withStrapiSchema } from './plugins/withStrapiSchema';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * BlocksEditorProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseBlock {\n  renderElement: (props: RenderElementProps) => React.JSX.Element;\n  matchNode: (node: Schema.Attribute.BlocksNode) => boolean;\n  handleConvert?: (editor: Editor) => void | (() => React.JSX.Element);\n  handleEnterKey?: (editor: Editor) => void;\n  handleBackspaceKey?: (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => void;\n  handleTab?: (editor: Editor) => void;\n  snippets?: string[];\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n}\n\ninterface NonSelectorBlock extends BaseBlock {\n  isInBlocksSelector: false;\n}\n\ninterface SelectorBlock extends BaseBlock {\n  isInBlocksSelector: true;\n  icon: React.ComponentType;\n  label: MessageDescriptor;\n}\n\ntype NonSelectorBlockKey = 'list-item' | 'link';\n\nconst selectorBlockKeys = [\n  'paragraph',\n  'heading-one',\n  'heading-two',\n  'heading-three',\n  'heading-four',\n  'heading-five',\n  'heading-six',\n  'list-ordered',\n  'list-unordered',\n  'image',\n  'quote',\n  'code',\n] as const;\n\ntype SelectorBlockKey = (typeof selectorBlockKeys)[number];\n\nconst isSelectorBlockKey = (key: unknown): key is SelectorBlockKey => {\n  return typeof key === 'string' && selectorBlockKeys.includes(key as SelectorBlockKey);\n};\n\ntype BlocksStore = {\n  [K in SelectorBlockKey]: SelectorBlock;\n} & {\n  [K in NonSelectorBlockKey]: NonSelectorBlock;\n};\n\ninterface BlocksEditorContextValue {\n  blocks: BlocksStore;\n  modifiers: ModifiersStore;\n  disabled: boolean;\n  name: string;\n  setLiveText: (text: string) => void;\n  isExpandedMode: boolean;\n}\n\nconst [BlocksEditorProvider, usePartialBlocksEditorContext] =\n  createContext<BlocksEditorContextValue>('BlocksEditor');\n\nfunction useBlocksEditorContext(\n  consumerName: string\n): BlocksEditorContextValue & { editor: Editor } {\n  const context = usePartialBlocksEditorContext(consumerName, (state) => state);\n  const editor = useSlate();\n\n  return {\n    ...context,\n    editor,\n  };\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BlocksEditor\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditorDivider = styled(Divider)`\n  background: ${({ theme }) => theme.colors.neutral200};\n`;\n\nconst ExpandIconButton = styled(IconButton)`\n  position: absolute;\n  bottom: 1.2rem;\n  right: 1.2rem;\n  box-shadow: ${({ theme }) => theme.shadows.filterShadow};\n`;\n\n/**\n * Forces an update of the Slate editor when the value prop changes from outside of Slate.\n * The root cause is that Slate is not a controlled component: https://github.com/ianstormtaylor/slate/issues/4612\n * Why not use JSON.stringify(value) as the key?\n * Because it would force a rerender of the entire editor every time the user types a character.\n * Why not use the entity id as the key, since it's unique for each locale?\n * Because it would not solve the problem when using the \"fill in from other locale\" feature\n */\nfunction useResetKey(value?: Schema.Attribute.BlocksValue): {\n  key: number;\n  incrementSlateUpdatesCount: () => void;\n} {\n  // Keep track how many times Slate detected a change from a user interaction in the editor\n  const slateUpdatesCount = React.useRef(0);\n  // Keep track of how many times the value prop was updated, whether from within editor or from outside\n  const valueUpdatesCount = React.useRef(0);\n  // Use a key to force a rerender of the Slate editor when needed\n  const [key, setKey] = React.useState(0);\n\n  React.useEffect(() => {\n    valueUpdatesCount.current += 1;\n\n    // If the 2 refs are not equal, it means the value was updated from outside\n    if (valueUpdatesCount.current !== slateUpdatesCount.current) {\n      // So we change the key to force a rerender of the Slate editor,\n      // which will pick up the new value through its initialValue prop\n      setKey((previousKey) => previousKey + 1);\n\n      // Then bring the 2 refs back in sync\n      slateUpdatesCount.current = valueUpdatesCount.current;\n    }\n  }, [value]);\n\n  return { key, incrementSlateUpdatesCount: () => (slateUpdatesCount.current += 1) };\n}\n\nconst pipe =\n  (...fns: ((baseEditor: Editor) => Editor)[]) =>\n  (value: Editor) =>\n    fns.reduce<Editor>((prev, fn) => fn(prev), value);\n\ninterface BlocksEditorProps\n  extends Pick<FieldValue<Schema.Attribute.BlocksValue>, 'onChange' | 'value' | 'error'>,\n    BlocksContentProps {\n  disabled?: boolean;\n  name: string;\n}\n\nconst BlocksEditor = React.forwardRef<{ focus: () => void }, BlocksEditorProps>(\n  ({ disabled = false, name, onChange, value, error, ...contentProps }, forwardedRef) => {\n    const { formatMessage } = useIntl();\n    const [editor] = React.useState(() =>\n      pipe(withHistory, withImages, withStrapiSchema, withReact, withLinks)(createEditor())\n    );\n    const [liveText, setLiveText] = React.useState('');\n    const ariaDescriptionId = React.useId();\n    const [isExpandedMode, setIsExpandedMode] = React.useState(false);\n\n    const handleToggleExpand = () => {\n      setIsExpandedMode((prev) => !prev);\n    };\n\n    /**\n     * Editable is not able to hold the ref, https://github.com/ianstormtaylor/slate/issues/4082\n     * so with \"useImperativeHandle\" we can use ReactEditor methods to expose to the parent above\n     * also not passing forwarded ref here, gives console warning.\n     */\n    React.useImperativeHandle(\n      forwardedRef,\n      () => ({\n        focus() {\n          ReactEditor.focus(editor);\n        },\n      }),\n      [editor]\n    );\n\n    const { key, incrementSlateUpdatesCount } = useResetKey(value);\n\n    const handleSlateChange = (state: Descendant[]) => {\n      const isAstChange = editor.operations.some((op) => op.type !== 'set_selection');\n\n      if (isAstChange) {\n        incrementSlateUpdatesCount();\n\n        onChange(name, state as Schema.Attribute.BlocksValue);\n      }\n    };\n\n    const blocks: BlocksStore = {\n      ...paragraphBlocks,\n      ...headingBlocks,\n      ...listBlocks,\n      ...linkBlocks,\n      ...imageBlocks,\n      ...quoteBlocks,\n      ...codeBlocks,\n    };\n\n    return (\n      <>\n        <VisuallyHidden id={ariaDescriptionId}>\n          {formatMessage({\n            id: getTranslation('components.Blocks.dnd.instruction'),\n            defaultMessage: `To reorder blocks, press Command or Control along with Shift and the Up or Down arrow keys`,\n          })}\n        </VisuallyHidden>\n        <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n        <Slate\n          editor={editor}\n          initialValue={value || [{ type: 'paragraph', children: [{ type: 'text', text: '' }] }]}\n          onChange={handleSlateChange}\n          key={key}\n        >\n          <BlocksEditorProvider\n            blocks={blocks}\n            modifiers={modifiers}\n            disabled={disabled}\n            name={name}\n            setLiveText={setLiveText}\n            isExpandedMode={isExpandedMode}\n          >\n            <EditorLayout\n              error={error}\n              disabled={disabled}\n              onCollapse={handleToggleExpand}\n              ariaDescriptionId={ariaDescriptionId}\n            >\n              <BlocksToolbar />\n              <EditorDivider width=\"100%\" />\n              <BlocksContent {...contentProps} />\n              {!isExpandedMode && (\n                <ExpandIconButton\n                  label={formatMessage({\n                    id: getTranslation('components.Blocks.expand'),\n                    defaultMessage: 'Expand',\n                  })}\n                  onClick={handleToggleExpand}\n                >\n                  <Expand />\n                </ExpandIconButton>\n              )}\n            </EditorLayout>\n          </BlocksEditorProvider>\n        </Slate>\n      </>\n    );\n  }\n);\n\nexport {\n  type BlocksStore,\n  type SelectorBlockKey,\n  BlocksEditor,\n  BlocksEditorProvider,\n  useBlocksEditorContext,\n  isSelectorBlockKey,\n};\n","import * as React from 'react';\n\nimport { useField, type InputProps } from '@strapi/admin/strapi-admin';\nimport { Field, Flex } from '@strapi/design-system';\n\nimport { BlocksEditor } from './BlocksEditor';\n\nimport type { Schema } from '@strapi/types';\n\ninterface BlocksInputProps extends Omit<InputProps, 'type'> {\n  labelAction?: React.ReactNode;\n  type: Schema.Attribute.Blocks['type'];\n}\n\nconst BlocksInput = React.forwardRef<{ focus: () => void }, BlocksInputProps>(\n  ({ label, name, required = false, hint, labelAction, ...editorProps }, forwardedRef) => {\n    const id = React.useId();\n    const field = useField(name);\n\n    return (\n      <Field.Root id={id} name={name} hint={hint} error={field.error} required={required}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Field.Label action={labelAction}>{label}</Field.Label>\n          <BlocksEditor\n            name={name}\n            error={field.error}\n            ref={forwardedRef}\n            value={field.value}\n            onChange={field.onChange}\n            ariaLabelId={id}\n            {...editorProps}\n          />\n          <Field.Hint />\n          <Field.Error />\n        </Flex>\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedBlocksInput = React.memo(BlocksInput);\n\nexport { MemoizedBlocksInput as BlocksInput };\n","import * as React from 'react';\n\nimport { useField } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\ninterface InitializerProps {\n  disabled?: boolean;\n  name: string;\n  onClick?: React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst Initializer = ({ disabled, name, onClick }: InitializerProps) => {\n  const { formatMessage } = useIntl();\n\n  const field = useField(name);\n\n  return (\n    <>\n      <Box\n        tag=\"button\"\n        background={disabled ? 'neutral150' : 'neutral100'}\n        borderColor={field.error ? 'danger600' : 'neutral200'}\n        hasRadius\n        disabled={disabled}\n        onClick={onClick}\n        paddingTop={9}\n        paddingBottom={9}\n        type=\"button\"\n        style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\n      >\n        <Flex direction=\"column\" gap={2}>\n          <Flex justifyContent=\"center\" color={disabled ? 'neutral500' : 'primary600'}>\n            <PlusCircle width=\"3.2rem\" height=\"3.2rem\" />\n          </Flex>\n          <Flex justifyContent=\"center\">\n            <Typography\n              textColor={disabled ? 'neutral600' : 'primary600'}\n              variant=\"pi\"\n              fontWeight=\"bold\"\n            >\n              {formatMessage({\n                id: getTranslation('components.empty-repeatable'),\n                defaultMessage: 'No entry yet. Click to add one.',\n              })}\n            </Typography>\n          </Flex>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nexport { Initializer };\nexport type { InitializerProps };\n","import { createContext } from '@strapi/admin/strapi-admin';\n\ninterface ComponentContextValue {\n  /**\n   * The id of the component. It will be undefined if the component\n   * has not been created in the database yet. This could be on a new\n   * or existing entry.\n   */\n  id?: number;\n  /**\n   * The level of the component. This is used to determine the nesting\n   * of the component. The default is set to -1 so that the base level is 0\n   * for the top level component, and increases by 1 for each level of nesting.\n   */\n  level: number;\n  /**\n   * The uid of the component. This is used to determine the type of the\n   * component. Within an attribute, it is normally the `component` value.\n   * It will be undefined if the hook is not called within the confines\n   * of a provider.\n   */\n  uid?: string;\n  /**\n   * The type of component parent. It will be undefined if the hook\n   * is not called within the confines of a provider.\n   */\n  type?: 'dynamiczone' | 'repeatable' | 'component';\n}\n\n/**\n * We use this component to wrap any individual component field in the Edit View,\n * this could be a component field in a dynamic zone, a component within a repeatable space,\n * or even nested components.\n *\n * We primarily need this to provide the component id to the components so that they can\n * correctly fetch their relations.\n */\nconst [ComponentProvider, useComponent] = createContext<ComponentContextValue>('ComponentContext', {\n  id: undefined,\n  level: -1,\n  uid: undefined,\n  type: undefined,\n});\n\nexport { ComponentProvider, useComponent };\n","import * as React from 'react';\n\nimport { Button, Flex, Typography, TypographyComponent } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\ninterface AddComponentButtonProps {\n  children: React.ReactNode;\n  hasError?: boolean;\n  isDisabled?: boolean;\n  isOpen?: boolean;\n  onClick: React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst AddComponentButton = ({\n  hasError,\n  isDisabled,\n  isOpen,\n  children,\n  onClick,\n}: AddComponentButtonProps) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      onClick={onClick}\n      disabled={isDisabled}\n      background=\"neutral0\"\n      style={{ cursor: isDisabled ? 'not-allowed' : 'pointer' }}\n      variant=\"tertiary\"\n    >\n      <Flex tag=\"span\" gap={2}>\n        <StyledAddIcon aria-hidden $isOpen={isOpen} $hasError={hasError && !isOpen} />\n        <Typography\n          variant=\"pi\"\n          fontWeight=\"bold\"\n          textColor={hasError && !isOpen ? 'danger600' : 'neutral600'}\n        >\n          {children}\n        </Typography>\n      </Flex>\n    </StyledButton>\n  );\n};\n\nconst StyledAddIcon = styled(PlusCircle)<{ $isOpen?: boolean; $hasError?: boolean }>`\n  height: ${({ theme }) => theme.spaces[6]};\n  width: ${({ theme }) => theme.spaces[6]};\n  transform: ${({ $isOpen }) => ($isOpen ? 'rotate(45deg)' : 'rotate(0deg)')};\n\n  > circle {\n    fill: ${({ theme, $hasError }) =>\n      $hasError ? theme.colors.danger200 : theme.colors.neutral150};\n  }\n  > path {\n    fill: ${({ theme, $hasError }) =>\n      $hasError ? theme.colors.danger600 : theme.colors.neutral500};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  padding-left: ${({ theme }) => theme.spaces[3]};\n  border-radius: 26px;\n  box-shadow: ${({ theme }) => theme.shadows.filterShadow};\n  height: 5rem;\n`;\n\nexport { AddComponentButton };\nexport type { AddComponentButtonProps };\n","import * as React from 'react';\n\nimport { Accordion, Box, Flex, FlexComponent, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ComponentIcon } from '../../../../../components/ComponentIcon';\nimport { RESPONSIVE_CONTAINER_BREAKPOINTS } from '../../FormLayout';\n\ninterface ComponentCategoryProps {\n  category: string;\n  components?: Array<{\n    uid: string;\n    displayName: string;\n    icon?: string;\n  }>;\n  onAddComponent: (\n    componentUid: string\n  ) => React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n  variant?: Accordion.Variant;\n}\n\nconst ComponentCategory = ({\n  category,\n  components = [],\n  variant = 'primary',\n  onAddComponent,\n}: ComponentCategoryProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Accordion.Item value={category}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger>\n          {formatMessage({ id: category, defaultMessage: category })}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <ResponsiveAccordionContent>\n        <Grid paddingTop={4} paddingBottom={4} paddingLeft={3} paddingRight={3}>\n          {components.map(({ uid, displayName, icon }) => (\n            <ComponentBox\n              key={uid}\n              tag=\"button\"\n              type=\"button\"\n              background=\"neutral100\"\n              justifyContent=\"center\"\n              onClick={onAddComponent(uid)}\n              hasRadius\n              height=\"8.4rem\"\n              shrink={0}\n              borderColor=\"neutral200\"\n            >\n              <Flex direction=\"column\" gap={1} alignItems=\"center\" justifyContent=\"center\">\n                <ComponentIcon color=\"currentColor\" background=\"primary200\" icon={icon} />\n\n                <Typography variant=\"pi\" fontWeight=\"bold\">\n                  {displayName}\n                </Typography>\n              </Flex>\n            </ComponentBox>\n          ))}\n        </Grid>\n      </ResponsiveAccordionContent>\n    </Accordion.Item>\n  );\n};\n\nconst ResponsiveAccordionContent = styled(Accordion.Content)`\n  container-type: inline-size;\n`;\n\n/**\n * TODO:\n * JSDOM cannot handle container queries.\n * This is a temporary workaround so that tests do not fail in the CI when jestdom throws an error\n * for failing to parse the stylesheet.\n */\nconst Grid =\n  process.env.NODE_ENV !== 'test'\n    ? styled(Box)`\n        display: grid;\n        grid-template-columns: repeat(auto-fill, 100%);\n        grid-gap: 4px;\n\n        @container (min-width: ${() => RESPONSIVE_CONTAINER_BREAKPOINTS.sm}) {\n          grid-template-columns: repeat(auto-fill, 14rem);\n        }\n      `\n    : styled(Box)`\n        display: grid;\n        grid-template-columns: repeat(auto-fill, 100%);\n        grid-gap: 4px;\n      `;\n\nconst ComponentBox = styled<FlexComponent<'button'>>(Flex)`\n  color: ${({ theme }) => theme.colors.neutral600};\n  cursor: pointer;\n\n  @media (prefers-reduced-motion: no-preference) {\n    transition: color 120ms ${(props) => props.theme.motion.easings.easeOutQuad};\n  }\n\n  &:focus,\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    background: ${({ theme }) => theme.colors.primary100};\n    color: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ComponentCategory };\nexport type { ComponentCategoryProps };\n","import * as React from 'react';\n\nimport { Box, Flex, Accordion, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { ComponentCategory, ComponentCategoryProps } from './ComponentCategory';\n\ninterface ComponentPickerProps {\n  dynamicComponentsByCategory?: Record<string, NonNullable<ComponentCategoryProps['components']>>;\n  isOpen?: boolean;\n  onClickAddComponent: (componentUid: string) => void;\n}\n\nconst ComponentPicker = ({\n  dynamicComponentsByCategory = {},\n  isOpen,\n  onClickAddComponent,\n}: ComponentPickerProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleAddComponentToDz = (componentUid: string) => () => {\n    onClickAddComponent(componentUid);\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <Box\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={5}\n      paddingRight={5}\n      background=\"neutral0\"\n      shadow=\"tableShadow\"\n      borderColor=\"neutral150\"\n      hasRadius\n    >\n      <Flex justifyContent=\"center\">\n        <Typography fontWeight=\"bold\" textColor=\"neutral600\">\n          {formatMessage({\n            id: getTranslation('components.DynamicZone.ComponentPicker-label'),\n            defaultMessage: 'Pick one component',\n          })}\n        </Typography>\n      </Flex>\n      <Box paddingTop={2}>\n        <Accordion.Root defaultValue={Object.keys(dynamicComponentsByCategory)[0]}>\n          {Object.entries(dynamicComponentsByCategory).map(([category, components], index) => (\n            <ComponentCategory\n              key={category}\n              category={category}\n              components={components}\n              onAddComponent={handleAddComponentToDz}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n            />\n          ))}\n        </Accordion.Root>\n      </Box>\n    </Box>\n  );\n};\n\nexport { ComponentPicker };\nexport type { ComponentPickerProps };\n","import * as React from 'react';\n\nimport { useForm, useField } from '@strapi/admin/strapi-admin';\nimport {\n  Accordion,\n  Box,\n  Flex,\n  Grid,\n  IconButton,\n  useComposedRefs,\n  Menu,\n  MenuItem,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Drag, More, Trash } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { COMPONENT_ICONS } from '../../../../../components/ComponentIcon';\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { useDocumentLayout } from '../../../../../hooks/useDocumentLayout';\nimport { type UseDragAndDropOptions, useDragAndDrop } from '../../../../../hooks/useDragAndDrop';\nimport { getIn } from '../../../../../utils/objects';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { InputRenderer, type InputRendererProps } from '../../InputRenderer';\n\nimport type { ComponentPickerProps } from './ComponentPicker';\n\ninterface DynamicComponentProps\n  extends Pick<UseDragAndDropOptions, 'onGrabItem' | 'onDropItem' | 'onCancel'>,\n    Pick<ComponentPickerProps, 'dynamicComponentsByCategory'> {\n  componentUid: string;\n  disabled?: boolean;\n  index: number;\n  name: string;\n  onAddComponent: (componentUid: string, index: number) => void;\n  onRemoveComponentClick: () => void;\n  onMoveComponent: (dragIndex: number, hoverIndex: number) => void;\n  children?: (props: InputRendererProps) => React.ReactNode;\n}\n\nconst DynamicComponent = ({\n  componentUid,\n  disabled,\n  index,\n  name,\n  onRemoveComponentClick,\n  onMoveComponent,\n  onGrabItem,\n  onDropItem,\n  onCancel,\n  dynamicComponentsByCategory = {},\n  onAddComponent,\n  children,\n}: DynamicComponentProps) => {\n  const { formatMessage } = useIntl();\n  const formValues = useForm('DynamicComponent', (state) => state.values);\n  const documentMeta = useDocumentContext('DynamicComponent', (state) => state.meta);\n  const rootDocumentMeta = useDocumentContext(\n    'DynamicComponent',\n    (state) => state.rootDocumentMeta\n  );\n\n  const {\n    edit: { components: rootComponents },\n  } = useDocumentLayout(rootDocumentMeta.model);\n  const {\n    edit: { components: relatedComponents },\n  } = useDocumentLayout(documentMeta.model);\n\n  // Merge the root level components and related components\n  const components = React.useMemo(\n    () => ({ ...rootComponents, ...relatedComponents }),\n    [rootComponents, relatedComponents]\n  );\n\n  const document = useDocumentContext('DynamicComponent', (state) => state.document);\n\n  const title = React.useMemo(() => {\n    const { mainField } = components[componentUid]?.settings ?? { mainField: 'id' };\n\n    const mainFieldValue = getIn(formValues, `${name}.${index}.${mainField}`);\n\n    const displayedValue =\n      mainField === 'id' || !mainFieldValue ? '' : String(mainFieldValue).trim();\n\n    const mainValue = displayedValue.length > 0 ? `- ${displayedValue}` : displayedValue;\n\n    return mainValue;\n  }, [componentUid, components, formValues, name, index]);\n\n  const { icon, displayName } = React.useMemo(() => {\n    const [category] = componentUid.split('.');\n    const { icon, displayName } = (dynamicComponentsByCategory[category] ?? []).find(\n      (component) => component.uid === componentUid\n    ) ?? { icon: null, displayName: null };\n\n    return { icon, displayName };\n  }, [componentUid, dynamicComponentsByCategory]);\n\n  const [{ handlerId, isDragging, handleKeyDown }, boxRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.DYNAMIC_ZONE}_${name}`,\n      index,\n      item: {\n        index,\n        displayedValue: `${displayName} ${title}`,\n        icon,\n      },\n      onMoveItem: onMoveComponent,\n      onDropItem,\n      onGrabItem,\n      onCancel,\n    });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  /**\n   * We don't need the accordion's to communicate with each other,\n   * so a unique value for their state is enough.\n   */\n  const accordionValue = React.useId();\n\n  const { value = [], rawError } = useField(`${name}.${index}`);\n\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string>('');\n\n  React.useEffect(() => {\n    if (rawError && value) {\n      setCollapseToOpen(accordionValue);\n    }\n  }, [rawError, value, accordionValue]);\n\n  const composedBoxRefs = useComposedRefs(boxRef, dropRef);\n\n  const accordionActions = disabled ? null : (\n    <>\n      <IconButton\n        variant=\"ghost\"\n        label={formatMessage(\n          {\n            id: getTranslation('components.DynamicZone.delete-label'),\n            defaultMessage: 'Delete {name}',\n          },\n          { name: title }\n        )}\n        onClick={onRemoveComponentClick}\n      >\n        <Trash />\n      </IconButton>\n      <IconButton\n        variant=\"ghost\"\n        onClick={(e) => e.stopPropagation()}\n        data-handler-id={handlerId}\n        ref={dragRef}\n        label={formatMessage({\n          id: getTranslation('components.DragHandle-label'),\n          defaultMessage: 'Drag',\n        })}\n        onKeyDown={handleKeyDown}\n      >\n        <Drag />\n      </IconButton>\n      <Menu.Root>\n        <Menu.Trigger size=\"S\" endIcon={null} paddingLeft={0} paddingRight={0}>\n          <IconButton\n            variant=\"ghost\"\n            label={formatMessage({\n              id: getTranslation('components.DynamicZone.more-actions'),\n              defaultMessage: 'More actions',\n            })}\n            tag=\"span\"\n          >\n            <More aria-hidden focusable={false} />\n          </IconButton>\n        </Menu.Trigger>\n        <Menu.Content>\n          <Menu.SubRoot>\n            <Menu.SubTrigger>\n              {formatMessage({\n                id: getTranslation('components.DynamicZone.add-item-above'),\n                defaultMessage: 'Add component above',\n              })}\n            </Menu.SubTrigger>\n            <Menu.SubContent>\n              {Object.entries(dynamicComponentsByCategory).map(([category, components]) => (\n                <React.Fragment key={category}>\n                  <Menu.Label>{category}</Menu.Label>\n                  {components.map(({ displayName, uid }) => (\n                    <MenuItem key={componentUid} onSelect={() => onAddComponent(uid, index)}>\n                      {displayName}\n                    </MenuItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </Menu.SubContent>\n          </Menu.SubRoot>\n          <Menu.SubRoot>\n            <Menu.SubTrigger>\n              {formatMessage({\n                id: getTranslation('components.DynamicZone.add-item-below'),\n                defaultMessage: 'Add component below',\n              })}\n            </Menu.SubTrigger>\n            <Menu.SubContent>\n              {Object.entries(dynamicComponentsByCategory).map(([category, components]) => (\n                <React.Fragment key={category}>\n                  <Menu.Label>{category}</Menu.Label>\n                  {components.map(({ displayName, uid }) => (\n                    <MenuItem key={componentUid} onSelect={() => onAddComponent(uid, index + 1)}>\n                      {displayName}\n                    </MenuItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </Menu.SubContent>\n          </Menu.SubRoot>\n        </Menu.Content>\n      </Menu.Root>\n    </>\n  );\n\n  const accordionTitle = title ? `${displayName} ${title}` : displayName;\n\n  return (\n    <ComponentContainer tag=\"li\" width=\"100%\">\n      <Flex justifyContent=\"center\">\n        <Rectangle background=\"neutral200\" />\n      </Flex>\n      <StyledBox ref={composedBoxRefs} hasRadius>\n        {isDragging ? (\n          <Preview />\n        ) : (\n          <Accordion.Root value={collapseToOpen} onValueChange={setCollapseToOpen}>\n            <Accordion.Item value={accordionValue}>\n              <Accordion.Header>\n                <Accordion.Trigger\n                  icon={\n                    icon && COMPONENT_ICONS[icon]\n                      ? COMPONENT_ICONS[icon]\n                      : COMPONENT_ICONS.dashboard\n                  }\n                >\n                  {accordionTitle}\n                </Accordion.Trigger>\n                <Accordion.Actions>{accordionActions}</Accordion.Actions>\n              </Accordion.Header>\n              <Accordion.Content>\n                <AccordionContentRadius background=\"neutral0\">\n                  <Box paddingLeft={6} paddingRight={6} paddingTop={6} paddingBottom={6}>\n                    <Grid.Root gap={4}>\n                      {components[componentUid]?.layout?.map((row, rowInd) => (\n                        <Grid.Item\n                          col={12}\n                          key={rowInd}\n                          s={12}\n                          xs={12}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <ResponsiveGridRoot gap={4}>\n                            {row.map(({ size, ...field }) => {\n                              const fieldName = `${name}.${index}.${field.name}`;\n\n                              const fieldWithTranslatedLabel = {\n                                ...field,\n                                label: formatMessage({\n                                  id: `content-manager.components.${componentUid}.${field.name}`,\n                                  defaultMessage: field.label,\n                                }),\n                              };\n\n                              return (\n                                <ResponsiveGridItem\n                                  col={size}\n                                  key={fieldName}\n                                  s={12}\n                                  xs={12}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  {children ? (\n                                    children({\n                                      ...fieldWithTranslatedLabel,\n                                      document,\n                                      name: fieldName,\n                                    })\n                                  ) : (\n                                    <InputRenderer\n                                      {...fieldWithTranslatedLabel}\n                                      document={document}\n                                      name={fieldName}\n                                    />\n                                  )}\n                                </ResponsiveGridItem>\n                              );\n                            })}\n                          </ResponsiveGridRoot>\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Box>\n                </AccordionContentRadius>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        )}\n      </StyledBox>\n    </ComponentContainer>\n  );\n};\n\n// TODO: Delete once https://github.com/strapi/design-system/pull/858\n// is merged and released.\nconst StyledBox = styled<BoxComponent>(Box)`\n  > div:first-child {\n    box-shadow: ${({ theme }) => theme.shadows.tableShadow};\n  }\n`;\n\nconst AccordionContentRadius = styled<BoxComponent>(Box)`\n  border-radius: 0 0 ${({ theme }) => theme.spaces[1]} ${({ theme }) => theme.spaces[1]};\n`;\n\nconst Rectangle = styled<BoxComponent>(Box)`\n  width: ${({ theme }) => theme.spaces[2]};\n  height: ${({ theme }) => theme.spaces[4]};\n`;\n\nconst Preview = styled.span`\n  display: block;\n  background-color: ${({ theme }) => theme.colors.primary100};\n  outline: 1px dashed ${({ theme }) => theme.colors.primary500};\n  outline-offset: -1px;\n  padding: ${({ theme }) => theme.spaces[6]};\n`;\n\nconst ComponentContainer = styled<BoxComponent<'li'>>(Box)`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport { DynamicComponent };\nexport type { DynamicComponentProps };\n","import * as React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\n\ninterface DynamicZoneLabelProps {\n  label?: React.ReactNode;\n  labelAction?: React.ReactNode;\n  name: string;\n  numberOfComponents?: number;\n  required?: boolean;\n  hint?: React.ReactNode;\n}\n\nconst DynamicZoneLabel = ({\n  hint,\n  label,\n  labelAction,\n  name,\n  numberOfComponents = 0,\n  required,\n}: DynamicZoneLabelProps) => {\n  return (\n    <Flex justifyContent=\"center\">\n      <Box\n        paddingTop={3}\n        paddingBottom={3}\n        paddingRight={4}\n        paddingLeft={4}\n        borderRadius=\"26px\"\n        background=\"neutral0\"\n        shadow=\"filterShadow\"\n        color=\"neutral500\"\n      >\n        <Flex direction=\"column\" justifyContent=\"center\">\n          <Flex maxWidth=\"35.6rem\">\n            <Typography variant=\"pi\" textColor=\"neutral600\" fontWeight=\"bold\" ellipsis>\n              {label || name}&nbsp;\n            </Typography>\n            <Typography variant=\"pi\" textColor=\"neutral600\" fontWeight=\"bold\">\n              ({numberOfComponents})\n            </Typography>\n            {required && <Typography textColor=\"danger600\">*</Typography>}\n            {labelAction && <Box paddingLeft={1}>{labelAction}</Box>}\n          </Flex>\n          {hint && (\n            <Box paddingTop={1} maxWidth=\"35.6rem\">\n              <Typography variant=\"pi\" textColor=\"neutral600\" ellipsis>\n                {hint}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport { DynamicZoneLabel };\nexport type { DynamicZoneLabelProps };\n","import * as React from 'react';\n\nimport {\n  createContext,\n  InputProps,\n  useField,\n  useForm,\n  useNotification,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, VisuallyHidden } from '@strapi/design-system';\nimport pipe from 'lodash/fp/pipe';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { type EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport { AddComponentButton } from './AddComponentButton';\nimport { ComponentPicker } from './ComponentPicker';\nimport { DynamicComponent, DynamicComponentProps } from './DynamicComponent';\nimport { DynamicZoneLabel, DynamicZoneLabelProps } from './DynamicZoneLabel';\n\nimport type { InputRendererProps } from '../../InputRenderer';\nimport type { Schema } from '@strapi/types';\n\ninterface DynamicZoneContextValue {\n  isInDynamicZone: boolean;\n}\n\nconst [DynamicZoneProvider, useDynamicZone] = createContext<DynamicZoneContextValue>(\n  'DynamicZone',\n  {\n    isInDynamicZone: false,\n  }\n);\n\ninterface DynamicZoneProps\n  extends Omit<Extract<EditFieldLayout, { type: 'dynamiczone' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'>,\n    Pick<DynamicZoneLabelProps, 'labelAction'> {\n  children?: (props: InputRendererProps) => React.ReactNode;\n}\n\nconst DynamicZone = ({\n  attribute,\n  disabled: disabledProp,\n  hint,\n  label,\n  labelAction,\n  name,\n  required = false,\n  children,\n}: DynamicZoneProps) => {\n  // We cannot use the default props here\n  const { max = Infinity, min = -Infinity } = attribute ?? {};\n\n  const [addComponentIsOpen, setAddComponentIsOpen] = React.useState(false);\n  const [liveText, setLiveText] = React.useState('');\n\n  const document = useDocumentContext('DynamicZone', (state) => state.document);\n  const { components, isLoading } = document;\n\n  const disabled = disabledProp || isLoading;\n  const { addFieldRow, removeFieldRow, moveFieldRow } = useForm(\n    'DynamicZone',\n    ({ addFieldRow, removeFieldRow, moveFieldRow }) => ({\n      addFieldRow,\n      removeFieldRow,\n      moveFieldRow,\n    })\n  );\n\n  type DzWithTempKey =\n    Schema.Attribute.GetDynamicZoneValue<Schema.Attribute.DynamicZone>[number] & {\n      __temp_key__: number;\n    };\n\n  const { value = [], error } = useField<Array<DzWithTempKey>>(name);\n\n  const dynamicComponentsByCategory = React.useMemo(() => {\n    return attribute.components.reduce<\n      NonNullable<DynamicComponentProps['dynamicComponentsByCategory']>\n    >((acc, componentUid) => {\n      const { category, info } = components[componentUid] ?? { info: {} };\n\n      const component = { uid: componentUid, displayName: info.displayName, icon: info.icon };\n\n      if (!acc[category]) {\n        acc[category] = [];\n      }\n\n      acc[category] = [...acc[category], component];\n\n      return acc;\n    }, {});\n  }, [attribute.components, components]);\n\n  const { formatMessage } = useIntl();\n\n  const { toggleNotification } = useNotification();\n\n  const dynamicDisplayedComponentsLength = value.length;\n\n  const handleAddComponent = (uid: string, position?: number) => {\n    setAddComponentIsOpen(false);\n\n    const schema = components[uid];\n    const form = createDefaultForm(schema, components);\n    const transformations = pipe(transformDocument(schema, components), (data) => ({\n      ...data,\n      __component: uid,\n    }));\n\n    const data = transformations(form);\n\n    addFieldRow(name, data, position);\n  };\n\n  const handleClickOpenPicker = () => {\n    if (dynamicDisplayedComponentsLength < max) {\n      setAddComponentIsOpen((prev) => !prev);\n    } else {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({\n          id: getTranslation('components.notification.info.maximum-requirement'),\n        }),\n      });\n    }\n  };\n\n  const handleMoveComponent = (newIndex: number, currentIndex: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: `${name}.${currentIndex}`,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow(name, currentIndex, newIndex);\n  };\n\n  const getItemPos = (index: number) => `${index + 1} of ${value.length}`;\n\n  const handleCancel = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: `${name}.${index}`,\n        }\n      )\n    );\n  };\n\n  const handleGrabItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleRemoveComponent = (name: string, currentIndex: number) => () => {\n    removeFieldRow(name, currentIndex);\n  };\n\n  const hasError = error !== undefined;\n\n  const renderButtonLabel = () => {\n    if (addComponentIsOpen) {\n      return formatMessage({ id: 'app.utils.close-label', defaultMessage: 'Close' });\n    }\n\n    if (hasError && dynamicDisplayedComponentsLength > max) {\n      return formatMessage(\n        {\n          id: getTranslation(`components.DynamicZone.extra-components`),\n          defaultMessage:\n            'There {number, plural, =0 {are # extra components} one {is # extra component} other {are # extra components}}',\n        },\n        {\n          number: dynamicDisplayedComponentsLength - max,\n        }\n      );\n    }\n\n    if (hasError && dynamicDisplayedComponentsLength < min) {\n      return formatMessage(\n        {\n          id: getTranslation(`components.DynamicZone.missing-components`),\n          defaultMessage:\n            'There {number, plural, =0 {are # missing components} one {is # missing component} other {are # missing components}}',\n        },\n        { number: min - dynamicDisplayedComponentsLength }\n      );\n    }\n\n    return formatMessage(\n      {\n        id: getTranslation('components.DynamicZone.add-component'),\n        defaultMessage: 'Add a component to {componentName}',\n      },\n      { componentName: label || name }\n    );\n  };\n\n  const level = useComponent('DynamicZone', (state) => state.level);\n\n  const ariaDescriptionId = React.useId();\n\n  return (\n    <DynamicZoneProvider isInDynamicZone>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        {dynamicDisplayedComponentsLength > 0 && (\n          <Box>\n            <DynamicZoneLabel\n              hint={hint}\n              label={label}\n              labelAction={labelAction}\n              name={name}\n              numberOfComponents={dynamicDisplayedComponentsLength}\n              required={required}\n            />\n            <VisuallyHidden id={ariaDescriptionId}>\n              {formatMessage({\n                id: getTranslation('dnd.instructions'),\n                defaultMessage: `Press spacebar to grab and re-order`,\n              })}\n            </VisuallyHidden>\n            <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n            <ol aria-describedby={ariaDescriptionId}>\n              {value.map((field, index) => (\n                <ComponentProvider\n                  key={field.__temp_key__}\n                  level={level + 1}\n                  uid={field.__component}\n                  // id is always a number in a dynamic zone.\n                  id={field.id as number}\n                  type=\"dynamiczone\"\n                >\n                  <DynamicComponent\n                    disabled={disabled}\n                    name={name}\n                    index={index}\n                    componentUid={field.__component}\n                    onMoveComponent={handleMoveComponent}\n                    onRemoveComponentClick={handleRemoveComponent(name, index)}\n                    onCancel={handleCancel}\n                    onDropItem={handleDropItem}\n                    onGrabItem={handleGrabItem}\n                    onAddComponent={handleAddComponent}\n                    dynamicComponentsByCategory={dynamicComponentsByCategory}\n                  >\n                    {children}\n                  </DynamicComponent>\n                </ComponentProvider>\n              ))}\n            </ol>\n          </Box>\n        )}\n        <Flex justifyContent=\"center\">\n          <AddComponentButton\n            hasError={hasError}\n            isDisabled={disabled}\n            isOpen={addComponentIsOpen}\n            onClick={handleClickOpenPicker}\n          >\n            {renderButtonLabel()}\n          </AddComponentButton>\n        </Flex>\n        <ComponentPicker\n          dynamicComponentsByCategory={dynamicComponentsByCategory}\n          isOpen={addComponentIsOpen}\n          onClickAddComponent={handleAddComponent}\n        />\n      </Flex>\n    </DynamicZoneProvider>\n  );\n};\n\nexport { DynamicZone, useDynamicZone };\nexport type { DynamicZoneProps };\n","import { Field, TextInput } from '@strapi/design-system';\nimport { EyeStriked } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport type { InputProps } from '@strapi/admin/strapi-admin';\nimport type { Schema } from '@strapi/types';\n\ninterface NotAllowedInputProps extends Omit<InputProps, 'type'> {\n  type: Schema.Attribute.Kind;\n}\n\nconst NotAllowedInput = ({ hint, label, required, name }: NotAllowedInputProps) => {\n  const { formatMessage } = useIntl();\n\n  const placeholder = formatMessage({\n    id: 'components.NotAllowedInput.text',\n    defaultMessage: 'No permissions to see this field',\n  });\n\n  return (\n    <Field.Root id={name} hint={hint} name={name} required={required}>\n      <Field.Label>{label}</Field.Label>\n      <TextInput\n        disabled\n        placeholder={placeholder}\n        startAction={<EyeStriked fill=\"neutral600\" />}\n        type=\"text\"\n        value=\"\"\n      />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nexport { NotAllowedInput };\n","import * as React from 'react';\n\nimport {\n  ConfirmDialog,\n  DescriptionComponentRenderer,\n  Form as FormContext,\n  useRBAC,\n  useStrapiApp,\n  createContext,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Dialog,\n  EmptyStateLayout,\n  Flex,\n  IconButton,\n  Loader,\n  Modal,\n  Typography,\n  Tooltip,\n  TextButton,\n} from '@strapi/design-system';\nimport { ArrowLeft, ArrowsOut, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../../../constants/collections';\nimport { PERMISSIONS } from '../../../../../constants/plugin';\nimport { type DocumentMeta, useDocumentContext } from '../../../../../features/DocumentContext';\nimport { DocumentRBAC } from '../../../../../features/DocumentRBAC';\nimport { useDocumentLayout } from '../../../../../hooks/useDocumentLayout';\nimport { useLazyGetDocumentQuery } from '../../../../../services/documents';\nimport { createYupSchema } from '../../../../../utils/validation';\nimport { DocumentActionButton } from '../../../components/DocumentActions';\nimport { DocumentStatus } from '../../DocumentStatus';\nimport { FormLayout } from '../../FormLayout';\n\nimport type { ContentManagerPlugin, DocumentActionProps } from '../../../../../content-manager';\n\ninterface RelationModalProps {\n  triggerButtonLabel: string;\n  relation: DocumentMeta;\n}\n\nexport function getCollectionType(url: string) {\n  const regex = new RegExp(`(${COLLECTION_TYPES}|${SINGLE_TYPES})`);\n  const match = url.match(regex);\n  return match ? match[1] : undefined;\n}\n\nconst CustomModalContent = styled(Modal.Content)`\n  width: 90%;\n  max-width: 100%;\n  height: 90%;\n  max-height: 100%;\n`;\n\ninterface RelationModalContextValue {\n  parentModified: boolean;\n  depth: number;\n}\n\nconst [RelationModalProvider, useRelationModal] = createContext<RelationModalContextValue>(\n  'RelationModal',\n  {\n    parentModified: false,\n    depth: 0,\n  }\n);\n\nconst RelationModalForm = ({ relation, triggerButtonLabel }: RelationModalProps) => {\n  const navigate = useNavigate();\n  const { pathname, search } = useLocation();\n  const { formatMessage } = useIntl();\n\n  const [triggerRefetchDocument] = useLazyGetDocumentQuery();\n\n  const currentDocument = useDocumentContext('RelationModalForm', (state) => state.document);\n  const rootDocumentMeta = useDocumentContext(\n    'RelationModalForm',\n    (state) => state.rootDocumentMeta\n  );\n  const currentDocumentMeta = useDocumentContext('RelationModalForm', (state) => state.meta);\n  const changeDocument = useDocumentContext('RelationModalForm', (state) => state.changeDocument);\n  const documentHistory = useDocumentContext('RelationModalForm', (state) => state.documentHistory);\n  const setDocumentHistory = useDocumentContext(\n    'RelationModalForm',\n    (state) => state.setDocumentHistory\n  );\n\n  const [isConfirmationOpen, setIsConfirmationOpen] = React.useState(false);\n  const [actionPosition, setActionPosition] = React.useState<'cancel' | 'back' | 'navigate'>(\n    'cancel'\n  );\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  // NOTE: Not sure about this relation modal context, maybe we should move this to DocumentContext?\n  // Get parent modal context if it exists\n  const parentContext = useRelationModal('RelationModalForm', (state) => state);\n  // Get depth of nested modals\n  const depth = parentContext ? parentContext.depth + 1 : 0;\n  // Check if this is a nested modal\n  const isNested = depth > 0;\n\n  const addDocumentToHistory = (document: DocumentMeta) =>\n    setDocumentHistory((prev) => [...prev, document]);\n\n  const getPreviousDocument = () => {\n    if (documentHistory.length === 0) return undefined;\n\n    const lastDocument = documentHistory[documentHistory.length - 1];\n\n    return lastDocument;\n  };\n\n  const removeLastDocumentFromHistory = () => {\n    setDocumentHistory((prev) => [...prev].slice(0, prev.length - 1));\n  };\n\n  const handleToggleModal = () => {\n    if (isModalOpen) {\n      setIsModalOpen(false);\n      const document = {\n        collectionType: rootDocumentMeta.collectionType,\n        model: rootDocumentMeta.model,\n        documentId: rootDocumentMeta.documentId,\n      };\n      // Change back to the root document\n      changeDocument(document);\n      // Reset the document history\n      setDocumentHistory([]);\n      // Reset action position\n      setActionPosition('cancel');\n      // Read from cache or refetch root document\n      triggerRefetchDocument(\n        document,\n        // Favor the cache\n        true\n      );\n    } else {\n      changeDocument(relation);\n      setIsModalOpen(true);\n    }\n  };\n\n  const getFullPageLink = (): string => {\n    const isSingleType = currentDocumentMeta.collectionType === SINGLE_TYPES;\n    const queryParams = currentDocumentMeta.params?.locale\n      ? `?plugins[i18n][locale]=${currentDocumentMeta.params.locale}`\n      : '';\n\n    return `/content-manager/${currentDocumentMeta.collectionType}/${currentDocumentMeta.model}${isSingleType ? '' : '/' + currentDocumentMeta.documentId}${queryParams}`;\n  };\n\n  const handleRedirection = () => {\n    const editViewUrl = `${pathname}${search}`;\n    const isRootDocumentUrl = editViewUrl.includes(getFullPageLink());\n\n    if (isRootDocumentUrl) {\n      handleToggleModal();\n    } else {\n      navigate(getFullPageLink());\n    }\n  };\n\n  const handleConfirm = () => {\n    if (actionPosition === 'navigate') {\n      handleRedirection();\n    } else if (actionPosition === 'back') {\n      const previousRelation = getPreviousDocument();\n      if (previousRelation) {\n        removeLastDocumentFromHistory();\n        changeDocument(previousRelation);\n      }\n    } else {\n      // Add current relation to history before opening a new one in case we are opening a new one\n      if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {\n        addDocumentToHistory(currentDocumentMeta);\n      }\n      handleToggleModal();\n    }\n  };\n\n  return (\n    <FormContext\n      method=\"PUT\"\n      initialValues={currentDocument.getInitialFormValues()}\n      validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n        const yupSchema = createYupSchema(\n          currentDocument.schema?.attributes,\n          currentDocument.components,\n          {\n            status: currentDocument.document?.status,\n            ...options,\n          }\n        );\n\n        return yupSchema.validate(values, { abortEarly: false });\n      }}\n    >\n      {({ modified, isSubmitting, resetForm }) => {\n        // We don't count the root document, so history starts after 1\n        const hasHistory = documentHistory.length > 1;\n\n        return (\n          <RelationModalProvider parentModified={modified} depth={depth}>\n            <Modal.Root\n              open={isModalOpen}\n              onOpenChange={() => {\n                if (isModalOpen) {\n                  if (modified && !isSubmitting) {\n                    setIsConfirmationOpen(true);\n                  } else {\n                    handleToggleModal();\n                  }\n                }\n              }}\n            >\n              <Modal.Trigger>\n                <Tooltip description={triggerButtonLabel}>\n                  <CustomTextButton\n                    onClick={() => {\n                      // Check if parent modal has unsaved changes\n                      if (isNested && parentContext.parentModified) {\n                        setIsConfirmationOpen(true);\n                        // Return early to avoid opening the modal\n                        return;\n                      } else {\n                        if (modified && !isSubmitting) {\n                          setIsConfirmationOpen(true);\n                        } else {\n                          // Add current relation to history before opening a new one\n                          if (currentDocumentMeta && Object.keys(currentDocumentMeta).length > 0) {\n                            addDocumentToHistory(currentDocumentMeta);\n                          }\n                          handleToggleModal();\n                        }\n\n                        if (!isModalOpen) {\n                          setIsModalOpen(true);\n                        }\n                      }\n                    }}\n                    width=\"100%\"\n                  >\n                    {triggerButtonLabel}\n                  </CustomTextButton>\n                </Tooltip>\n              </Modal.Trigger>\n              <CustomModalContent>\n                <Modal.Header gap={2}>\n                  <Flex justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n                    <Flex gap={2}>\n                      <IconButton\n                        withTooltip={false}\n                        label=\"Back\"\n                        variant=\"ghost\"\n                        disabled={!hasHistory}\n                        onClick={() => {\n                          setActionPosition('back');\n                          if (modified && !isSubmitting) {\n                            setIsConfirmationOpen(true);\n                          } else {\n                            const previousRelation = getPreviousDocument();\n                            if (previousRelation) {\n                              removeLastDocumentFromHistory();\n                              changeDocument(previousRelation);\n                            }\n                          }\n                        }}\n                        marginRight={1}\n                      >\n                        <ArrowLeft />\n                      </IconButton>\n                      <Typography tag=\"span\" fontWeight={600}>\n                        {formatMessage({\n                          id: 'content-manager.components.RelationInputModal.modal-title',\n                          defaultMessage: 'Edit a relation',\n                        })}\n                      </Typography>\n                    </Flex>\n                  </Flex>\n                </Modal.Header>\n                <RelationModalBody>\n                  <IconButton\n                    onClick={() => {\n                      setActionPosition('navigate');\n\n                      if (modified && !isSubmitting) {\n                        setIsConfirmationOpen(true);\n                      } else {\n                        navigate(getFullPageLink());\n                      }\n                    }}\n                    variant=\"tertiary\"\n                    label={formatMessage({\n                      id: 'content-manager.components.RelationInputModal.button-fullpage',\n                      defaultMessage: 'Go to entry',\n                    })}\n                  >\n                    <ArrowsOut />\n                  </IconButton>\n                </RelationModalBody>\n                <Modal.Footer>\n                  <Button\n                    onClick={() => {\n                      if (modified && !isSubmitting) {\n                        setIsConfirmationOpen(true);\n                      } else {\n                        handleToggleModal();\n                      }\n                    }}\n                    variant=\"tertiary\"\n                  >\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                </Modal.Footer>\n              </CustomModalContent>\n            </Modal.Root>\n            <Dialog.Root open={isConfirmationOpen} onOpenChange={setIsConfirmationOpen}>\n              <ConfirmDialog\n                onConfirm={() => {\n                  handleConfirm();\n                  setIsConfirmationOpen(false);\n                  resetForm();\n                }}\n                onCancel={() => {\n                  setIsConfirmationOpen(false);\n                }}\n                variant=\"danger\"\n              >\n                {formatMessage({\n                  id: 'content-manager.components.RelationInputModal.confirmation-message',\n                  defaultMessage:\n                    'Some changes were not saved. Are you sure you want to close this relation? All changes that were not saved will be lost.',\n                })}\n              </ConfirmDialog>\n            </Dialog.Root>\n          </RelationModalProvider>\n        );\n      }}\n    </FormContext>\n  );\n};\n\nconst CustomTextButton = styled(TextButton)`\n  & > span {\n    font-size: ${({ theme }) => theme.fontSizes[2]};\n    width: inherit;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n`;\n\ninterface RelationModalBodyProps {\n  /**\n   * Additional modal actions such as \"Open in full page\"\n   */\n  children: React.ReactNode;\n}\n\nconst RelationModalBody = ({ children }: RelationModalBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  const documentMeta = useDocumentContext('RelationModalBody', (state) => state.meta);\n  const documentResponse = useDocumentContext('RelationModalBody', (state) => state.document);\n  const onPreview = useDocumentContext('RelationModalBody', (state) => state.onPreview);\n  const documentLayoutResponse = useDocumentLayout(documentMeta.model);\n  const plugins = useStrapiApp('RelationModalBody', (state) => state.plugins);\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  const {\n    permissions = [],\n    isLoading: isLoadingPermissions,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: documentMeta.model,\n    }))\n  );\n\n  const isLoading =\n    isLoadingPermissions || documentLayoutResponse.isLoading || documentResponse.isLoading;\n  if (isLoading && !documentResponse.document?.documentId) {\n    return (\n      <Loader small>\n        {formatMessage({\n          id: 'content-manager.ListViewTable.relation-loading',\n          defaultMessage: 'Relations are loading',\n        })}\n      </Loader>\n    );\n  }\n\n  if (\n    error ||\n    !documentMeta.model ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return (\n      <Flex alignItems=\"center\" height=\"100%\" justifyContent=\"center\">\n        <EmptyStateLayout\n          icon={<WarningCircle width=\"16rem\" />}\n          content={formatMessage({\n            id: 'anErrorOccurred',\n            defaultMessage: 'Whoops! Something went wrong. Please, try again.',\n          })}\n        />\n      </Flex>\n    );\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n  const hasDraftAndPublished = documentResponse.schema?.options?.draftAndPublish ?? false;\n\n  const props = {\n    activeTab: 'draft',\n    collectionType: documentMeta.collectionType,\n    model: documentMeta.model,\n    documentId: documentMeta.documentId,\n    document: documentResponse.document,\n    meta: documentResponse.meta,\n    onPreview,\n    fromRelationModal: true,\n    fromPreview: onPreview !== undefined,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Modal.Body>\n      <DocumentRBAC permissions={permissions} model={documentMeta.model}>\n        <Flex alignItems=\"flex-start\" direction=\"column\" gap={2}>\n          <Flex width=\"100%\" justifyContent=\"space-between\" gap={2}>\n            <Typography tag=\"h2\" variant=\"alpha\">\n              {documentTitle}\n            </Typography>\n            <Flex gap={2}>\n              {children}\n              <DescriptionComponentRenderer\n                props={props}\n                descriptions={(\n                  plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n                ).getDocumentActions('relation-modal')}\n              >\n                {(actions) => {\n                  const filteredActions = actions.filter((action) => {\n                    return [action.position].flat().includes('relation-modal');\n                  });\n                  const [primaryAction, secondaryAction] = filteredActions;\n\n                  if (!primaryAction && !secondaryAction) return null;\n\n                  // Both actions are available when draft and publish enabled\n                  if (primaryAction && secondaryAction) {\n                    return (\n                      <>\n                        {/* Save */}\n                        <DocumentActionButton\n                          {...secondaryAction}\n                          variant={secondaryAction.variant || 'secondary'}\n                        />\n                        {/* Publish */}\n                        <DocumentActionButton\n                          {...primaryAction}\n                          variant={primaryAction.variant || 'default'}\n                        />\n                      </>\n                    );\n                  }\n\n                  // Otherwise we just have the save action\n                  return (\n                    <DocumentActionButton\n                      {...primaryAction}\n                      variant={primaryAction.variant || 'secondary'}\n                    />\n                  );\n                }}\n              </DescriptionComponentRenderer>\n            </Flex>\n          </Flex>\n          {hasDraftAndPublished ? (\n            <Box>\n              <DocumentStatus status={documentResponse.document?.status} />\n            </Box>\n          ) : null}\n        </Flex>\n\n        <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\" paddingTop={7}>\n          <Box overflow=\"auto\" flex={1}>\n            <FormLayout\n              layout={documentLayoutResponse.edit.layout}\n              document={documentResponse}\n              hasBackground={false}\n            />\n          </Box>\n        </Flex>\n      </DocumentRBAC>\n    </Modal.Body>\n  );\n};\n\nexport { RelationModalForm };\n","import * as React from 'react';\n\nimport {\n  type InputProps,\n  useField,\n  useForm,\n  useNotification,\n  useFocusInputField,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Combobox,\n  ComboboxOption,\n  Flex,\n  IconButton,\n  TextButton,\n  Typography,\n  VisuallyHidden,\n  useComposedRefs,\n  Link,\n  Field,\n  FlexComponent,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Cross, Drag, ArrowClockwise } from '@strapi/icons';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport pipe from 'lodash/fp/pipe';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { styled } from 'styled-components';\n\nimport { RelationDragPreviewProps } from '../../../../../components/DragPreviews/RelationDragPreview';\nimport { COLLECTION_TYPES } from '../../../../../constants/collections';\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { useDebounce } from '../../../../../hooks/useDebounce';\nimport { type EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport {\n  DROP_SENSITIVITY,\n  UseDragAndDropOptions,\n  useDragAndDrop,\n} from '../../../../../hooks/useDragAndDrop';\nimport {\n  useGetRelationsQuery,\n  useLazySearchRelationsQuery,\n  RelationResult,\n} from '../../../../../services/relations';\nimport { buildValidParams } from '../../../../../utils/api';\nimport { getRelationLabel } from '../../../../../utils/relations';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { DocumentStatus } from '../../DocumentStatus';\nimport { useComponent } from '../ComponentContext';\nimport { RelationModalForm, getCollectionType } from '../Relations/RelationModal';\n\nimport type { Schema } from '@strapi/types';\n\n/**\n * Remove a relation, whether it's been already saved or not.\n * It's used both in RelationsList, where the \"remove relation\" button is, and in the input,\n * because we sometimes need to remove a previous relation when selecting a new one.\n */\nfunction useHandleDisconnect(fieldName: string, consumerName: string) {\n  const field = useField(fieldName);\n  const removeFieldRow = useForm(consumerName, (state) => state.removeFieldRow);\n  const addFieldRow = useForm(consumerName, (state) => state.addFieldRow);\n\n  const handleDisconnect: ListItemProps['data']['handleDisconnect'] = (relation) => {\n    if (field.value && field.value.connect) {\n      /**\n       * A relation will exist in the `connect` array _if_ it has\n       * been added without saving. In this case, we just remove it\n       * from the connect array\n       */\n      const indexOfRelationInConnectArray = field.value.connect.findIndex(\n        (rel: NonNullable<RelationsFormValue['connect']>[number]) => rel.id === relation.id\n      );\n\n      if (indexOfRelationInConnectArray >= 0) {\n        removeFieldRow(`${fieldName}.connect`, indexOfRelationInConnectArray);\n        return;\n      }\n    }\n\n    addFieldRow(`${fieldName}.disconnect`, {\n      id: relation.id,\n      apiData: {\n        id: relation.id,\n        documentId: relation.documentId,\n        locale: relation.locale,\n      },\n    });\n  };\n\n  return handleDisconnect;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsField\n * -----------------------------------------------------------------------------------------------*/\n\nconst RELATIONS_TO_DISPLAY = 5;\nconst ONE_WAY_RELATIONS = ['oneWay', 'oneToOne', 'manyToOne', 'oneToManyMorph', 'oneToOneMorph'];\n\ntype RelationPosition =\n  | (Pick<RelationResult, 'status' | 'locale'> & {\n      before: string;\n      end?: never;\n    })\n  | { end: boolean; before?: never; status?: never; locale?: never };\n\ninterface Relation extends Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> {\n  href: string;\n  label: string;\n  position?: RelationPosition;\n  __temp_key__: string;\n  apiData?: {\n    documentId: RelationResult['documentId'];\n    id: RelationResult['id'];\n    locale?: RelationResult['locale'];\n    position: RelationPosition;\n  };\n}\n\ninterface RelationsFieldProps\n  extends Omit<Extract<EditFieldLayout, { type: 'relation' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'> {}\n\nexport interface RelationsFormValue {\n  connect?: Relation[];\n  disconnect?: Pick<Relation, 'id'>[];\n}\n\n/**\n * TODO: we get a rather ugly flash when we remove a single relation from the list leaving\n * no other relations when we press save. The initial relation re-renders, probably because\n * of the lag in the Form cleaning it's \"disconnect\" array, whilst our data has not been invalidated.\n *\n * Could we invalidate relation data on the document actions? Should we?\n */\n\n/**\n * @internal\n * @description The relations field holds a lot of domain logic for handling relations which is rather complicated\n * At present we do not expose this to plugin developers, however, they are able to overwrite it themselves should\n * they wish to do so.\n */\nconst RelationsField = React.forwardRef<HTMLDivElement, RelationsFieldProps>(\n  ({ disabled, label, ...props }, ref) => {\n    const currentDocumentMeta = useDocumentContext('RelationsField', (state) => state.meta);\n    const currentDocument = useDocumentContext('RelationsField', (state) => state.document);\n    const rootDocumentMeta = useDocumentContext(\n      'RelationsField',\n      (state) => state.rootDocumentMeta\n    );\n\n    const [currentPage, setCurrentPage] = React.useState(1);\n    const isRootDocument = rootDocumentMeta.documentId === currentDocumentMeta.documentId;\n    const documentMeta = isRootDocument ? rootDocumentMeta : currentDocumentMeta;\n\n    // Use the documentId from the actual document, not the params (meta)\n    const documentId = currentDocument.document?.documentId;\n\n    const { formatMessage } = useIntl();\n\n    const [{ query }] = useQueryParams();\n    const params = documentMeta.params ?? buildValidParams(query);\n\n    const isMorph = props.attribute.relation.toLowerCase().includes('morph');\n    const isDisabled = isMorph || disabled;\n\n    const { componentId, componentUID } = useComponent('RelationsField', ({ uid, id }) => ({\n      componentId: id,\n      componentUID: uid,\n    }));\n\n    const isSubmitting = useForm('RelationsList', (state) => state.isSubmitting);\n\n    React.useEffect(() => {\n      setCurrentPage(1);\n    }, [isSubmitting]);\n\n    const component = componentUID && currentDocument.components[componentUID];\n    /**\n     * We'll always have a documentId in a created entry, so we look for a componentId first.\n     * Same with `uid` and `documentModel`.\n     */\n    const model = component ? component.uid : documentMeta.model;\n    const id = component && componentId ? componentId.toString() : documentId;\n\n    /**\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\n     * Where the above example would a nested field within two components, however\n     * we only require the field on the component not the complete path since we query\n     * individual components. Therefore we split the string and take the last item.\n     */\n    const [targetField] = props.name.split('.').slice(-1);\n\n    const schemaAttributes = component\n      ? (component.attributes ?? {})\n      : (currentDocument.schema?.attributes ?? {});\n\n    /**\n     * Confirm the target field is related to the current document.\n     * Since relations can exist in a modal on top of the root document,\n     * we need to ensure we are fetching relations for the correct document (root document vs related document),\n     */\n    const isRelatedToCurrentDocument =\n      Object.values(schemaAttributes).filter(\n        (attribute) =>\n          attribute.type === 'relation' &&\n          'target' in attribute &&\n          'target' in props.attribute &&\n          attribute.target === props.attribute.target\n      ).length > 0;\n\n    const { data, isLoading, isFetching } = useGetRelationsQuery(\n      {\n        model,\n        targetField,\n        // below we don't run the query if there is no id.\n        id,\n        params: {\n          ...params,\n          pageSize: RELATIONS_TO_DISPLAY,\n          page: currentPage,\n        },\n      },\n      {\n        refetchOnMountOrArgChange: true,\n        skip: !id || !isRelatedToCurrentDocument,\n        selectFromResult: (result) => {\n          return {\n            ...result,\n            data: {\n              ...result.data,\n              results: result.data?.results ? result.data.results : [],\n            },\n          };\n        },\n      }\n    );\n\n    const handleLoadMore = () => {\n      setCurrentPage((prev) => prev + 1);\n    };\n\n    const field = useField(props.name);\n\n    const isFetchingMoreRelations = isLoading || isFetching;\n\n    const realServerRelationsCount =\n      'pagination' in data && data.pagination ? data.pagination.total : 0;\n\n    /**\n     * Items that are already connected, but reordered would be in\n     * this list, so to get an accurate figure, we remove them.\n     */\n    const relationsConnected =\n      (field.value?.connect ?? []).filter(\n        (rel: Relation) => data.results.findIndex((relation) => relation.id === rel.id) === -1\n      ).length ?? 0;\n    const relationsDisconnected = field.value?.disconnect?.length ?? 0;\n\n    const relationsCount = realServerRelationsCount + relationsConnected - relationsDisconnected;\n\n    /**\n     * This is it, the source of truth for reordering in conjunction with partial loading & updating\n     * of relations. Relations on load are given __temp_key__ when fetched, because we don't want to\n     * create brand new keys everytime the data updates, just keep adding them onto the newly loaded ones.\n     */\n    const relations = React.useMemo(() => {\n      const ctx = {\n        field: field.value,\n        // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}`,\n        mainField: props.mainField,\n      };\n\n      /**\n       * Tidy up our data.\n       */\n      const transformations = pipe(\n        removeConnected(ctx),\n        removeDisconnected(ctx),\n        addLabelAndHref(ctx)\n      );\n\n      const transformedRels = transformations([...data.results]);\n\n      /**\n       * THIS IS CRUCIAL. If you don't sort by the __temp_key__ which comes from fractional indexing\n       * then the list will be in the wrong order.\n       */\n      return [...transformedRels, ...(field.value?.connect ?? [])].sort((a, b) => {\n        if (a.__temp_key__ < b.__temp_key__) return -1;\n        if (a.__temp_key__ > b.__temp_key__) return 1;\n        return 0;\n      });\n    }, [\n      data.results,\n      field.value,\n      // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n      props.attribute.targetModel,\n      props.mainField,\n    ]);\n\n    const handleDisconnect = useHandleDisconnect(props.name, 'RelationsField');\n\n    const handleConnect: RelationsInputProps['onChange'] = (relation) => {\n      const [lastItemInList] = relations.slice(-1);\n\n      const item = {\n        id: relation.id,\n        apiData: {\n          id: relation.id,\n          documentId: relation.documentId,\n          locale: relation.locale,\n        },\n        status: relation.status,\n        /**\n         * If there's a last item, that's the first key we use to generate out next one.\n         */\n        __temp_key__: generateNKeysBetween(lastItemInList?.__temp_key__ ?? null, null, 1)[0],\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `id` property with the exact same data.\n        [props.mainField?.name ?? 'documentId']: relation[props.mainField?.name ?? 'documentId'],\n        label: getRelationLabel(relation, props.mainField),\n        // @ts-expect-error – targetModel does exist on the attribute, but it's not typed.\n        href: `../${COLLECTION_TYPES}/${props.attribute.targetModel}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\n      };\n\n      if (ONE_WAY_RELATIONS.includes(props.attribute.relation)) {\n        // Remove any existing relation so they can be replaced with the new one\n        field.value?.connect?.forEach(handleDisconnect);\n        relations.forEach(handleDisconnect);\n\n        field.onChange(`${props.name}.connect`, [item]);\n      } else {\n        field.onChange(`${props.name}.connect`, [...(field.value?.connect ?? []), item]);\n      }\n    };\n\n    return (\n      <Flex\n        ref={ref}\n        direction=\"column\"\n        gap={3}\n        justifyContent=\"space-between\"\n        alignItems=\"stretch\"\n        wrap=\"wrap\"\n      >\n        <StyledFlex direction=\"column\" alignItems=\"start\" gap={2} width=\"100%\">\n          <RelationsInput\n            disabled={isDisabled}\n            // NOTE: we should not default to using the documentId if the component is being created (componentUID is undefined)\n            id={componentUID && component ? (componentId ? `${componentId}` : '') : documentId}\n            label={`${label} ${relationsCount > 0 ? `(${relationsCount})` : ''}`}\n            model={model}\n            onChange={handleConnect}\n            isRelatedToCurrentDocument={isRelatedToCurrentDocument}\n            {...props}\n          />\n          {'pagination' in data &&\n          data.pagination &&\n          data.pagination.pageCount > data.pagination.page ? (\n            <TextButton\n              disabled={isFetchingMoreRelations}\n              onClick={handleLoadMore}\n              loading={isFetchingMoreRelations}\n              startIcon={<ArrowClockwise />}\n              // prevent the label from line-wrapping\n              shrink={0}\n            >\n              {formatMessage({\n                id: getTranslation('relation.loadMore'),\n                defaultMessage: 'Load More',\n              })}\n            </TextButton>\n          ) : null}\n        </StyledFlex>\n        <RelationsList\n          data={relations}\n          serverData={data.results}\n          disabled={isDisabled}\n          name={props.name}\n          isLoading={isFetchingMoreRelations}\n          relationType={props.attribute.relation}\n          // @ts-expect-error – targetModel does exist on the attribute. But it's not typed.\n          targetModel={props.attribute.targetModel}\n        />\n      </Flex>\n    );\n  }\n);\n\n/**\n * TODO: this can be removed once we stop shipping Inputs with\n * labels wrapped round in DS@2.\n */\nconst StyledFlex = styled<FlexComponent>(Flex)`\n  & > div {\n    width: 100%;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Relation Transformations\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TransformationContext extends Pick<RelationsFieldProps, 'mainField'> {\n  field?: RelationsFormValue;\n  href: string;\n}\n\n/**\n * If it's in the connected array, it can get out of our data array,\n * we'll be putting it back in later and sorting it anyway.\n */\nconst removeConnected =\n  ({ field }: TransformationContext) =>\n  (relations: RelationResult[]) => {\n    return relations.filter((relation) => {\n      const connectedRelations = field?.connect ?? [];\n\n      return connectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\n    });\n  };\n\n/**\n * @description Removes relations that are in the `disconnect` array of the field\n */\nconst removeDisconnected =\n  ({ field }: TransformationContext) =>\n  (relations: RelationResult[]): RelationResult[] =>\n    relations.filter((relation) => {\n      const disconnectedRelations = field?.disconnect ?? [];\n\n      return disconnectedRelations.findIndex((rel) => rel.id === relation.id) === -1;\n    });\n\n/**\n * @description Adds a label and href to the relation object we use this to render\n * a better UI where we can link to the relation and display a human-readable label.\n */\nconst addLabelAndHref =\n  ({ mainField, href }: TransformationContext) =>\n  (relations: RelationResult[]): Relation[] =>\n    relations.map((relation) => {\n      return {\n        ...relation,\n        // Fallback to `id` if there is no `mainField` value, which will overwrite the above `documentId` property with the exact same data.\n        [mainField?.name ?? 'documentId']: relation[mainField?.name ?? 'documentId'],\n        label: getRelationLabel(relation, mainField),\n        href: `${href}/${relation.documentId}?${relation.locale ? `plugins[i18n][locale]=${relation.locale}` : ''}`,\n      };\n    });\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RelationsInputProps extends Omit<RelationsFieldProps, 'type'> {\n  id?: string;\n  model: string;\n  isRelatedToCurrentDocument: boolean;\n  onChange: (\n    relation: Pick<RelationResult, 'documentId' | 'id' | 'locale' | 'status'> & {\n      [key: string]: any;\n    }\n  ) => void;\n}\n\n/**\n * @description Contains all the logic for the combobox that can search\n * for relations and then add them to the field's connect array.\n */\nconst RelationsInput = ({\n  hint,\n  id,\n  model,\n  label,\n  labelAction,\n  name,\n  mainField,\n  placeholder,\n  required,\n  unique: _unique,\n  'aria-label': _ariaLabel,\n  onChange,\n  isRelatedToCurrentDocument,\n  ...props\n}: RelationsInputProps) => {\n  const [textValue, setTextValue] = React.useState<string | undefined>('');\n  const [searchParams, setSearchParams] = React.useState({\n    _q: '',\n    page: 1,\n  });\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams();\n  const currentDocumentMeta = useDocumentContext('RelationsInput', (state) => state.meta);\n  const rootDocumentMeta = useDocumentContext('RelationsInput', (state) => state.rootDocumentMeta);\n  const isRootDocument = rootDocumentMeta.documentId === currentDocumentMeta.documentId;\n  const documentMeta = isRootDocument ? rootDocumentMeta : currentDocumentMeta;\n\n  const { formatMessage } = useIntl();\n  const fieldRef = useFocusInputField<HTMLInputElement>(name);\n  const field = useField<RelationsFormValue>(name);\n\n  const searchParamsDebounced = useDebounce(searchParams, 300);\n  const [searchForTrigger, { data, isLoading }] = useLazySearchRelationsQuery();\n\n  /**\n   * Because we're using a lazy query, we need to trigger the search\n   * when the component mounts and when the search params change.\n   * We also need to trigger the search when the field value changes\n   * so that we can filter out the relations that are already connected.\n   */\n  React.useEffect(() => {\n    /**\n     * The `name` prop is a complete path to the field, e.g. `field1.field2.field3`.\n     * Where the above example would a nested field within two components, however\n     * we only require the field on the component not the complete path since we query\n     * individual components. Therefore we split the string and take the last item.\n     */\n    const [targetField] = name.split('.').slice(-1);\n\n    // Return early if there is no relation to the document\n    if (!isRelatedToCurrentDocument) return;\n\n    const params = documentMeta.params ?? buildValidParams(query);\n\n    searchForTrigger({\n      model,\n      targetField,\n      params: {\n        ...params,\n        id: id ?? '',\n        pageSize: 10,\n        idsToInclude: field.value?.disconnect?.map((rel) => rel.id.toString()) ?? [],\n        idsToOmit: field.value?.connect?.map((rel) => rel.id.toString()) ?? [],\n        ...searchParamsDebounced,\n      },\n    });\n  }, [\n    field.value?.connect,\n    field.value?.disconnect,\n    id,\n    model,\n    name,\n    query,\n    searchForTrigger,\n    searchParamsDebounced,\n    isRelatedToCurrentDocument,\n    documentMeta,\n  ]);\n\n  const handleSearch = async (search: string) => {\n    setSearchParams((s) => ({ ...s, _q: search, page: 1 }));\n  };\n\n  const hasNextPage = data?.pagination ? data.pagination.page < data.pagination.pageCount : false;\n\n  const options = data?.results ?? [];\n\n  const handleChange = (relationId?: string) => {\n    if (!relationId) {\n      return;\n    }\n\n    const relation = options.find((opt) => opt.id.toString() === relationId);\n\n    if (!relation) {\n      // This is very unlikely to happen, but it ensures we don't have any data for.\n      console.error(\n        \"You've tried to add a relation with an id that does not exist in the options you can see, this is likely a bug with Strapi. Please open an issue.\"\n      );\n\n      toggleNotification({\n        message: formatMessage({\n          id: getTranslation('relation.error-adding-relation'),\n          defaultMessage: 'An error occurred while trying to add the relation.',\n        }),\n        type: 'danger',\n      });\n\n      return;\n    }\n\n    /**\n     * You need to give this relation a correct _temp_key_ but\n     * this component doesn't know about those ones, you can't rely\n     * on the connect array because that doesn't hold items that haven't\n     * moved. So use a callback to fill in the gaps when connecting.\n     *\n     */\n    onChange(relation);\n  };\n\n  const handleLoadMore = () => {\n    if (!data || !data.pagination) {\n      return;\n    } else if (data.pagination.page < data.pagination.pageCount) {\n      setSearchParams((s) => ({ ...s, page: s.page + 1 }));\n    }\n  };\n\n  React.useLayoutEffect(() => {\n    setTextValue('');\n  }, [field.value]);\n\n  return (\n    <Field.Root error={field.error} hint={hint} name={name} required={required}>\n      <Field.Label action={labelAction}>{label}</Field.Label>\n      <Combobox\n        ref={fieldRef}\n        name={name}\n        autocomplete=\"list\"\n        placeholder={\n          placeholder ||\n          formatMessage({\n            id: getTranslation('relation.add'),\n            defaultMessage: 'Add relation',\n          })\n        }\n        hasMoreItems={hasNextPage}\n        loading={isLoading}\n        onOpenChange={() => {\n          handleSearch(textValue ?? '');\n        }}\n        noOptionsMessage={() =>\n          formatMessage({\n            id: getTranslation('relation.notAvailable'),\n            defaultMessage: 'No relations available',\n          })\n        }\n        loadingMessage={formatMessage({\n          id: getTranslation('relation.isLoading'),\n          defaultMessage: 'Relations are loading',\n        })}\n        onLoadMore={handleLoadMore}\n        textValue={textValue}\n        onChange={handleChange}\n        onTextValueChange={(text) => {\n          setTextValue(text);\n        }}\n        onInputChange={(event) => {\n          handleSearch(event.currentTarget.value);\n        }}\n        {...props}\n      >\n        {options.map((opt) => {\n          const textValue = getRelationLabel(opt, mainField);\n\n          return (\n            <ComboboxOption key={opt.id} value={opt.id.toString()} textValue={textValue}>\n              <Flex gap={2} justifyContent=\"space-between\">\n                <Typography ellipsis>{textValue}</Typography>\n                {opt.status ? <DocumentStatus status={opt.status} /> : null}\n              </Flex>\n            </ComboboxOption>\n          );\n        })}\n      </Combobox>\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RelationsList\n * -----------------------------------------------------------------------------------------------*/\nconst RELATION_ITEM_HEIGHT = 50;\nconst RELATION_GUTTER = 4;\n\ninterface RelationsListProps extends Pick<RelationsFieldProps, 'disabled' | 'name'> {\n  data: Relation[];\n  isLoading?: boolean;\n  relationType: Schema.Attribute.RelationKind.Any;\n  /**\n   * The existing relations connected on the server. We need these to diff against.\n   */\n  serverData: RelationResult[];\n  targetModel: string;\n}\n\nconst RelationsList = ({\n  data,\n  serverData,\n  disabled,\n  name,\n  isLoading,\n  relationType,\n  targetModel,\n}: RelationsListProps) => {\n  const ariaDescriptionId = React.useId();\n  const { formatMessage } = useIntl();\n  const listRef = React.useRef<FixedSizeList>(null);\n  const outerListRef = React.useRef<HTMLUListElement>(null);\n  const [overflow, setOverflow] = React.useState<'top' | 'bottom' | 'top-bottom'>();\n  const [liveText, setLiveText] = React.useState('');\n  const field = useField(name);\n\n  React.useEffect(() => {\n    if (data.length <= RELATIONS_TO_DISPLAY) {\n      return setOverflow(undefined);\n    }\n\n    const handleNativeScroll = (e: Event) => {\n      const el = e.target as HTMLUListElement;\n      const parentScrollContainerHeight = (el.parentNode as HTMLDivElement).scrollHeight;\n      const maxScrollBottom = el.scrollHeight - el.scrollTop;\n\n      if (el.scrollTop === 0) {\n        return setOverflow('bottom');\n      }\n\n      if (maxScrollBottom === parentScrollContainerHeight) {\n        return setOverflow('top');\n      }\n\n      return setOverflow('top-bottom');\n    };\n\n    const outerListRefCurrent = outerListRef?.current;\n\n    if (!isLoading && data.length > 0 && outerListRefCurrent) {\n      outerListRef.current.addEventListener('scroll', handleNativeScroll);\n    }\n\n    return () => {\n      if (outerListRefCurrent) {\n        outerListRefCurrent.removeEventListener('scroll', handleNativeScroll);\n      }\n    };\n  }, [isLoading, data.length]);\n\n  const getItemPos = (index: number) => `${index + 1} of ${data.length}`;\n\n  const handleMoveItem: UseDragAndDropOptions['onMoveItem'] = (newIndex, oldIndex) => {\n    const item = data[oldIndex];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: item.label ?? item.documentId,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    /**\n     * Splicing mutates the array, so we need to create a new array\n     */\n    const newData = [...data];\n    const currentRow = data[oldIndex];\n\n    const startKey =\n      oldIndex > newIndex ? newData[newIndex - 1]?.__temp_key__ : newData[newIndex]?.__temp_key__;\n    const endKey =\n      oldIndex > newIndex ? newData[newIndex]?.__temp_key__ : newData[newIndex + 1]?.__temp_key__;\n\n    /**\n     * We're moving the relation between two other relations, so\n     * we need to generate a new key that keeps the order\n     */\n    const [newKey] = generateNKeysBetween(startKey, endKey, 1);\n\n    newData.splice(oldIndex, 1);\n    newData.splice(newIndex, 0, { ...currentRow, __temp_key__: newKey });\n\n    /**\n     * Now we diff against the server to understand what's different so we\n     * can keep the connect array nice and tidy. It also needs reversing because\n     * we reverse the relations from the server in the first place.\n     */\n    const connectedRelations = newData\n      .reduce<Relation[]>((acc, relation, currentIndex, array) => {\n        const relationOnServer = serverData.find((oldRelation) => oldRelation.id === relation.id);\n\n        const relationInFront = array[currentIndex + 1];\n\n        if (!relationOnServer || relationOnServer.__temp_key__ !== relation.__temp_key__) {\n          const position = relationInFront\n            ? {\n                before: relationInFront.documentId,\n                locale: relationInFront.locale,\n                status:\n                  'publishedAt' in relationInFront && relationInFront.publishedAt\n                    ? ('published' as Relation['status'])\n                    : ('draft' as Relation['status']),\n              }\n            : { end: true };\n\n          const relationWithPosition: Relation = {\n            ...relation,\n            ...{\n              apiData: {\n                id: relation.id,\n                documentId: relation.documentId ?? relation.apiData?.documentId ?? '',\n                locale: relation.locale || relation.apiData?.locale,\n                position,\n              },\n            },\n          };\n\n          return [...acc, relationWithPosition];\n        }\n\n        return acc;\n      }, [])\n      .toReversed();\n\n    field.onChange(`${name}.connect`, connectedRelations);\n  };\n\n  const handleGrabItem: UseDragAndDropOptions['onGrabItem'] = (index) => {\n    const item = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: item.label ?? item.documentId,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem: UseDragAndDropOptions['onDropItem'] = (index) => {\n    const { href: _href, label, ...item } = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: label ?? item.documentId,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleCancel: UseDragAndDropOptions['onCancel'] = (index) => {\n    const item = data[index];\n\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: item.label ?? item.documentId,\n        }\n      )\n    );\n  };\n\n  const handleDisconnect = useHandleDisconnect(name, 'RelationsList');\n\n  /**\n   * These relation types will only ever have one item\n   * in their list, so you can't reorder a single item!\n   */\n  const canReorder = !ONE_WAY_RELATIONS.includes(relationType);\n\n  const dynamicListHeight =\n    data.length > RELATIONS_TO_DISPLAY\n      ? Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER) +\n        RELATION_ITEM_HEIGHT / 2\n      : Math.min(data.length, RELATIONS_TO_DISPLAY) * (RELATION_ITEM_HEIGHT + RELATION_GUTTER);\n\n  return (\n    <ShadowBox $overflowDirection={overflow}>\n      <VisuallyHidden id={ariaDescriptionId}>\n        {formatMessage({\n          id: getTranslation('dnd.instructions'),\n          defaultMessage: `Press spacebar to grab and re-order`,\n        })}\n      </VisuallyHidden>\n      <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n      {/* @ts-expect-error – width is expected, but we've not needed to pass it before. */}\n      <FixedSizeList\n        height={dynamicListHeight}\n        ref={listRef}\n        outerRef={outerListRef}\n        itemCount={data.length}\n        itemSize={RELATION_ITEM_HEIGHT + RELATION_GUTTER}\n        itemData={{\n          ariaDescribedBy: ariaDescriptionId,\n          canDrag: canReorder,\n          disabled,\n          handleCancel,\n          handleDropItem,\n          handleGrabItem,\n          handleMoveItem,\n          name,\n          handleDisconnect,\n          relations: data,\n          targetModel,\n        }}\n        itemKey={(index) => data[index].id}\n        innerElementType=\"ol\"\n      >\n        {ListItem}\n      </FixedSizeList>\n    </ShadowBox>\n  );\n};\n\nconst ShadowBox = styled<BoxComponent>(Box)<{\n  $overflowDirection?: 'top-bottom' | 'top' | 'bottom';\n}>`\n  position: relative;\n  overflow: hidden;\n  flex: 1;\n\n  &:before,\n  &:after {\n    position: absolute;\n    width: 100%;\n    height: 4px;\n    z-index: 1;\n  }\n\n  &:before {\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\n    content: '';\n    background: linear-gradient(rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\n    top: 0;\n    opacity: ${({ $overflowDirection }) =>\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'top' ? 1 : 0};\n    transition: opacity 0.2s ease-in-out;\n  }\n\n  &:after {\n    /* TODO: as for DS Table component we would need this to be handled by the DS theme */\n    content: '';\n    background: linear-gradient(0deg, rgba(3, 3, 5, 0.2) 0%, rgba(0, 0, 0, 0) 100%);\n    bottom: 0;\n    opacity: ${({ $overflowDirection }) =>\n      $overflowDirection === 'top-bottom' || $overflowDirection === 'bottom' ? 1 : 0};\n    transition: opacity 0.2s ease-in-out;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ListItem\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ListItemProps extends Pick<ListChildComponentProps, 'style' | 'index'> {\n  data: {\n    ariaDescribedBy: string;\n    canDrag?: boolean;\n    disabled?: boolean;\n    handleCancel: UseDragAndDropOptions['onCancel'];\n    handleDropItem: UseDragAndDropOptions['onDropItem'];\n    handleGrabItem: UseDragAndDropOptions['onGrabItem'];\n    handleMoveItem: UseDragAndDropOptions['onMoveItem'];\n    handleDisconnect: (relation: Relation) => void;\n    name: string;\n    relations: Relation[];\n    targetModel: string;\n  };\n}\n\nconst ListItem = ({ data, index, style }: ListItemProps) => {\n  const {\n    ariaDescribedBy,\n    canDrag = false,\n    disabled = false,\n    handleCancel,\n    handleDisconnect,\n    handleDropItem,\n    handleGrabItem,\n    handleMoveItem,\n    name,\n    relations,\n    targetModel,\n  } = data;\n\n  const { formatMessage } = useIntl();\n\n  const { href, id, label, status, documentId, apiData, locale } = relations[index];\n\n  const [{ handlerId, isDragging, handleKeyDown }, relationRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop<number, Omit<RelationDragPreviewProps, 'width'>, HTMLDivElement>(\n      canDrag && !disabled,\n      {\n        type: `${ItemTypes.RELATION}_${name}`,\n        index,\n        item: {\n          displayedValue: label,\n          status,\n          id: id,\n          index,\n        },\n        onMoveItem: handleMoveItem,\n        onDropItem: handleDropItem,\n        onGrabItem: handleGrabItem,\n        onCancel: handleCancel,\n        dropSensitivity: DROP_SENSITIVITY.REGULAR,\n      }\n    );\n\n  const composedRefs = useComposedRefs<HTMLDivElement>(relationRef, dragRef);\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage());\n  }, [dragPreviewRef]);\n\n  return (\n    <Box\n      style={style}\n      tag=\"li\"\n      ref={dropRef}\n      aria-describedby={ariaDescribedBy}\n      cursor={canDrag ? 'all-scroll' : 'default'}\n    >\n      {isDragging ? (\n        <RelationItemPlaceholder />\n      ) : (\n        <Flex\n          paddingTop={2}\n          paddingBottom={2}\n          paddingLeft={canDrag ? 2 : 4}\n          paddingRight={4}\n          hasRadius\n          borderColor=\"neutral200\"\n          background={disabled ? 'neutral150' : 'neutral0'}\n          justifyContent=\"space-between\"\n          ref={composedRefs}\n          data-handler-id={handlerId}\n        >\n          <FlexWrapper gap={1}>\n            {canDrag ? (\n              <IconButton\n                tag=\"div\"\n                role=\"button\"\n                tabIndex={0}\n                withTooltip={false}\n                label={formatMessage({\n                  id: getTranslation('components.RelationInput.icon-button-aria-label'),\n                  defaultMessage: 'Drag',\n                })}\n                variant=\"ghost\"\n                onKeyDown={handleKeyDown}\n                disabled={disabled}\n              >\n                <Drag />\n              </IconButton>\n            ) : null}\n            <Flex width=\"100%\" minWidth={0} justifyContent=\"space-between\">\n              <Box minWidth={0} paddingTop={1} paddingBottom={1} paddingRight={4}>\n                <RelationModalForm\n                  triggerButtonLabel={label}\n                  relation={{\n                    documentId: documentId ?? apiData?.documentId,\n                    model: targetModel,\n                    collectionType: getCollectionType(href)!,\n                    params: {\n                      locale: locale || apiData?.locale || null,\n                    },\n                  }}\n                />\n              </Box>\n              {status ? <DocumentStatus status={status} /> : null}\n            </Flex>\n          </FlexWrapper>\n          <Box paddingLeft={4}>\n            <IconButton\n              onClick={() => handleDisconnect(relations[index])}\n              disabled={disabled}\n              label={formatMessage({\n                id: getTranslation('relation.disconnect'),\n                defaultMessage: 'Remove',\n              })}\n              variant=\"ghost\"\n              size=\"S\"\n            >\n              <Cross />\n            </IconButton>\n          </Box>\n        </Flex>\n      )}\n    </Box>\n  );\n};\n\nconst FlexWrapper = styled<FlexComponent>(Flex)`\n  width: 100%;\n  /* Used to prevent endAction to be pushed out of container */\n  min-width: 0;\n\n  & > div[role='button'] {\n    cursor: all-scroll;\n  }\n`;\n\nconst DisconnectButton = styled.button`\n  svg path {\n    fill: ${({ theme, disabled }) =>\n      disabled ? theme.colors.neutral600 : theme.colors.neutral500};\n  }\n\n  &:hover svg path,\n  &:focus svg path {\n    fill: ${({ theme, disabled }) => !disabled && theme.colors.neutral600};\n  }\n`;\n\nconst LinkEllipsis = styled(Link)`\n  display: block;\n\n  & > span {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n  }\n`;\n\nconst RelationItemPlaceholder = () => (\n  <Box\n    paddingTop={2}\n    paddingBottom={2}\n    paddingLeft={4}\n    paddingRight={4}\n    hasRadius\n    borderStyle=\"dashed\"\n    borderColor=\"primary600\"\n    borderWidth=\"1px\"\n    background=\"primary100\"\n    height={`calc(100% - ${RELATION_GUTTER}px)`}\n  />\n);\n\nconst MemoizedRelationsField = React.memo(RelationsField);\n\nexport { MemoizedRelationsField as RelationsInput, FlexWrapper, DisconnectButton, LinkEllipsis };\nexport type { RelationsFieldProps };\n","/**\n * Related to the InputUID component, not the UIDs of content-types.\n */\n\nimport { GenerateUID, CheckUIDAvailability } from '../../../shared/contracts/uid';\n\nimport { contentManagerApi } from './api';\n\nconst uidApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getDefaultUID: builder.query<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => {\n        return {\n          url: '/content-manager/uid/generate',\n          method: 'POST',\n          data,\n          config: {\n            params,\n          },\n        };\n      },\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    generateUID: builder.mutation<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/generate',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    getAvailability: builder.query<\n      CheckUIDAvailability.Response,\n      CheckUIDAvailability.Request['body'] & {\n        params: CheckUIDAvailability.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/check-availability',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      providesTags: (_res, _error, params) => [\n        { type: 'UidAvailability', id: params.contentTypeUID },\n      ],\n    }),\n  }),\n});\n\nconst { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery } = uidApi;\n\nexport { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery };\n","import * as React from 'react';\n\nimport {\n  type InputProps,\n  useField,\n  useForm,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n  useFocusInputField,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Field,\n  Flex,\n  FlexComponent,\n  TextInput,\n  Typography,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { CheckCircle, WarningCircle, Loader, ArrowClockwise } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\nimport { styled, keyframes } from 'styled-components';\n\nimport { useDebounce } from '../../../../hooks/useDebounce';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../../router';\nimport {\n  useGenerateUIDMutation,\n  useGetAvailabilityQuery,\n  useGetDefaultUIDQuery,\n} from '../../../../services/uid';\nimport { buildValidParams } from '../../../../utils/api';\n\nimport type { CheckUIDAvailability } from '../../../../../../shared/contracts/uid';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * InputUID\n * -----------------------------------------------------------------------------------------------*/\n\nconst UID_REGEX = /^[A-Za-z0-9-_.~]*$/;\n\ninterface UIDInputProps extends Omit<InputProps, 'type'> {\n  type: Schema.Attribute.TypeOf<Schema.Attribute.UID>;\n}\n\nconst UIDInput = React.forwardRef<any, UIDInputProps>(\n  ({ hint, label, labelAction, name, required, ...props }, ref) => {\n    const { model, id } = useDoc();\n    const allFormValues = useForm('InputUID', (form) => form.values);\n    const [availability, setAvailability] = React.useState<CheckUIDAvailability.Response>();\n    const [showRegenerate, setShowRegenerate] = React.useState(false);\n    const isCloning = useMatch(CLONE_PATH) !== null;\n    const field = useField(name);\n    const debouncedValue = useDebounce(field.value, 300);\n    const hasChanged = debouncedValue !== field.initialValue;\n    const { toggleNotification } = useNotification();\n    const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n    const { formatMessage } = useIntl();\n    const [{ query }] = useQueryParams();\n    const params = React.useMemo(() => buildValidParams(query), [query]);\n\n    const {\n      data: defaultGeneratedUID,\n      isLoading: isGeneratingDefaultUID,\n      error: apiError,\n    } = useGetDefaultUIDQuery(\n      {\n        contentTypeUID: model,\n        field: name,\n        data: {\n          id: id ?? '',\n          ...allFormValues,\n        },\n        params,\n      },\n      {\n        skip: field.value || !required,\n      }\n    );\n\n    React.useEffect(() => {\n      if (apiError) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(apiError),\n        });\n      }\n    }, [apiError, formatAPIError, toggleNotification]);\n\n    /**\n     * If the defaultGeneratedUID is available, then we set it as the value,\n     * but we also want to set it as the initialValue too.\n     */\n    React.useEffect(() => {\n      if (defaultGeneratedUID && field.value === undefined) {\n        field.onChange(name, defaultGeneratedUID);\n      }\n    }, [defaultGeneratedUID, field, name]);\n\n    const [generateUID, { isLoading: isGeneratingUID }] = useGenerateUIDMutation();\n\n    const handleRegenerateClick = async () => {\n      try {\n        const res = await generateUID({\n          contentTypeUID: model,\n          field: name,\n          data: { id: id ?? '', ...allFormValues },\n          params,\n        });\n\n        if ('data' in res) {\n          field.onChange(name, res.data);\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'An error occurred.',\n          }),\n        });\n      }\n    };\n\n    const {\n      data: availabilityData,\n      isLoading: isCheckingAvailability,\n      error: availabilityError,\n    } = useGetAvailabilityQuery(\n      {\n        contentTypeUID: model,\n        field: name,\n        value: debouncedValue ? debouncedValue.trim() : '',\n        params,\n      },\n      {\n        // Don't check availability if the value is empty or wasn't changed\n        skip: !Boolean(\n          (hasChanged || isCloning) && debouncedValue && UID_REGEX.test(debouncedValue.trim())\n        ),\n      }\n    );\n\n    React.useEffect(() => {\n      if (availabilityError) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(availabilityError),\n        });\n      }\n    }, [availabilityError, formatAPIError, toggleNotification]);\n\n    React.useEffect(() => {\n      /**\n       * always store the data in state because that way as seen below\n       * we can then remove the data to stop showing the label.\n       */\n      setAvailability(availabilityData);\n\n      let timer: number;\n\n      if (availabilityData?.isAvailable) {\n        timer = window.setTimeout(() => {\n          setAvailability(undefined);\n        }, 4000);\n      }\n\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n        }\n      };\n    }, [availabilityData]);\n\n    const isLoading = isGeneratingDefaultUID || isGeneratingUID || isCheckingAvailability;\n\n    const fieldRef = useFocusInputField(name);\n    const composedRefs = useComposedRefs(ref, fieldRef);\n\n    const shouldShowAvailability =\n      (hasChanged || isCloning) && debouncedValue != null && availability && !showRegenerate;\n\n    return (\n      <Field.Root hint={hint} name={name} error={field.error} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <TextInput\n          ref={composedRefs}\n          disabled={props.disabled}\n          endAction={\n            <Flex position=\"relative\" gap={1}>\n              {shouldShowAvailability && (\n                <TextValidation\n                  alignItems=\"center\"\n                  gap={1}\n                  justifyContent=\"flex-end\"\n                  $available={!!availability?.isAvailable}\n                  data-not-here-outer\n                  position=\"absolute\"\n                  pointerEvents=\"none\"\n                  right={6}\n                  width=\"100px\"\n                >\n                  {availability?.isAvailable ? <CheckCircle /> : <WarningCircle />}\n\n                  <Typography\n                    textColor={availability.isAvailable ? 'success600' : 'danger600'}\n                    variant=\"pi\"\n                  >\n                    {formatMessage(\n                      availability.isAvailable\n                        ? {\n                            id: 'content-manager.components.uid.available',\n                            defaultMessage: 'Available',\n                          }\n                        : {\n                            id: 'content-manager.components.uid.unavailable',\n                            defaultMessage: 'Unavailable',\n                          }\n                    )}\n                  </Typography>\n                </TextValidation>\n              )}\n\n              {!props.disabled && (\n                <>\n                  {showRegenerate && (\n                    <TextValidation alignItems=\"center\" justifyContent=\"flex-end\" gap={1}>\n                      <Typography textColor=\"primary600\" variant=\"pi\">\n                        {formatMessage({\n                          id: 'content-manager.components.uid.regenerate',\n                          defaultMessage: 'Regenerate',\n                        })}\n                      </Typography>\n                    </TextValidation>\n                  )}\n\n                  <FieldActionWrapper\n                    onClick={handleRegenerateClick}\n                    label={formatMessage({\n                      id: 'content-manager.components.uid.regenerate',\n                      defaultMessage: 'Regenerate',\n                    })}\n                    onMouseEnter={() => setShowRegenerate(true)}\n                    onMouseLeave={() => setShowRegenerate(false)}\n                  >\n                    {isLoading ? (\n                      <LoadingWrapper data-testid=\"loading-wrapper\">\n                        <Loader />\n                      </LoadingWrapper>\n                    ) : (\n                      <ArrowClockwise />\n                    )}\n                  </FieldActionWrapper>\n                </>\n              )}\n            </Flex>\n          }\n          onChange={field.onChange}\n          value={field.value ?? ''}\n          {...props}\n        />\n        <Field.Error />\n        <Field.Hint />\n      </Field.Root>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FieldActionWrapper\n * -----------------------------------------------------------------------------------------------*/\n\nconst FieldActionWrapper = styled(Field.Action)`\n  width: 1.6rem;\n\n  svg {\n    height: 1.6rem;\n    width: 1.6rem;\n    path {\n      fill: ${({ theme }) => theme.colors.neutral400};\n    }\n  }\n\n  svg:hover {\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * TextValidation\n * -----------------------------------------------------------------------------------------------*/\n\nconst TextValidation = styled<FlexComponent>(Flex)<{ $available?: boolean }>`\n  svg {\n    height: 1.2rem;\n    width: 1.2rem;\n\n    path {\n      fill: ${({ theme, $available }) =>\n        $available ? theme.colors.success600 : theme.colors.danger600};\n    }\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingWrapper\n * -----------------------------------------------------------------------------------------------*/\n\nconst rotation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n`;\n\nconst LoadingWrapper = styled<FlexComponent>(Flex)`\n  animation: ${rotation} 2s infinite linear;\n`;\n\nconst MemoizedUIDInput = React.memo(UIDInput);\n\nexport { MemoizedUIDInput as UIDInput };\nexport type { UIDInputProps };\n","import { getLanguage, highlight, highlightAuto } from 'highlight.js';\nimport Markdown from 'markdown-it';\n// @ts-expect-error - library does not export types\nimport abbr from 'markdown-it-abbr';\nimport container from 'markdown-it-container';\n// @ts-expect-error - library does not export types\nimport deflist from 'markdown-it-deflist';\nimport emoji from 'markdown-it-emoji';\nimport footnote from 'markdown-it-footnote';\n// @ts-expect-error - library does not export types\nimport ins from 'markdown-it-ins';\n// @ts-expect-error - library does not export types\nimport mark from 'markdown-it-mark';\n// @ts-expect-error - library does not export types\nimport sub from 'markdown-it-sub';\n// @ts-expect-error - library does not export types\nimport sup from 'markdown-it-sup';\n\nimport 'highlight.js/styles/solarized-dark.css';\n\nconst md: Markdown = new Markdown({\n  html: true, // Enable HTML tags in source\n  xhtmlOut: false,\n  breaks: true,\n  langPrefix: 'language-',\n  linkify: true,\n  typographer: true,\n  // Code from: https://github.com/markdown-it/markdown-it/blob/master/support/demo_template/index.js#L83\n  highlight(str, lang) {\n    if (lang && lang !== 'auto' && getLanguage(lang)) {\n      return (\n        '<pre class=\"hljs language-' +\n        md.utils.escapeHtml(lang.toLowerCase()) +\n        '\"><code>' +\n        highlight(lang, str, true).value +\n        '</code></pre>'\n      );\n    }\n\n    if (lang === 'auto') {\n      const result = highlightAuto(str);\n\n      return (\n        '<pre class=\"hljs language-' +\n        md.utils.escapeHtml(result.language!) +\n        '\"><code>' +\n        result.value +\n        '</code></pre>'\n      );\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  },\n})\n  .use(abbr)\n  .use(container, 'warning')\n  .use(container, 'tip')\n  .use(deflist)\n  .use(emoji)\n  .use(footnote)\n  .use(ins)\n  .use(mark)\n  .use(sub)\n  .use(sup);\n\n// Code from: https://github.com/markdown-it/markdown-it-footnote/blob/master/index.js#L29\nmd.renderer.rules.footnote_ref = (tokens, idx, options, env, slf) => {\n  const caption = slf.rules.footnote_caption?.(tokens, idx, options, env, slf);\n\n  return '<sup class=\"footnote-ref\"><span>' + caption + '</span></sup>';\n};\n\nmd.renderer.rules.footnote_anchor = () => {\n  /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n  return ' <span class=\"footnote-backref\">\\u21a9\\uFE0E</span>';\n};\n\nexport { md };\n","import * as React from 'react';\n\nimport sanitizeHtml from 'sanitize-html';\nimport { styled } from 'styled-components';\n\nimport { md } from './utils/mdRenderer';\n\ninterface PreviewWysiwygProps {\n  data?: string;\n}\n\nconst PreviewWysiwyg = ({ data = '' }: PreviewWysiwygProps) => {\n  const html = React.useMemo(\n    () =>\n      sanitizeHtml(md.render(data.replaceAll('\\\\n', '\\n') || ''), {\n        ...sanitizeHtml.defaults,\n        allowedTags: false,\n        allowedAttributes: {\n          '*': ['href', 'align', 'alt', 'center', 'width', 'height', 'type', 'controls', 'target'],\n          img: ['src', 'alt'],\n          source: ['src', 'type'],\n        },\n      }),\n    [data]\n  );\n\n  return (\n    <Wrapper>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n  font-size: 1.4rem;\n  background-color: ${({ theme }) => theme.colors.neutral0};\n  color: ${({ theme }) => theme.colors.neutral800};\n  line-height: ${({ theme }) => theme.lineHeights[6]};\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-block-start: ${({ theme }) => theme.spaces[2]};\n    margin-block-end: ${({ theme }) => theme.spaces[2]};\n  }\n\n  p {\n    margin-bottom: ${({ theme }) => theme.spaces[2]};\n  }\n\n  h1 {\n    font-size: 3.6rem;\n    font-weight: 600;\n  }\n\n  h2 {\n    font-size: 3rem;\n    font-weight: 500;\n  }\n\n  h3 {\n    font-size: 2.4rem;\n    font-weight: 500;\n  }\n\n  h4 {\n    font-size: 2rem;\n    font-weight: 500;\n  }\n\n  strong {\n    font-weight: 800;\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  blockquote {\n    margin-top: ${({ theme }) => theme.spaces[8]};\n    margin-bottom: ${({ theme }) => theme.spaces[7]};\n    font-size: 1.4rem;\n    font-weight: 400;\n    border-left: 4px solid ${({ theme }) => theme.colors.neutral150};\n    font-style: italic;\n    padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[5]};\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  table {\n    thead {\n      background: ${({ theme }) => theme.colors.neutral150};\n\n      th {\n        padding: ${({ theme }) => theme.spaces[4]};\n      }\n    }\n    tr {\n      border: 1px solid ${({ theme }) => theme.colors.neutral200};\n    }\n    th,\n    td {\n      padding: ${({ theme }) => theme.spaces[4]};\n      border: 1px solid ${({ theme }) => theme.colors.neutral200};\n      border-bottom: 0;\n      border-top: 0;\n    }\n  }\n\n  pre,\n  code {\n    font-size: 1.4rem;\n    border-radius: 4px;\n    /* \n      Hard coded since the color is the same between themes,\n      theme.colors.neutral800 changes between themes.\n\n      Matches the color of the JSON Input component.\n    */\n    background-color: #32324d;\n    max-width: 100%;\n    overflow: auto;\n    padding: ${({ theme }) => theme.spaces[2]};\n  }\n\n  /* Inline code */\n  p,\n  pre,\n  td {\n    > code {\n      color: #839496;\n    }\n  }\n\n  ol {\n    list-style-type: decimal;\n    margin-block-start: ${({ theme }) => theme.spaces[4]};\n    margin-block-end: ${({ theme }) => theme.spaces[4]};\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: ${({ theme }) => theme.spaces[4]};\n\n    ol,\n    ul {\n      margin-block-start: 0px;\n      margin-block-end: 0px;\n    }\n  }\n\n  ul {\n    list-style-type: disc;\n    margin-block-start: ${({ theme }) => theme.spaces[4]};\n    margin-block-end: ${({ theme }) => theme.spaces[4]};\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: ${({ theme }) => theme.spaces[4]};\n\n    ul,\n    ol {\n      margin-block-start: 0px;\n      margin-block-end: 0px;\n    }\n  }\n`;\n\nexport { PreviewWysiwyg };\n","import CodeMirror from 'codemirror5';\n\n// Disabling eslint on purpose\n/* eslint-disable */\n\nvar listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n  emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n  unorderedListRE = /[*+-]\\s/;\n\n/*\n  functions coming from CodeMirror addons continuelist.js\n  ===> https://github.com/codemirror/CodeMirror/blob/master/addon/edit/continuelist.js\n\n  we imported it because the way the addon ask to use markdown mode\n  since we have our own markdown preview system we couldn't use it directly\n  only thing we changed is removing the part that enabled addon only with markdown mode\n*/\n\nfunction newlineAndIndentContinueMarkdownList(cm: CodeMirror.Editor) {\n  // @ts-expect-error - cm does not recognize disableInput.\n  if (cm.getOption('disableInput')) return CodeMirror.Pass;\n  var ranges = cm.listSelections(),\n    replacements = [];\n  for (var i = 0; i < ranges.length; i++) {\n    var pos = ranges[i].head;\n\n    var eolState = cm.getStateAfter(pos.line);\n    var inList = eolState.list !== false;\n    var inQuote = eolState.quote !== 0;\n\n    var line = cm.getLine(pos.line),\n      match = listRE.exec(line);\n    var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n    if (!ranges[i].empty() || (!inList && !inQuote) || !match || cursorBeforeBullet) {\n      cm.execCommand('newlineAndIndent');\n      return;\n    }\n    if (emptyListRE.test(line)) {\n      var endOfQuote = inQuote && />\\s*$/.test(line);\n      var endOfList = !/>\\s*$/.test(line);\n      if (endOfQuote || endOfList)\n        cm.replaceRange(\n          '',\n          {\n            line: pos.line,\n            ch: 0,\n          },\n          {\n            line: pos.line,\n            ch: pos.ch + 1,\n          }\n        );\n      replacements[i] = '\\n';\n    } else {\n      var indent = match[1],\n        after = match[5];\n      var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf('>') >= 0);\n      var bullet = numbered ? parseInt(match[3], 10) + 1 + match[4] : match[2].replace('x', ' ');\n      replacements[i] = '\\n' + indent + bullet + after;\n\n      if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n    }\n  }\n\n  cm.replaceSelections(replacements);\n}\n\nfunction incrementRemainingMarkdownListNumbers(cm: CodeMirror.Editor, pos: CodeMirror.Position) {\n  var startLine = pos.line,\n    lookAhead = 0,\n    skipCount = 0;\n  var startItem = listRE.exec(cm.getLine(startLine)),\n    startIndent = startItem![1];\n\n  do {\n    lookAhead += 1;\n    var nextLineNumber = startLine + lookAhead;\n    var nextLine = cm.getLine(nextLineNumber);\n    var nextItem = listRE.exec(nextLine);\n\n    if (nextItem) {\n      var nextIndent = nextItem[1];\n      var newNumber = parseInt(startItem![3], 10) + lookAhead - skipCount;\n      var nextNumber = parseInt(nextItem[3], 10),\n        itemNumber = nextNumber;\n\n      if (startIndent === nextIndent && !isNaN(nextNumber)) {\n        if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n        if (newNumber > nextNumber) itemNumber = newNumber + 1;\n        cm.replaceRange(\n          nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]),\n          {\n            line: nextLineNumber,\n            ch: 0,\n          },\n          {\n            line: nextLineNumber,\n            ch: nextLine.length,\n          }\n        );\n      } else {\n        if (startIndent.length > nextIndent.length) return;\n        // This doesn't run if the next line immediately indents, as it is\n        // not clear of the users intention (new indented item or same level)\n        if (startIndent.length < nextIndent.length && lookAhead === 1) return;\n        skipCount += 1;\n      }\n    }\n  } while (nextItem);\n}\n\nexport { newlineAndIndentContinueMarkdownList };\n","import * as React from 'react';\n\nimport CodeMirror, { EditorFromTextArea } from 'codemirror5';\nimport { styled } from 'styled-components';\n\nimport { PreviewWysiwyg } from './PreviewWysiwyg';\nimport { newlineAndIndentContinueMarkdownList } from './utils/continueList';\n\nimport type { FieldValue, InputProps } from '@strapi/admin/strapi-admin';\n\nimport 'codemirror5/addon/display/placeholder';\n\ninterface EditorApi {\n  focus: () => void;\n  scrollIntoView: (args?: Parameters<HTMLElement['scrollIntoView']>[0]) => void;\n}\n\ninterface EditorProps extends Omit<FieldValue, 'initialValue'>, Omit<InputProps, 'type' | 'label'> {\n  editorRef: React.MutableRefObject<EditorFromTextArea>;\n  isPreviewMode?: boolean;\n  isExpandMode?: boolean;\n  textareaRef: React.RefObject<HTMLTextAreaElement>;\n}\n\nconst Editor = React.forwardRef<EditorApi, EditorProps>(\n  (\n    {\n      disabled,\n      editorRef,\n      error,\n      isPreviewMode,\n      isExpandMode,\n      name,\n      onChange,\n      placeholder,\n      textareaRef,\n      value,\n    },\n    forwardedRef\n  ) => {\n    const onChangeRef = React.useRef(onChange);\n\n    React.useEffect(() => {\n      if (editorRef.current) {\n        // Ensure the editor and its wrapper are cleaned up whenever this view is re-rendered\n        // e.g. in case of re-ordering wysiwyg components in a DynamicZone\n        editorRef.current.toTextArea();\n      }\n      editorRef.current = CodeMirror.fromTextArea(textareaRef.current!, {\n        lineWrapping: true,\n        extraKeys: {\n          Enter: 'newlineAndIndentContinueMarkdownList',\n          Tab: false,\n          'Shift-Tab': false,\n        },\n        readOnly: false,\n        smartIndent: false,\n        placeholder,\n        spellcheck: true,\n        inputStyle: 'contenteditable',\n      });\n\n      // @ts-expect-error – doesn't think command exists?\n      CodeMirror.commands.newlineAndIndentContinueMarkdownList =\n        newlineAndIndentContinueMarkdownList;\n      editorRef.current.on('change', (doc) => {\n        onChangeRef.current(name, doc.getValue());\n      });\n    }, [editorRef, textareaRef, name, placeholder]);\n\n    React.useEffect(() => {\n      if (value && !editorRef.current.hasFocus()) {\n        editorRef.current.setValue(value);\n      }\n    }, [editorRef, value]);\n\n    React.useEffect(() => {\n      if (isPreviewMode || disabled) {\n        editorRef.current.setOption('readOnly', 'nocursor');\n      } else {\n        editorRef.current.setOption('readOnly', false);\n      }\n    }, [disabled, isPreviewMode, editorRef]);\n\n    React.useEffect(() => {\n      if (error) {\n        editorRef.current.setOption('screenReaderLabel', error);\n      } else {\n        // to replace with translation\n        editorRef.current.setOption('screenReaderLabel', 'Editor');\n      }\n    }, [editorRef, error]);\n\n    React.useImperativeHandle(\n      forwardedRef,\n      () => ({\n        focus() {\n          editorRef.current.getInputField().focus();\n        },\n        scrollIntoView(args?: Parameters<HTMLElement['scrollIntoView']>[0]) {\n          editorRef.current.getInputField().scrollIntoView(args);\n        },\n      }),\n      [editorRef]\n    );\n\n    return (\n      <EditorAndPreviewWrapper>\n        <EditorStylesContainer $isExpandMode={isExpandMode} $disabled={disabled || isPreviewMode}>\n          <textarea ref={textareaRef} />\n        </EditorStylesContainer>\n        {isPreviewMode && <PreviewWysiwyg data={value} />}\n      </EditorAndPreviewWrapper>\n    );\n  }\n);\n\nconst EditorAndPreviewWrapper = styled.div`\n  position: relative;\n  height: calc(100% - 48px);\n`;\n\nconst EditorStylesContainer = styled.div<{ $disabled?: boolean; $isExpandMode?: boolean }>`\n  cursor: ${({ $disabled }) => ($disabled ? 'not-allowed !important' : 'auto')};\n  height: 100%;\n  /* BASICS */\n  .CodeMirror-placeholder {\n    color: ${({ theme }) => theme.colors.neutral600} !important;\n  }\n\n  .CodeMirror {\n    /* Set height, width, borders, and global font properties here */\n    font-size: 1.4rem;\n    height: ${({ $isExpandMode }) =>\n      $isExpandMode\n        ? '100%'\n        : '410px'}; //  512px(total height) - 48px (header) - 52px(footer) - 2px border\n    color: ${({ theme }) => theme.colors.neutral800};\n    direction: ltr;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,\n      'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n\n  /* PADDING */\n\n  .CodeMirror-lines {\n    padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n    /* Vertical padding around content */\n  }\n\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    /* The little square between H and V scrollbars */\n    background-color: ${({ theme }) => `${theme.colors.neutral0}`};\n  }\n\n  /* GUTTER */\n\n  .CodeMirror-gutters {\n    border-right: 1px solid #ddd;\n    background-color: #f7f7f7;\n    white-space: nowrap;\n  }\n  .CodeMirror-linenumbers {\n  }\n  .CodeMirror-linenumber {\n    padding: 0 3px 0 5px;\n    min-width: 20px;\n    text-align: right;\n    color: #999;\n    white-space: nowrap;\n  }\n\n  .CodeMirror-guttermarker {\n    color: black;\n  }\n  .CodeMirror-guttermarker-subtle {\n    color: #999;\n  }\n\n  /* CURSOR */\n\n  .CodeMirror-cursor {\n    border-left: 1px solid black;\n    border-right: none;\n    width: 0;\n  }\n  /* Shown when moving in bi-directional text */\n  .CodeMirror div.CodeMirror-secondarycursor {\n    border-left: 1px solid silver;\n  }\n  .cm-fat-cursor .CodeMirror-cursor {\n    width: auto;\n    border: 0 !important;\n    background: #7e7;\n  }\n  .cm-fat-cursor div.CodeMirror-cursors {\n    /* z-index: 1; */\n  }\n\n  .cm-fat-cursor-mark {\n    background-color: rgba(20, 255, 20, 0.5);\n    -webkit-animation: blink 1.06s steps(1) infinite;\n    -moz-animation: blink 1.06s steps(1) infinite;\n    animation: blink 1.06s steps(1) infinite;\n  }\n  .cm-animate-fat-cursor {\n    width: auto;\n    border: 0;\n    -webkit-animation: blink 1.06s steps(1) infinite;\n    -moz-animation: blink 1.06s steps(1) infinite;\n    animation: blink 1.06s steps(1) infinite;\n    background-color: #7e7;\n  }\n\n  /* Can style cursor different in overwrite (non-insert) mode */\n  .CodeMirror-overwrite .CodeMirror-cursor {\n  }\n\n  .cm-tab {\n    display: inline-block;\n    text-decoration: inherit;\n  }\n\n  .CodeMirror-rulers {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -50px;\n    bottom: 0;\n    overflow: hidden;\n  }\n  .CodeMirror-ruler {\n    border-left: 1px solid #ccc;\n    top: 0;\n    bottom: 0;\n    position: absolute;\n  }\n\n  /* DEFAULT THEME */\n\n  .cm-header,\n  .cm-strong {\n    font-weight: bold;\n  }\n  .cm-em {\n    font-style: italic;\n  }\n  .cm-link {\n    text-decoration: underline;\n  }\n  .cm-strikethrough {\n    text-decoration: line-through;\n  }\n\n  .CodeMirror-composing {\n    border-bottom: 2px solid;\n  }\n\n  /* Default styles for common addons */\n\n  div.CodeMirror span.CodeMirror-matchingbracket {\n    color: #0b0;\n  }\n  div.CodeMirror span.CodeMirror-nonmatchingbracket {\n    color: #a22;\n  }\n  .CodeMirror-matchingtag {\n    background: rgba(255, 150, 0, 0.3);\n  }\n  .CodeMirror-activeline-background {\n    background: #e8f2ff;\n  }\n\n  /* STOP */\n\n  /* The rest of this file contains styles related to the mechanics of\n    the editor. You probably shouldn't touch them. */\n\n  .CodeMirror {\n    position: relative;\n    overflow: hidden;\n    background: ${({ theme }) => `${theme.colors.neutral0}`};\n  }\n\n  .CodeMirror-scroll {\n    overflow: scroll !important; /* Things will break if this is overridden */\n    /* 50px is the magic margin used to hide the element's real scrollbars */\n    /* See overflow: hidden in .CodeMirror */\n    margin-bottom: -50px;\n    margin-right: -50px;\n    padding-bottom: 50px;\n    height: 100%;\n    outline: none; /* Prevent dragging from highlighting the element */\n    position: relative;\n  }\n  .CodeMirror-sizer {\n    position: relative;\n    border-right: 50px solid transparent;\n  }\n\n  /* The fake, visible scrollbars. Used to force redraw during scrolling\n    before actual scrolling happens, thus preventing shaking and\n    flickering artifacts. */\n  .CodeMirror-vscrollbar,\n  .CodeMirror-hscrollbar,\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    position: absolute;\n    z-index: 1;\n    display: none;\n    outline: none;\n  }\n\n  .CodeMirror-vscrollbar {\n    right: 0;\n    top: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n  }\n  .CodeMirror-hscrollbar {\n    bottom: 0;\n    left: 0;\n    overflow-y: hidden;\n    overflow-x: scroll;\n  }\n  .CodeMirror-scrollbar-filler {\n    right: 0;\n    bottom: 0;\n  }\n\n  .CodeMirror-lines {\n    cursor: text;\n    min-height: 1px; /* prevents collapsing before first draw */\n  }\n  /* Reset some styles that the rest of the page might have set */\n  .CodeMirror pre.CodeMirror-line,\n  .CodeMirror pre.CodeMirror-line-like {\n    -moz-border-radius: 0;\n    -webkit-border-radius: 0;\n    border-radius: 0;\n    border-width: 0;\n    background: transparent;\n    font-family: inherit;\n    font-size: inherit;\n    margin: 0;\n    white-space: pre;\n    word-wrap: normal;\n    line-height: 1.5;\n    color: inherit;\n    /* z-index: 2; */\n    position: relative;\n    overflow: visible;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-font-variant-ligatures: contextual;\n    font-variant-ligatures: contextual;\n  }\n\n  .CodeMirror pre.CodeMirror-line-like {\n    z-index: 2;\n  }\n\n  .CodeMirror-wrap pre.CodeMirror-line,\n  .CodeMirror-wrap pre.CodeMirror-line-like {\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    word-break: normal;\n  }\n\n  .CodeMirror-linebackground {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 0;\n  }\n\n  .CodeMirror-linewidget {\n    position: relative;\n    /* z-index: 2; */\n    padding: 0.1px; /* Force widget margins to stay inside of the container */\n  }\n\n  .CodeMirror-widget {\n  }\n\n  .CodeMirror-rtl pre {\n    direction: rtl;\n  }\n\n  .CodeMirror-code {\n    outline: none;\n  }\n\n  /* Force content-box sizing for the elements where we expect it */\n  .CodeMirror-scroll,\n  .CodeMirror-sizer,\n  .CodeMirror-gutter,\n  .CodeMirror-gutters,\n  .CodeMirror-linenumber {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n\n  .CodeMirror-measure {\n    position: absolute;\n    width: 100%;\n    height: 0;\n    overflow: hidden;\n    visibility: hidden;\n  }\n\n  .CodeMirror-cursor {\n    position: absolute;\n    pointer-events: none;\n    border-color: ${({ theme }) => `${theme.colors.neutral800}`};\n  }\n  .CodeMirror-measure pre {\n    position: static;\n  }\n\n  div.CodeMirror-cursors {\n    visibility: hidden;\n    position: relative;\n    + div {\n      z-index: 0 !important;\n    }\n  }\n\n  div.CodeMirror-dragcursors {\n    visibility: visible;\n  }\n\n  .CodeMirror-focused div.CodeMirror-cursors {\n    visibility: visible;\n  }\n\n  .CodeMirror-selected {\n    background: ${({ theme }) => theme.colors.neutral200};\n    /* z-index: -10; */\n  }\n  .CodeMirror-crosshair {\n    cursor: crosshair;\n  }\n\n  /* Used to force a border model for a node */\n  .cm-force-border {\n    padding-right: 0.1px;\n  }\n\n  /* See issue #2901 */\n  .cm-tab-wrap-hack:after {\n    content: '';\n  }\n\n  /* Help users use markselection to safely style text background */\n  span.CodeMirror-selectedtext {\n    background: none;\n  }\n\n  span {\n    color: ${({ theme }) => theme.colors.neutral800} !important;\n  }\n`;\n\nexport { Editor };\nexport type { EditorProps, EditorApi };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  FocusTrap,\n  Portal,\n  Typography,\n} from '@strapi/design-system';\nimport { Collapse } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { PreviewWysiwyg } from './PreviewWysiwyg';\n\ninterface EditorLayoutProps {\n  children: React.ReactNode;\n  isExpandMode: boolean;\n  error?: string;\n  previewContent?: string;\n  onCollapse: () => void;\n}\n\nconst EditorLayout = ({\n  children,\n  isExpandMode,\n  error,\n  previewContent = '',\n  onCollapse,\n}: EditorLayoutProps) => {\n  const { formatMessage } = useIntl();\n\n  React.useEffect(() => {\n    if (isExpandMode) {\n      document.body.classList.add('lock-body-scroll');\n    }\n\n    return () => {\n      document.body.classList.remove('lock-body-scroll');\n    };\n  }, [isExpandMode]);\n\n  if (isExpandMode) {\n    return (\n      <Portal role=\"dialog\" aria-modal={false}>\n        <FocusTrap onEscape={onCollapse}>\n          <ExpandWrapper\n            position=\"fixed\"\n            top={0}\n            left={0}\n            right={0}\n            bottom={0}\n            zIndex={4}\n            justifyContent=\"center\"\n            onClick={onCollapse}\n          >\n            <Box<'div'>\n              background=\"neutral0\"\n              hasRadius\n              shadow=\"popupShadow\"\n              overflow=\"hidden\"\n              width=\"90%\"\n              height=\"90%\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <Flex height=\"100%\" alignItems=\"flex-start\">\n                <BoxWithBorder flex=\"1\" height=\"100%\">\n                  {children}\n                </BoxWithBorder>\n                <Flex alignItems=\"start\" direction=\"column\" flex={1} height=\"100%\" width=\"100%\">\n                  <Flex\n                    height=\"4.8rem\"\n                    background=\"neutral100\"\n                    justifyContent=\"flex-end\"\n                    shrink={0}\n                    width=\"100%\"\n                  >\n                    <ExpandButton onClick={onCollapse} variant=\"tertiary\" size=\"M\">\n                      <Typography>\n                        {formatMessage({\n                          id: 'components.Wysiwyg.collapse',\n                          defaultMessage: 'Collapse',\n                        })}\n                      </Typography>\n                      <Collapse />\n                    </ExpandButton>\n                  </Flex>\n\n                  <Box position=\"relative\" height=\"100%\" width=\"100%\">\n                    <PreviewWysiwyg data={previewContent} />\n                  </Box>\n                </Flex>\n              </Flex>\n            </Box>\n          </ExpandWrapper>\n        </FocusTrap>\n      </Portal>\n    );\n  }\n\n  return (\n    <Flex\n      borderColor={error ? 'danger600' : 'neutral200'}\n      borderStyle=\"solid\"\n      borderWidth=\"1px\"\n      hasRadius\n      direction=\"column\"\n      alignItems=\"stretch\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nconst ExpandWrapper = styled<FlexComponent>(Flex)`\n  background: ${({ theme }) =>\n    `${theme.colors.neutral800}${Math.floor(0.2 * 255)\n      .toString(16)\n      .padStart(2, '0')}`};\n`;\n\nconst BoxWithBorder = styled<BoxComponent>(Box)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral200};\n`;\n\nconst ExpandButton = styled(Button)`\n  background-color: transparent;\n  border: none;\n  align-items: center;\n\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    font-weight: ${({ theme }) => theme.fontWeights.regular};\n  }\n\n  svg {\n    margin-left: ${({ theme }) => `${theme.spaces[2]}`};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral700};\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  }\n`;\n\nexport { EditorLayout, ExpandButton };\nexport type { EditorLayoutProps };\n","import { MutableRefObject } from 'react';\n\nimport CodeMirror from 'codemirror5';\n\nexport const replaceText = (markdownName: string, textToChange: string) => {\n  let editedText;\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${textToChange}~~`;\n      break;\n    case 'Bold':\n      editedText = `**${textToChange}**`;\n      break;\n    case 'Italic':\n      editedText = `_${textToChange}_`;\n      break;\n    case 'Underline':\n      editedText = `<u>${textToChange}</u>`;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${textToChange}\\n\\`\\`\\``;\n      break;\n    case 'Link':\n      editedText = `[${textToChange}](link)`;\n      break;\n    case 'Quote':\n      editedText = `>${textToChange}`;\n      break;\n    default:\n      editedText = textToChange;\n  }\n\n  return editedText;\n};\n\nexport const insertText = (markdownName: string) => {\n  let editedText;\n  // object to calculate text that will be selected after insert of markdown\n  const selection = { start: markdownName.length, end: 0 };\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${markdownName}~~`;\n      selection.end = 2;\n      break;\n    case 'Bold':\n      editedText = `**${markdownName}**`;\n      selection.end = 2;\n      break;\n    case 'Italic':\n      editedText = `_${markdownName}_`;\n      selection.end = 1;\n      break;\n    case 'alt':\n      editedText = `[${markdownName}]()`;\n      selection.end = 3;\n      break;\n    case 'Underline':\n      editedText = `<u>${markdownName}</u>`;\n      selection.end = 4;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${markdownName}\\n\\`\\`\\``;\n      selection.end = 3;\n      break;\n    case 'Link':\n      editedText = `[${markdownName}](link)`;\n      selection.end = 7;\n      break;\n    case 'Quote':\n      editedText = `>${markdownName}`;\n      selection.end = 0;\n      break;\n    default:\n      editedText = '';\n  }\n\n  return { editedText, selection };\n};\n\nexport const insertListOrTitle = (markdown: string) => {\n  let textToInsert;\n\n  switch (markdown) {\n    case 'BulletList':\n      textToInsert = '- ';\n      break;\n    case 'NumberList':\n      textToInsert = '1. ';\n      break;\n    case 'h1':\n      textToInsert = '# ';\n      break;\n    case 'h2':\n      textToInsert = '## ';\n      break;\n    case 'h3':\n      textToInsert = '### ';\n      break;\n    case 'h4':\n      textToInsert = '#### ';\n      break;\n    case 'h5':\n      textToInsert = '##### ';\n      break;\n    case 'h6':\n      textToInsert = '###### ';\n      break;\n    default:\n      return '';\n  }\n\n  return textToInsert;\n};\n\n// EDITOR ACTIONS FUNCTIONS\n\nexport const markdownHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  let textToInsert;\n\n  if (textToEdit) {\n    const editedText = replaceText(markdownType, textToEdit);\n    editor.current.replaceSelection(editedText);\n    editor.current.focus();\n  } else {\n    textToInsert = insertText(markdownType);\n    editor.current.replaceSelection(textToInsert.editedText);\n    editor.current.focus();\n    // set selection-focus to text to replace with content\n    const { line, ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n};\n\nexport const listHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  listType: string\n) => {\n  const doc = editor.current.getDoc();\n  const insertion = listType === 'BulletList' ? '- ' : '1. ';\n\n  if (doc.somethingSelected()) {\n    const selections = doc.listSelections();\n    let remove: boolean | null = null;\n\n    editor.current.operation(function () {\n      selections.forEach(function (selection) {\n        const pos = [selection.head.line, selection.anchor.line].sort();\n\n        // Remove if the first text starts with it\n        if (remove == null) {\n          remove = doc.getLine(pos[0]).startsWith(insertion);\n        }\n\n        for (let i = pos[0]; i <= pos[1]; i++) {\n          if (remove) {\n            // Don't remove if we don't start with it\n            if (doc.getLine(i).startsWith(insertion)) {\n              doc.replaceRange('', { line: i, ch: 0 }, { line: i, ch: insertion.length });\n            }\n          } else {\n            const lineInsertion = listType === 'BulletList' ? '- ' : `${i + 1}. `;\n            doc.replaceRange(lineInsertion, { line: i, ch: 0 });\n          }\n        }\n      });\n    });\n  } else {\n    const { line: currentLine } = doc.getCursor();\n    const listToInsert = insertListOrTitle(listType);\n    const lineContent = editor.current.getLine(currentLine);\n\n    const textToInsert = listToInsert + lineContent;\n    editor.current.setSelection(\n      { line: currentLine, ch: 0 },\n      { line: currentLine, ch: lineContent.length }\n    );\n    editor.current.replaceSelection(textToInsert);\n  }\n\n  editor.current.focus();\n};\n\nexport const titleHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  titleType: string\n) => {\n  const { line: currentLine } = editor.current.getCursor();\n  const titleToInsert = insertListOrTitle(titleType);\n  const lineContent = editor.current.getLine(currentLine);\n\n  // replace hashtags followed by a space in case user want to change the type of title\n  const lineWithNoTitle = lineContent.replace(/#{1,6}\\s/g, '').trim();\n\n  const textToInsert = titleToInsert + lineWithNoTitle;\n  editor.current.setSelection(\n    { line: currentLine, ch: 0 },\n    { line: currentLine, ch: lineContent.length }\n  );\n  editor.current.replaceSelection(textToInsert);\n\n  setTimeout(() => {\n    const newLastLineLength = editor.current.getLine(currentLine).length;\n    editor.current.focus();\n    editor.current.setCursor({ line: currentLine, ch: newLastLineLength });\n  }, 0);\n};\n\nexport const insertFile = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  files: any[]\n) => {\n  let { line } = editor.current.getCursor();\n  const { ch } = editor.current.getCursor();\n\n  files.forEach((file, i) => {\n    let contentLength = editor.current.getLine(line).length;\n    editor.current.setCursor({ line, ch: contentLength });\n    // create a new line after first image markdown inserted\n    // or if there is content in current line\n\n    if (i > 0 || (i === 0 && ch !== 0)) {\n      contentLength = editor.current.getLine(line).length;\n      editor.current.setCursor({ line, ch: contentLength });\n      line++;\n      editor.current.replaceSelection('\\n');\n    }\n\n    if (file.mime.includes('image')) {\n      editor.current.replaceSelection(`![${file.alt}](${file.url})`);\n    } else {\n      editor.current.replaceSelection(`[${file.alt}](${file.url})`);\n    }\n  });\n\n  setTimeout(() => editor.current.focus(), 0);\n};\n\n// NEXT FUNCTIONS FOR QUOTE OR CODE MARKDOWN\n\nconst insertWithTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number,\n  textToEdit: string\n) => {\n  const textToInsert = replaceText(markdownType, textToEdit);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // remove word that was selected\n  // set cursor end of line + move to next line\n  // add text to insert\n  editor.current.replaceSelection('');\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert);\n\n  if (markdownType === 'Code') {\n    const { line: newLine } = editor.current.getCursor();\n    editor.current.setCursor({ line: newLine - 1, ch: textToEdit.length });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 4, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n\n  editor.current.focus();\n};\n\nconst insertWithoutTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number\n) => {\n  const textToInsert = insertText(markdownType);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // replace cursor to next line\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert.editedText);\n\n  // set selection on \"Code\" or \"Quote\" word\n\n  if (markdownType === 'Code') {\n    line += 2;\n\n    editor.current.setSelection({ line, ch: 0 }, { line, ch: 4 });\n  } else {\n    line += 1;\n\n    const { ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 2, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.focus();\n};\n\nexport const quoteAndCodeHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  const { line } = editor.current.getCursor();\n  const contentLength = editor.current.getLine(line).length;\n\n  if (textToEdit) {\n    insertWithTextToEdit(editor, markdownType, line, contentLength, textToEdit);\n  } else {\n    insertWithoutTextToEdit(editor, markdownType, line, contentLength);\n  }\n};\n","import { Button, IconButton, IconButtonComponent, IconButtonGroup } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\n// NAV BUTTONS\nexport const MainButtons = styled(IconButtonGroup)`\n  margin-left: ${({ theme }) => theme.spaces[4]};\n`;\n\nexport const MoreButton = styled<IconButtonComponent>(IconButton)`\n  margin: ${({ theme }) => `0 ${theme.spaces[2]}`};\n`;\n\n// NAV\n\nexport const IconButtonGroupMargin = styled(IconButtonGroup)`\n  margin-right: ${({ theme }) => `${theme.spaces[2]}`};\n`;\n\n// FOOTER\nexport const ExpandButton = styled(Button)`\n  background-color: transparent;\n  border: none;\n  align-items: center;\n\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    font-weight: ${({ theme }) => theme.fontWeights.regular};\n  }\n\n  svg {\n    margin-left: ${({ theme }) => `${theme.spaces[2]}`};\n    path {\n      fill: ${({ theme }) => theme.colors.neutral700};\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  }\n`;\n","import { ButtonProps, Box, Flex, Typography } from '@strapi/design-system';\nimport { Expand } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ExpandButton } from './WysiwygStyles';\n\ninterface WysiwygFooterProps {\n  onToggleExpand: ButtonProps['onClick'];\n}\n\nconst WysiwygFooter = ({ onToggleExpand }: WysiwygFooterProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box padding={2} background=\"neutral100\" borderRadius={`0 0 0.4rem 0.4rem`}>\n      <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <ExpandButton id=\"expand\" onClick={onToggleExpand} variant=\"tertiary\" size=\"M\">\n          <Typography textColor=\"neutral800\">\n            {formatMessage({\n              id: 'components.WysiwygBottomControls.fullscreen',\n              defaultMessage: 'Expand',\n            })}\n          </Typography>\n          <Expand />\n        </ExpandButton>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { WysiwygFooter };\nexport type { WysiwygFooterProps };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Flex,\n  IconButton,\n  IconButtonGroup,\n  SingleSelectOption,\n  SingleSelect,\n  Field,\n  Menu,\n} from '@strapi/design-system';\nimport {\n  Bold,\n  BulletList,\n  Code,\n  Italic,\n  Link,\n  NumberList,\n  Image,\n  Quotes,\n  StrikeThrough,\n  Underline,\n  HeadingOne,\n  HeadingTwo,\n  HeadingThree,\n  HeadingFour,\n  HeadingFive,\n  HeadingSix,\n} from '@strapi/icons';\nimport { EditorFromTextArea } from 'codemirror5';\nimport { useIntl } from 'react-intl';\n\nimport { EditorToolbarObserver, type ObservedComponent } from '../../EditorToolbarObserver';\n\nimport { listHandler, markdownHandler, quoteAndCodeHandler, titleHandler } from './utils/utils';\n\ninterface WysiwygNavProps {\n  disabled?: boolean;\n  editorRef: React.MutableRefObject<EditorFromTextArea>;\n  isExpandMode?: boolean;\n  isPreviewMode?: boolean;\n  onToggleMediaLib: () => void;\n  onTogglePreviewMode?: () => void;\n}\n\n/**\n * TODO: refactor this mess.\n */\nconst WysiwygNav = ({\n  disabled,\n  editorRef,\n  isPreviewMode,\n  onToggleMediaLib,\n  onTogglePreviewMode,\n}: WysiwygNavProps) => {\n  const { formatMessage } = useIntl();\n  const isDisabled = disabled || isPreviewMode;\n\n  const handleActionClick = (\n    value: string,\n    currentEditorRef: React.MutableRefObject<EditorFromTextArea>\n  ) => {\n    switch (value) {\n      case 'Link': {\n        markdownHandler(currentEditorRef, value);\n        break;\n      }\n      case 'Code':\n      case 'Quote': {\n        quoteAndCodeHandler(currentEditorRef, value);\n        break;\n      }\n      case 'Bold':\n      case 'Italic':\n      case 'Underline':\n      case 'Strikethrough': {\n        markdownHandler(currentEditorRef, value);\n        break;\n      }\n      case 'BulletList':\n      case 'NumberList': {\n        listHandler(currentEditorRef, value);\n        break;\n      }\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6': {\n        titleHandler(currentEditorRef, value);\n        break;\n      }\n      default: {\n        // Nothing\n      }\n    }\n  };\n\n  const observedComponents: ObservedComponent[] = [\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Bold', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.bold',\n              defaultMessage: 'Bold',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.bold',\n              defaultMessage: 'Bold',\n            })}\n          >\n            <Bold />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Italic', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.italic',\n              defaultMessage: 'Italic',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.italic',\n              defaultMessage: 'Italic',\n            })}\n          >\n            <Italic />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Underline', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.underline',\n              defaultMessage: 'Underline',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.underline',\n              defaultMessage: 'Underline',\n            })}\n          >\n            <Underline />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Strikethrough', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.strikethrough',\n              defaultMessage: 'Strikethrough',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.strikethrough',\n              defaultMessage: 'Strikethrough',\n            })}\n          >\n            <StrikeThrough />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item onSelect={() => handleActionClick('Bold', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Bold aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.bold',\n                defaultMessage: 'Bold',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item onSelect={() => handleActionClick('Italic', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Italic aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.italic',\n                defaultMessage: 'Italic',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('Underline', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Underline aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.underline',\n                defaultMessage: 'Underline',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('Strikethrough', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <StrikeThrough aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.strikethrough',\n                defaultMessage: 'Strikethrough',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-1',\n    },\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('BulletList', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.bulletList',\n              defaultMessage: 'Bulleted list',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.bulletList',\n              defaultMessage: 'Bulleted list',\n            })}\n          >\n            <BulletList />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('NumberList', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.numberList',\n              defaultMessage: 'Numbered list',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.numberList',\n              defaultMessage: 'Numbered list',\n            })}\n          >\n            <NumberList />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item\n            onSelect={() => handleActionClick('BulletList', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <BulletList aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.unorderedList',\n                defaultMessage: 'Bulleted list',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('NumberList', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <NumberList aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.orderedList',\n                defaultMessage: 'Numbered list',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-2',\n    },\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Code', editorRef)}\n            label={formatMessage({\n              id: 'components.Wysiwyg.blocks.code',\n              defaultMessage: 'Code',\n            })}\n            name={formatMessage({\n              id: 'components.Wysiwyg.blocks.code',\n              defaultMessage: 'Code',\n            })}\n          >\n            <Code />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => {\n              onToggleMediaLib();\n            }}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.image',\n              defaultMessage: 'Image',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.image',\n              defaultMessage: 'Image',\n            })}\n          >\n            <Image />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Link', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.popover.link',\n              defaultMessage: 'Link',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.popover.link',\n              defaultMessage: 'Link',\n            })}\n          >\n            <Link />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Quote', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.quote',\n              defaultMessage: 'Quote',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.quote',\n              defaultMessage: 'Quote',\n            })}\n          >\n            <Quotes />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item onSelect={() => handleActionClick('Code', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Code aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Wysiwyg.blocks.code',\n                defaultMessage: 'Code',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            startIcon={<Image />}\n            onSelect={() => {\n              onToggleMediaLib();\n            }}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Image aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.image',\n                defaultMessage: 'Image',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            startIcon={<Link />}\n            onSelect={() => handleActionClick('Link', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Link aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.popover.link',\n                defaultMessage: 'Link',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item onSelect={() => handleActionClick('Quote', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Quotes aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.quote',\n                defaultMessage: 'Quote',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-3',\n    },\n  ];\n\n  return (\n    <Flex\n      padding={2}\n      background=\"neutral100\"\n      justifyContent=\"space-between\"\n      borderRadius=\"0.4rem 0.4rem 0 0\"\n      width=\"100%\"\n      gap={4}\n    >\n      <Field.Root>\n        <SingleSelect\n          disabled={isDisabled}\n          placeholder={formatMessage({\n            id: 'components.Wysiwyg.selectOptions.title',\n            defaultMessage: 'Headings',\n          })}\n          aria-label={formatMessage({\n            id: 'components.Wysiwyg.selectOptions.title',\n            defaultMessage: 'Headings',\n          })}\n          // @ts-expect-error – DS v2 will only allow strings.\n          onChange={(value) => handleActionClick(value, editorRef)}\n          size=\"S\"\n        >\n          <SingleSelectOption value=\"h1\" startIcon={<HeadingOne fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H1',\n              defaultMessage: 'Heading 1',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h2\" startIcon={<HeadingTwo fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H2',\n              defaultMessage: 'Heading 2',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h3\" startIcon={<HeadingThree fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H3',\n              defaultMessage: 'Heading 3',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h4\" startIcon={<HeadingFour fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H4',\n              defaultMessage: 'Heading 4',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h5\" startIcon={<HeadingFive fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H5',\n              defaultMessage: 'Heading 5',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h6\" startIcon={<HeadingSix fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H6',\n              defaultMessage: 'Heading 6',\n            })}\n          </SingleSelectOption>\n        </SingleSelect>\n      </Field.Root>\n      <Flex width=\"100%\" justifyContent=\"space-between\" overflow=\"hidden\">\n        <Flex gap={2} overflow=\"hidden\" width=\"100%\">\n          <EditorToolbarObserver\n            menuTriggerVariant=\"tertiary\"\n            observedComponents={observedComponents}\n          />\n        </Flex>\n\n        {onTogglePreviewMode && (\n          <Button onClick={onTogglePreviewMode} variant=\"tertiary\" minWidth=\"132px\">\n            {isPreviewMode\n              ? formatMessage({\n                  id: 'components.Wysiwyg.ToggleMode.markdown-mode',\n                  defaultMessage: 'Markdown mode',\n                })\n              : formatMessage({\n                  id: 'components.Wysiwyg.ToggleMode.preview-mode',\n                  defaultMessage: 'Preview mode',\n                })}\n          </Button>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { WysiwygNav };\nexport type { WysiwygNavProps };\n","import * as React from 'react';\n\nimport { useField, useStrapiApp, type InputProps } from '@strapi/admin/strapi-admin';\nimport { Field, Flex } from '@strapi/design-system';\nimport { EditorFromTextArea } from 'codemirror5';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../../utils/urls';\n\nimport { Editor, EditorApi } from './Editor';\nimport { EditorLayout } from './EditorLayout';\nimport { insertFile } from './utils/utils';\nimport { WysiwygFooter } from './WysiwygFooter';\nimport { WysiwygNav } from './WysiwygNav';\n\nimport type { Schema } from '@strapi/types';\n\ninterface WysiwygProps extends Omit<InputProps, 'type'> {\n  labelAction?: React.ReactNode;\n  type: Schema.Attribute.RichText['type'];\n}\n\nconst Wysiwyg = React.forwardRef<EditorApi, WysiwygProps>(\n  ({ hint, disabled, label, name, placeholder, required, labelAction }, forwardedRef) => {\n    const field = useField(name);\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    const editorRef = React.useRef<EditorFromTextArea>(\n      null\n    ) as React.MutableRefObject<EditorFromTextArea>;\n    const [isPreviewMode, setIsPreviewMode] = React.useState(false);\n    const [mediaLibVisible, setMediaLibVisible] = React.useState(false);\n    const [isExpandMode, setIsExpandMode] = React.useState(false);\n    const components = useStrapiApp('ImageDialog', (state) => state.components);\n\n    const MediaLibraryDialog = components['media-library'];\n\n    const handleToggleMediaLib = () => setMediaLibVisible((prev) => !prev);\n    const handleTogglePreviewMode = () => setIsPreviewMode((prev) => !prev);\n    const handleToggleExpand = () => {\n      setIsPreviewMode(false);\n      setIsExpandMode((prev) => !prev);\n    };\n\n    const handleSelectAssets = (files: any[]) => {\n      const formattedFiles = files.map((f) => ({\n        alt: f.alternativeText || f.name,\n        url: prefixFileUrlWithBackendUrl(f.url),\n        mime: f.mime,\n      }));\n\n      insertFile(editorRef, formattedFiles);\n      setMediaLibVisible(false);\n    };\n\n    return (\n      <Field.Root name={name} hint={hint} error={field.error} required={required}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Field.Label action={labelAction}>{label}</Field.Label>\n          <EditorLayout\n            isExpandMode={isExpandMode}\n            error={field.error}\n            previewContent={field.value}\n            onCollapse={handleToggleExpand}\n          >\n            <WysiwygNav\n              isExpandMode={isExpandMode}\n              editorRef={editorRef}\n              isPreviewMode={isPreviewMode}\n              onToggleMediaLib={handleToggleMediaLib}\n              onTogglePreviewMode={isExpandMode ? undefined : handleTogglePreviewMode}\n              disabled={disabled}\n            />\n\n            <Editor\n              disabled={disabled}\n              isExpandMode={isExpandMode}\n              editorRef={editorRef}\n              error={field.error}\n              isPreviewMode={isPreviewMode}\n              name={name}\n              onChange={field.onChange}\n              placeholder={placeholder}\n              textareaRef={textareaRef}\n              value={field.value}\n              ref={forwardedRef}\n            />\n\n            {!isExpandMode && <WysiwygFooter onToggleExpand={handleToggleExpand} />}\n          </EditorLayout>\n          <Field.Hint />\n          <Field.Error />\n        </Flex>\n        {mediaLibVisible && (\n          // @ts-expect-error – TODO: fix this way of injecting because it's not really typeable without a registry.\n          <MediaLibraryDialog onClose={handleToggleMediaLib} onSelectAssets={handleSelectAssets} />\n        )}\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedWysiwyg = React.memo(Wysiwyg);\n\nexport { MemoizedWysiwyg as Wysiwyg };\nexport type { WysiwygProps };\n","import * as React from 'react';\n\nimport {\n  useStrapiApp,\n  useForm,\n  InputRenderer as FormInputRenderer,\n  useField,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\n\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentContext } from '../../../features/DocumentContext';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc, UseDocument } from '../../../hooks/useDocument';\nimport { useDocumentLayout } from '../../../hooks/useDocumentLayout';\nimport { useLazyComponents } from '../../../hooks/useLazyComponents';\n\nimport { BlocksInput } from './FormInputs/BlocksInput/BlocksInput';\nimport { ComponentInput } from './FormInputs/Component/Input';\nimport { DynamicZone, useDynamicZone } from './FormInputs/DynamicZone/Field';\nimport { NotAllowedInput } from './FormInputs/NotAllowed';\nimport { RelationsInput } from './FormInputs/Relations/Relations';\nimport { UIDInput } from './FormInputs/UID';\nimport { Wysiwyg } from './FormInputs/Wysiwyg/Field';\n\nimport type { EditFieldLayout } from '../../../hooks/useDocumentLayout';\nimport type { Schema } from '@strapi/types';\nimport type { DistributiveOmit } from 'react-redux';\n\ntype InputRendererProps = DistributiveOmit<EditFieldLayout, 'size'> & {\n  document: ReturnType<UseDocument>;\n};\n\n/**\n * @internal\n *\n * @description An abstraction around the regular form input renderer designed\n * specifically to be used in the EditView of the content-manager this understands\n * the complete EditFieldLayout and will handle RBAC conditions and rendering CM specific\n * components such as Blocks / Relations.\n */\nconst InputRenderer = ({ visible, hint: providedHint, document, ...props }: InputRendererProps) => {\n  const { model: rootModel } = useDoc();\n  const rootDocumentMeta = useDocumentContext(\n    'DynamicComponent',\n    (state) => state.rootDocumentMeta\n  );\n  const {\n    edit: { components: rootComponents },\n  } = useDocumentLayout(rootDocumentMeta.model);\n  const {\n    edit: { components: relatedComponents },\n  } = useDocumentLayout(document.schema?.uid ?? rootModel);\n  const components = { ...rootComponents, ...relatedComponents };\n\n  const collectionType =\n    document.schema?.kind === 'collectionType' ? 'collection-types' : 'single-types';\n\n  const isInDynamicZone = useDynamicZone('isInDynamicZone', (state) => state.isInDynamicZone);\n\n  const isFormDisabled = useForm('InputRenderer', (state) => state.disabled);\n  const canCreateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canCreateFields);\n  const canReadFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canReadFields);\n  const canUpdateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUpdateFields);\n  const canUserAction = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUserAction);\n\n  let idToCheck = document.document?.documentId;\n  if (collectionType === SINGLE_TYPES) {\n    idToCheck = document?.document?.documentId;\n  }\n\n  const editableFields = idToCheck ? canUpdateFields : canCreateFields;\n  const readableFields = idToCheck ? canReadFields : canCreateFields;\n\n  /**\n   * Component fields are always readable and editable,\n   * however the fields within them may not be.\n   */\n  const canUserReadField = canUserAction(props.name, readableFields, props.type);\n  const canUserEditField = canUserAction(props.name, editableFields, props.type);\n\n  const fields = useStrapiApp('InputRenderer', (app) => app.fields);\n  const { lazyComponentStore } = useLazyComponents(\n    attributeHasCustomFieldProperty(props.attribute) ? [props.attribute.customField] : undefined\n  );\n\n  const hint = useFieldHint(providedHint, props.attribute);\n\n  // We pass field in case of Custom Fields to keep backward compatibility\n  const field = useField(props.name);\n\n  if (!visible) {\n    return null;\n  }\n\n  /**\n   * If the user can't read the field then we don't want to ever render it.\n   */\n  if (!canUserReadField && !isInDynamicZone) {\n    return <NotAllowedInput hint={hint} {...props} />;\n  }\n\n  const fieldIsDisabled =\n    (!canUserEditField && !isInDynamicZone) || props.disabled || isFormDisabled;\n\n  /**\n   * Because a custom field has a unique prop but the type could be confused with either\n   * the useField hook or the type of the field we need to handle it separately and first.\n   */\n  if (attributeHasCustomFieldProperty(props.attribute)) {\n    const CustomInput = lazyComponentStore[props.attribute.customField];\n\n    if (CustomInput) {\n      // @ts-expect-error – TODO: fix this type error in the useLazyComponents hook.\n      return <CustomInput {...props} {...field} hint={hint} disabled={fieldIsDisabled} />;\n    }\n\n    return (\n      <FormInputRenderer\n        {...props}\n        hint={hint}\n        // @ts-expect-error – this workaround lets us display that the custom field is missing.\n        type={props.attribute.customField}\n        disabled={fieldIsDisabled}\n      />\n    );\n  }\n\n  /**\n   * This is where we handle ONLY the fields from the `useLibrary` hook.\n   */\n  const addedInputTypes = Object.keys(fields);\n  if (!attributeHasCustomFieldProperty(props.attribute) && addedInputTypes.includes(props.type)) {\n    const CustomInput = fields[props.type];\n    // @ts-expect-error – TODO: fix this type error in the useLibrary hook.\n    return <CustomInput {...props} hint={hint} disabled={fieldIsDisabled} />;\n  }\n\n  /**\n   * These include the content-manager specific fields, failing that we fall back\n   * to the more generic form input renderer.\n   */\n  switch (props.type) {\n    case 'blocks':\n      return <BlocksInput {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    case 'component':\n      return (\n        <ComponentInput\n          {...props}\n          hint={hint}\n          layout={components[props.attribute.component].layout}\n          disabled={fieldIsDisabled}\n        >\n          {(inputProps) => <InputRenderer {...inputProps} />}\n        </ComponentInput>\n      );\n    case 'dynamiczone':\n      return <DynamicZone {...props} hint={hint} disabled={fieldIsDisabled} />;\n    case 'relation':\n      return <RelationsInput {...props} hint={hint} disabled={fieldIsDisabled} />;\n    case 'richtext':\n      return <Wysiwyg {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    case 'uid':\n      return <UIDInput {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    /**\n     * Enumerations are a special case because they require options.\n     */\n    case 'enumeration':\n      return (\n        <FormInputRenderer\n          {...props}\n          hint={hint}\n          options={props.attribute.enum.map((value) => ({ value }))}\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\n          type={props.customField ? 'custom-field' : props.type}\n          disabled={fieldIsDisabled}\n        />\n      );\n    default:\n      // These props are not needed for the generic form input renderer.\n      const { unique: _unique, mainField: _mainField, ...restProps } = props;\n      return (\n        <FormInputRenderer\n          {...restProps}\n          hint={hint}\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\n          type={props.customField ? 'custom-field' : props.type}\n          disabled={fieldIsDisabled}\n        />\n      );\n  }\n};\n\nconst attributeHasCustomFieldProperty = (\n  attribute: Schema.Attribute.AnyAttribute\n): attribute is Schema.Attribute.AnyAttribute & Schema.Attribute.CustomField<string> =>\n  'customField' in attribute && typeof attribute.customField === 'string';\n\nconst useFieldHint = (\n  hint: React.ReactNode = undefined,\n  attribute: Schema.Attribute.AnyAttribute\n) => {\n  const { formatMessage } = useIntl();\n\n  const { maximum, minimum } = getMinMax(attribute);\n\n  if (!maximum && !minimum) {\n    return hint;\n  }\n\n  const units = !['biginteger', 'integer', 'number', 'dynamiczone', 'component'].includes(\n    attribute.type\n  )\n    ? formatMessage(\n        {\n          id: 'content-manager.form.Input.hint.character.unit',\n          defaultMessage: '{maxValue, plural, one { character} other { characters}}',\n        },\n        {\n          maxValue: Math.max(minimum || 0, maximum || 0),\n        }\n      )\n    : null;\n\n  const hasMinAndMax = typeof minimum === 'number' && typeof maximum === 'number';\n\n  return formatMessage(\n    {\n      id: 'content-manager.form.Input.hint.text',\n      defaultMessage:\n        '{min, select, undefined {} other {min. {min}}}{divider}{max, select, undefined {} other {max. {max}}}{unit}{br}{description}',\n    },\n    {\n      min: minimum,\n      max: maximum,\n      description: hint,\n      unit: units,\n      divider: hasMinAndMax\n        ? formatMessage({\n            id: 'content-manager.form.Input.hint.minMaxDivider',\n            defaultMessage: ' / ',\n          })\n        : null,\n      br: <br />,\n    }\n  );\n};\n\nconst getMinMax = (attribute: Schema.Attribute.AnyAttribute) => {\n  if ('min' in attribute || 'max' in attribute) {\n    return {\n      maximum: !Number.isNaN(Number(attribute.max)) ? Number(attribute.max) : undefined,\n      minimum: !Number.isNaN(Number(attribute.min)) ? Number(attribute.min) : undefined,\n    };\n  } else if ('maxLength' in attribute || 'minLength' in attribute) {\n    return { maximum: attribute.maxLength, minimum: attribute.minLength };\n  } else {\n    return { maximum: undefined, minimum: undefined };\n  }\n};\n\nconst MemoizedInputRenderer = React.memo(InputRenderer);\n\nexport type { InputRendererProps };\nexport { MemoizedInputRenderer as InputRenderer, useFieldHint };\n","import { Box, Flex, Grid } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { EditLayout } from '../../../hooks/useDocumentLayout';\n\nimport { InputRenderer } from './InputRenderer';\n\nimport type { UseDocument } from '../../../hooks/useDocument';\n\nexport const RESPONSIVE_CONTAINER_BREAKPOINTS = {\n  sm: '27.5rem', // 440px\n};\n\nexport const ResponsiveGridRoot = styled(Grid.Root)`\n  container-type: inline-size;\n`;\n\nexport const ResponsiveGridItem =\n  /**\n   * TODO:\n   * JSDOM cannot handle container queries.\n   * This is a temporary workaround so that tests do not fail in the CI when jestdom throws an error\n   * for failing to parse the stylesheet.\n   */\n  process.env.NODE_ENV !== 'test'\n    ? styled(Grid.Item)<{ col: number }>`\n        grid-column: span 12;\n        @container (min-width: ${RESPONSIVE_CONTAINER_BREAKPOINTS.sm}) {\n          ${({ col }) => col && `grid-column: span ${col};`}\n        }\n      `\n    : styled(Grid.Item)<{ col: number }>`\n        grid-column: span 12;\n      `;\n\ninterface FormLayoutProps extends Pick<EditLayout, 'layout'> {\n  hasBackground?: boolean;\n  model?: string;\n  document: ReturnType<UseDocument>;\n}\n\nconst FormLayout = ({ layout, document, hasBackground = true }: FormLayoutProps) => {\n  const { formatMessage } = useIntl();\n  const model = document.schema?.modelName;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n      {layout.map((panel, index) => {\n        if (panel.some((row) => row.some((field) => field.type === 'dynamiczone'))) {\n          const [row] = panel;\n          const [field] = row;\n\n          const fieldWithTranslatedLabel = {\n            ...field,\n            label: formatMessage({\n              id: `content-manager.content-types.${model}.${field.name}`,\n              defaultMessage: field.label,\n            }),\n          };\n\n          return (\n            <Grid.Root key={field.name} gap={4}>\n              <Grid.Item col={12} s={12} xs={12} direction=\"column\" alignItems=\"stretch\">\n                <InputRenderer {...fieldWithTranslatedLabel} document={document} />\n              </Grid.Item>\n            </Grid.Root>\n          );\n        }\n\n        return (\n          <Box\n            key={index}\n            {...(hasBackground && {\n              padding: 6,\n              borderColor: 'neutral150',\n              background: 'neutral0',\n              hasRadius: true,\n              shadow: 'tableShadow',\n            })}\n          >\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              {panel.map((row, gridRowIndex) => (\n                <ResponsiveGridRoot key={gridRowIndex} gap={4}>\n                  {row.map(({ size, ...field }) => {\n                    const fieldWithTranslatedLabel = {\n                      ...field,\n                      label: formatMessage({\n                        id: `content-manager.content-types.${model}.${field.name}`,\n                        defaultMessage: field.label,\n                      }),\n                    };\n                    return (\n                      <ResponsiveGridItem\n                        col={size}\n                        key={field.name}\n                        s={12}\n                        xs={12}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...fieldWithTranslatedLabel} document={document} />\n                      </ResponsiveGridItem>\n                    );\n                  })}\n                </ResponsiveGridRoot>\n              ))}\n            </Flex>\n          </Box>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport { FormLayout, FormLayoutProps };\n","import { useField } from '@strapi/admin/strapi-admin';\nimport { Box, Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport type { ComponentInputProps } from './Input';\n\ntype NonRepeatableComponentProps = Omit<ComponentInputProps, 'required' | 'label'>;\n\nconst NonRepeatableComponent = ({\n  attribute,\n  name,\n  children,\n  layout,\n}: NonRepeatableComponentProps) => {\n  const { formatMessage } = useIntl();\n  const { value } = useField(name);\n  const level = useComponent('NonRepeatableComponent', (state) => state.level);\n  const isNested = level > 0;\n  const currentDocument = useDocumentContext('NonRepeatableComponent', (state) => state.document);\n\n  return (\n    <ComponentProvider id={value?.id} uid={attribute.component} level={level + 1} type=\"component\">\n      <Box\n        background={'neutral100'}\n        paddingLeft={6}\n        paddingRight={6}\n        paddingTop={6}\n        paddingBottom={6}\n        hasRadius={isNested}\n        borderColor={isNested ? 'neutral200' : undefined}\n      >\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n          {layout.map((row, index) => {\n            return (\n              <ResponsiveGridRoot gap={4} key={index}>\n                {row.map(({ size, ...field }) => {\n                  /**\n                   * Layouts are built from schemas so they don't understand the complete\n                   * schema tree, for components we append the parent name to the field name\n                   * because this is the structure for the data & permissions also understand\n                   * the nesting involved.\n                   */\n                  const completeFieldName = `${name}.${field.name}`;\n\n                  const translatedLabel = formatMessage({\n                    id: `content-manager.components.${attribute.component}.${field.name}`,\n                    defaultMessage: field.label,\n                  });\n\n                  return (\n                    <ResponsiveGridItem\n                      col={size}\n                      key={completeFieldName}\n                      s={12}\n                      xs={12}\n                      direction=\"column\"\n                      alignItems=\"stretch\"\n                    >\n                      {children({\n                        ...field,\n                        label: translatedLabel,\n                        name: completeFieldName,\n                        document: currentDocument,\n                      })}\n                    </ResponsiveGridItem>\n                  );\n                })}\n              </ResponsiveGridRoot>\n            );\n          })}\n        </Flex>\n      </Box>\n    </ComponentProvider>\n  );\n};\n\nexport { NonRepeatableComponent };\nexport type { NonRepeatableComponentProps };\n","import * as React from 'react';\n\nimport { useField, useNotification, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  TextButton,\n  VisuallyHidden,\n  Accordion,\n  IconButton,\n  useComposedRefs,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Plus, Drag, Trash } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { useDragAndDrop, type UseDragAndDropOptions } from '../../../../../hooks/useDragAndDrop';\nimport { usePrev } from '../../../../../hooks/usePrev';\nimport { getIn } from '../../../../../utils/objects';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport { Initializer } from './Initializer';\n\nimport type { ComponentInputProps } from './Input';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * RepeatableComponent\n * -----------------------------------------------------------------------------------------------*/\n\ntype RepeatableComponentProps = Omit<ComponentInputProps, 'required' | 'label'>;\n\nconst RepeatableComponent = ({\n  attribute,\n  disabled,\n  name,\n  mainField,\n  children,\n  layout,\n}: RepeatableComponentProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search: searchString } = useLocation();\n  const search = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\n  const currentDocument = useDocumentContext('RepeatableComponent', (state) => state.document);\n  const components = currentDocument.components;\n\n  const {\n    value = [],\n    error,\n    rawError,\n  } = useField<Schema.Attribute.ComponentValue<`${string}.${string}`, true>>(name);\n  const addFieldRow = useForm('RepeatableComponent', (state) => state.addFieldRow);\n  const moveFieldRow = useForm('RepeatableComponent', (state) => state.moveFieldRow);\n  const removeFieldRow = useForm('RepeatableComponent', (state) => state.removeFieldRow);\n  const { max = Infinity } = attribute;\n\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string>('');\n  const [liveText, setLiveText] = React.useState('');\n\n  React.useEffect(() => {\n    const hasNestedErrors = rawError && Array.isArray(rawError) && rawError.length > 0;\n    const hasNestedValue = value && Array.isArray(value) && value.length > 0;\n\n    if (hasNestedErrors && hasNestedValue) {\n      const errorOpenItems = rawError\n        .map((_: unknown, idx: number) => {\n          return value[idx] ? value[idx].__temp_key__ : null;\n        })\n        .filter((value) => !!value);\n\n      if (errorOpenItems && errorOpenItems.length > 0) {\n        setCollapseToOpen((collapseToOpen) => {\n          if (!errorOpenItems.includes(collapseToOpen)) {\n            return errorOpenItems[0];\n          }\n\n          return collapseToOpen;\n        });\n      }\n    }\n  }, [rawError, value]);\n\n  /**\n   * Get the temp key of the component that has the field that is currently focussed\n   * as defined by the `field` query param. We can then force this specific component\n   * to be in its \"open\" state.\n   */\n  const componentTmpKeyWithFocussedField = React.useMemo(() => {\n    if (search.has('field')) {\n      const fieldParam = search.get('field');\n\n      if (!fieldParam) {\n        return undefined;\n      }\n\n      const [, path] = fieldParam.split(`${name}.`);\n\n      if (getIn(value, path, undefined) !== undefined) {\n        const [subpath] = path.split('.');\n\n        return getIn(value, subpath, undefined)?.__temp_key__;\n      }\n    }\n\n    return undefined;\n  }, [search, name, value]);\n\n  const prevValue = usePrev(value);\n\n  React.useEffect(() => {\n    /**\n     * When we add a new item to the array, we want to open the collapse.\n     */\n    if (prevValue && prevValue.length < value.length) {\n      setCollapseToOpen(value[value.length - 1].__temp_key__);\n    }\n  }, [value, prevValue]);\n\n  React.useEffect(() => {\n    if (typeof componentTmpKeyWithFocussedField === 'string') {\n      setCollapseToOpen(componentTmpKeyWithFocussedField);\n    }\n  }, [componentTmpKeyWithFocussedField]);\n\n  const toggleCollapses = () => {\n    setCollapseToOpen('');\n  };\n\n  const handleClick = () => {\n    if (value.length < max) {\n      const schema = components[attribute.component];\n      const form = createDefaultForm(schema, components);\n      const data = transformDocument(schema, components)(form);\n\n      addFieldRow(name, data);\n      // setCollapseToOpen(nextTempKey);\n    } else if (value.length >= max) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({\n          id: getTranslation('components.notification.info.maximum-requirement'),\n        }),\n      });\n    }\n  };\n\n  const handleMoveComponentField: ComponentProps['onMoveItem'] = (newIndex, currentIndex) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: `${name}.${currentIndex}`,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow(name, currentIndex, newIndex);\n  };\n\n  const handleValueChange = (key: string) => {\n    setCollapseToOpen(key);\n  };\n\n  const getItemPos = (index: number) => `${index + 1} of ${value.length}`;\n\n  const handleCancel = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: `${name}.${index}`,\n        }\n      )\n    );\n  };\n\n  const handleGrabItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const ariaDescriptionId = React.useId();\n\n  const level = useComponent('RepeatableComponent', (state) => state.level);\n\n  if (value.length === 0) {\n    return <Initializer disabled={disabled} name={name} onClick={handleClick} />;\n  }\n\n  return (\n    <Box hasRadius>\n      <VisuallyHidden id={ariaDescriptionId}>\n        {formatMessage({\n          id: getTranslation('dnd.instructions'),\n          defaultMessage: `Press spacebar to grab and re-order`,\n        })}\n      </VisuallyHidden>\n      <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n      <AccordionRoot\n        $error={error}\n        value={collapseToOpen}\n        onValueChange={handleValueChange}\n        aria-describedby={ariaDescriptionId}\n      >\n        {value.map(({ __temp_key__: key, id }, index) => {\n          const nameWithIndex = `${name}.${index}`;\n          return (\n            <ComponentProvider\n              key={key}\n              // id is always a number in a component\n              id={id as number}\n              uid={attribute.component}\n              level={level + 1}\n              type=\"repeatable\"\n            >\n              <Component\n                disabled={disabled}\n                name={nameWithIndex}\n                attribute={attribute}\n                index={index}\n                mainField={mainField}\n                onMoveItem={handleMoveComponentField}\n                onDeleteComponent={() => {\n                  removeFieldRow(name, index);\n                  toggleCollapses();\n                }}\n                toggleCollapses={toggleCollapses}\n                onCancel={handleCancel}\n                onDropItem={handleDropItem}\n                onGrabItem={handleGrabItem}\n                __temp_key__={key}\n              >\n                {layout.map((row, index) => {\n                  return (\n                    <ResponsiveGridRoot gap={4} key={index}>\n                      {row.map(({ size, ...field }) => {\n                        /**\n                         * Layouts are built from schemas so they don't understand the complete\n                         * schema tree, for components we append the parent name to the field name\n                         * because this is the structure for the data & permissions also understand\n                         * the nesting involved.\n                         */\n                        const completeFieldName = `${nameWithIndex}.${field.name}`;\n\n                        const translatedLabel = formatMessage({\n                          id: `content-manager.components.${attribute.component}.${field.name}`,\n                          defaultMessage: field.label,\n                        });\n\n                        return (\n                          <ResponsiveGridItem\n                            col={size}\n                            key={completeFieldName}\n                            s={12}\n                            xs={12}\n                            direction=\"column\"\n                            alignItems=\"stretch\"\n                          >\n                            {children({\n                              ...field,\n                              label: translatedLabel,\n                              name: completeFieldName,\n                              document: currentDocument,\n                            })}\n                          </ResponsiveGridItem>\n                        );\n                      })}\n                    </ResponsiveGridRoot>\n                  );\n                })}\n              </Component>\n            </ComponentProvider>\n          );\n        })}\n        <TextButtonCustom disabled={disabled} onClick={handleClick} startIcon={<Plus />}>\n          {formatMessage({\n            id: getTranslation('containers.EditView.add.new-entry'),\n            defaultMessage: 'Add an entry',\n          })}\n        </TextButtonCustom>\n      </AccordionRoot>\n    </Box>\n  );\n};\n\nconst AccordionRoot = styled(Accordion.Root)<{ $error?: string }>`\n  border: 1px solid\n    ${({ theme, $error }) => ($error ? theme.colors.danger600 : theme.colors.neutral200)};\n`;\n\nconst TextButtonCustom = styled(TextButton)`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral200};\n  padding-inline: ${(props) => props.theme.spaces[6]};\n  padding-block: ${(props) => props.theme.spaces[3]};\n\n  &:not([disabled]) {\n    cursor: pointer;\n\n    &:hover {\n      background-color: ${(props) => props.theme.colors.primary100};\n    }\n  }\n\n  span {\n    font-weight: 600;\n    font-size: 1.4rem;\n    line-height: 2.4rem;\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    transition: background-color 120ms ${(props) => props.theme.motion.easings.easeOutQuad};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ComponentProps\n  extends Pick<UseDragAndDropOptions, 'onGrabItem' | 'onDropItem' | 'onCancel' | 'onMoveItem'>,\n    Pick<RepeatableComponentProps, 'mainField'> {\n  attribute: Schema.Attribute.Component<`${string}.${string}`, boolean>;\n  disabled?: boolean;\n  index: number;\n  name: string;\n  onDeleteComponent?: React.MouseEventHandler<HTMLButtonElement>;\n  toggleCollapses: () => void;\n  children: React.ReactNode;\n  __temp_key__: string;\n}\n\nconst Component = ({\n  disabled,\n  index,\n  name,\n  mainField = {\n    name: 'id',\n    type: 'integer',\n  },\n  children,\n  onDeleteComponent,\n  toggleCollapses,\n  __temp_key__,\n  ...dragProps\n}: ComponentProps) => {\n  const { formatMessage } = useIntl();\n\n  const displayValue = useForm('RepeatableComponent', (state) => {\n    return getIn(state.values, [...name.split('.'), mainField.name]);\n  });\n\n  const accordionRef = React.useRef<HTMLButtonElement>(null!);\n\n  /**\n   * The last item in the fieldName array will be the index of this component.\n   * Drag and drop should be isolated to the parent component so nested repeatable\n   * components are not affected by the drag and drop of the parent component in\n   * their own re-ordering context.\n   */\n  const componentKey = name.split('.').slice(0, -1).join('.');\n\n  const [{ handlerId, isDragging, handleKeyDown }, boxRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.COMPONENT}_${componentKey}`,\n      index,\n      item: {\n        index,\n        displayedValue: displayValue,\n      },\n      onStart() {\n        // Close all collapses\n        toggleCollapses();\n      },\n      ...dragProps,\n    });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  const composedAccordionRefs = useComposedRefs<HTMLButtonElement>(accordionRef, dragRef);\n  const composedBoxRefs = useComposedRefs<HTMLDivElement>(\n    boxRef as React.RefObject<HTMLDivElement>,\n    dropRef\n  );\n\n  return (\n    <>\n      {isDragging ? (\n        <Preview />\n      ) : (\n        <Accordion.Item ref={composedBoxRefs} value={__temp_key__}>\n          <Accordion.Header>\n            <Accordion.Trigger>{displayValue}</Accordion.Trigger>\n            <Accordion.Actions>\n              <IconButton\n                variant=\"ghost\"\n                onClick={onDeleteComponent}\n                label={formatMessage({\n                  id: getTranslation('containers.Edit.delete'),\n                  defaultMessage: 'Delete',\n                })}\n              >\n                <Trash />\n              </IconButton>\n              <IconButton\n                ref={composedAccordionRefs}\n                variant=\"ghost\"\n                onClick={(e) => e.stopPropagation()}\n                data-handler-id={handlerId}\n                label={formatMessage({\n                  id: getTranslation('components.DragHandle-label'),\n                  defaultMessage: 'Drag',\n                })}\n                onKeyDown={handleKeyDown}\n              >\n                <Drag />\n              </IconButton>\n            </Accordion.Actions>\n          </Accordion.Header>\n          <Accordion.Content>\n            <Flex\n              direction=\"column\"\n              alignItems=\"stretch\"\n              background=\"neutral100\"\n              padding={6}\n              gap={6}\n            >\n              {children}\n            </Flex>\n          </Accordion.Content>\n        </Accordion.Item>\n      )}\n    </>\n  );\n};\n\nconst Preview = () => {\n  return <StyledSpan tag=\"span\" padding={6} background=\"primary100\" />;\n};\n\nconst StyledSpan = styled<BoxComponent<'span'>>(Box)`\n  display: block;\n  outline: 1px dashed ${({ theme }) => theme.colors.primary500};\n  outline-offset: -1px;\n`;\n\nexport { RepeatableComponent };\nexport type { RepeatableComponentProps };\n","import * as React from 'react';\n\nimport { InputProps, useField } from '@strapi/admin/strapi-admin';\nimport { Field, Flex, IconButton } from '@strapi/design-system';\nimport { Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentContext } from '../../../../../features/DocumentContext';\nimport { EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { type InputRendererProps } from '../../InputRenderer';\n\nimport { Initializer } from './Initializer';\nimport { NonRepeatableComponent } from './NonRepeatable';\nimport { RepeatableComponent } from './Repeatable';\n\ninterface ComponentInputProps\n  extends Omit<Extract<EditFieldLayout, { type: 'component' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'> {\n  labelAction?: React.ReactNode;\n  children: (props: InputRendererProps) => React.ReactNode;\n  /**\n   * We need layout to come from the props, and not via a hook, because Content History needs\n   * a way to modify the normal component layout to add hidden fields.\n   */\n  layout: EditFieldLayout[][];\n}\n\nconst ComponentInput = ({\n  label,\n  required,\n  name,\n  attribute,\n  disabled,\n  labelAction,\n  ...props\n}: ComponentInputProps) => {\n  const { formatMessage } = useIntl();\n  const field = useField(name);\n\n  const showResetComponent = !attribute.repeatable && field.value && !disabled;\n\n  const components = useDocumentContext('ComponentInput', (state) => state.document.components);\n\n  const handleInitialisationClick = () => {\n    const schema = components[attribute.component];\n    const form = createDefaultForm(schema, components);\n    const data = transformDocument(schema, components)(form);\n\n    field.onChange(name, data);\n  };\n\n  return (\n    <Field.Root error={field.error} required={required}>\n      <Flex justifyContent=\"space-between\">\n        <Field.Label action={labelAction}>\n          {label}\n          {attribute.repeatable && (\n            <>&nbsp;({Array.isArray(field.value) ? field.value.length : 0})</>\n          )}\n        </Field.Label>\n\n        {showResetComponent && (\n          <IconButton\n            label={formatMessage({\n              id: getTranslation('components.reset-entry'),\n              defaultMessage: 'Reset Entry',\n            })}\n            variant=\"ghost\"\n            onClick={() => {\n              field.onChange(name, null);\n            }}\n          >\n            <Trash />\n          </IconButton>\n        )}\n      </Flex>\n      {/**\n       * if the field isn't repeatable then we display a button to start the field\n       * TODO: should this just live in the `NonRepeatableComponent`?\n       */}\n      {!attribute.repeatable && !field.value && (\n        <Initializer disabled={disabled} name={name} onClick={handleInitialisationClick} />\n      )}\n      {!attribute.repeatable && field.value ? (\n        <NonRepeatableComponent attribute={attribute} name={name} disabled={disabled} {...props}>\n          {props.children}\n        </NonRepeatableComponent>\n      ) : null}\n      {attribute.repeatable && (\n        <RepeatableComponent attribute={attribute} name={name} disabled={disabled} {...props}>\n          {props.children}\n        </RepeatableComponent>\n      )}\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\nconst MemoizedComponentInput = React.memo(ComponentInput);\n\nexport { MemoizedComponentInput as ComponentInput };\nexport type { ComponentInputProps };\n"],"names":["componentStore","Map","useLazyComponents","componentUids","lazyComponentStore","setLazyComponentStore","useState","Object","fromEntries","newUids","filter","uid","get","loading","setLoading","length","getCustomField","useStrapiApp","state","customFields","useEffect","setStore","store","lazyLoadComponents","uids","components","modules","Promise","all","forEach","index","set","default","componentPromises","reduce","arrayOfPromises","customField","push","Input","cleanup","useCallback","clear","isLazyLoading","codeLanguages","value","label","decorate","baseHandleConvert","editor","attributesToSet","_","lastNodePath","Editor","last","Transforms","unwrapNodes","match","node","isEditor","type","split","at","selection","updatedLastNodePath","entry","above","element","elementPath","setNodes","getAttributesToClear","children","_children","_type","extra","attributesToClear","keys","currentAttributes","key","isText","Node","isNode","pressEnterTwiceToExit","nodeEntry","includes","nodePath","isNodeEnd","isEnd","anchor","lastTextNode","isEmptyLine","text","endsWith","delete","distance","unit","reverse","insertNodes","insertText","modifier","removeMark","decorateCode","path","ranges","Element","isElement","string","language","find","lang","decorateKey","selectedLanguage","Prism","languages","tokens","tokenize","start","token","end","offset","focus","className","CodeBlock","styled","pre","theme","borderRadius","colors","neutral100","spaces","neutral800","CodeEditor","props","useBlocksEditorContext","editorIsFocused","useFocused","imageIsSelected","useSelected","formatMessage","useIntl","isSelectOpen","setIsSelectOpen","React","shouldDisplayLanguageSelect","_jsxs","Box","position","width","_jsx","attributes","code","background","borderColor","borderStyle","borderWidth","shadow","top","marginTop","right","padding","hasRadius","SingleSelect","onChange","open","toString","onOpenChange","ReactEditor","onCloseAutoFocus","e","preventDefault","aria-label","id","defaultMessage","map","SingleSelectOption","codeBlocks","renderElement","icon","CodeBlockIcon","matchNode","isInBlocksSelector","handleConvert","handleEnterKey","snippets","H1","Typography","attrs","tag","lineHeights","H2","H3","H4","H5","H6","handleConvertToHeading","level","headingBlocks","HeadingOne","dragHandleTopMargin","HeadingTwo","HeadingThree","HeadingFour","HeadingFive","HeadingSix","ImageWrapper","Flex","$isFocused","css","primary600","IMAGE_SCHEMA_FIELDS","pick","object","entries","isImage","Image","url","alternativeText","height","image","contentEditable","justifyContent","img","src","alt","ImageDialog","isOpen","setIsOpen","MediaLibraryDialog","insertImages","images","nodeEntryBeingReplaced","isInlineNode","pathToInsert","removeNodes","nodesToInsert","imageNode","select","handleSelectAssets","formattedImages","expectedImage","nodeImage","name","prefixFileUrlWithBackendUrl","allowedTypes","onClose","onSelectAssets","imageBlocks","Picture","handleBackspaceKey","removeLink","SlateElement","insertLink","linkNodes","Array","from","nodes","Range","isCollapsed","link","wrapNodes","editLink","linkEntry","linkPath","linkNodeChildrens","childPath","concat","getEntries","getKeys","isLinkNode","isListNode","StyledLink","RemoveButton","Button","$visible","LinkContent","forwardRef","forwardedRef","findPath","popoverOpen","setPopoverOpen","lastInsertedLinkPath","Path","equals","elementText","child","join","linkText","setLinkText","linkUrl","setLinkUrl","linkInputRef","useRef","isLastInsertedLink","isSaveDisabled","setIsSaveDisabled","onLinkChange","target","URL","startsWith","error","handleSave","stopPropagation","parentPath","parent","handleClose","current","inputNotDirty","Popover","Root","Trigger","ref","href","onClick","color","Content","onPointerDownOutside","direction","gap","Field","alignItems","Label","placeholder","variant","disabled","Boolean","Link","linkBlocks","listStyle","Orderedlist","ol","$listStyleType","Unorderedlist","ul","orderedStyles","unorderedStyles","List","listStyles","format","nextIndex","indentLevel","listStyleType","replaceListWithEmptyBlock","currentListPath","handleBackspaceKeyOnList","event","currentListItem","currentListItemPath","currentList","isListEmpty","isListItemEmpty","isFocusAtTheBeginningOfAChild","parentListEntry","liftNodes","previousEntry","previous","nextEntry","next","previousList","nextList","mergeNodes","handleEnterKeyOnList","currentListItemEntry","currentNode","updatedPath","slice","previousIndentLevel","parentListNodeEntry","modifiedPath","moveNodes","to","createdParagraphPath","splitNodes","handleConvertToList","convertedPath","handleTabOnList","currentListItemIndex","findIndex","item","previousNode","insertAtPath","listBlocks","NumberList","handleTab","BulletList","paragraphBlocks","paragraph","Paragraph","anchorPathInitialPosition","always","parentBlockEntry","parentBlockPath","fragmentedNode","hasNextNode","Blockquote","blockquote","role","fontWeights","regular","neutral200","neutral600","quoteBlocks","quote","div","Quotes","ObservedToolbarComponent","lastVisibleIndex","setLastVisibleIndex","rootRef","isVisible","containerRef","useElementOnScreen","prev","Math","max","threshold","root","style","visibility","EditorToolbarObserver","observedComponents","menuTriggerVariant","toolbarRef","hasHiddenItems","menuIndex","setOpen","isMenuOpenWithContent","menuTriggerRef","component","toolbar","toSpliced","Menu","defaultOpen","paddingLeft","paddingRight","IconButton","More","maxHeight","minWidth","popoverPlacement","zIndex","Fragment","menu","ToolbarWrapper","neutral150","ToolbarSeparator","Toolbar","Separator","FlexButton","primary100","SelectWrapper","useConversionModal","modalElement","setModalComponent","handleConversionResult","renderModal","cloneElement","Date","now","ToolbarButton","Icon","isActive","handleClick","labelMessage","enabledColor","Tooltip","ToggleItem","data-state","onMouseDown","aria-disabled","asChild","fill","BlocksDropdown","blocks","blockKeysToInclude","currentKeys","block","blockSelected","setBlockSelected","handleSelect","optionKey","isSelectorBlockKey","editorIsEmpty","isEmpty","currentListEntry","maybeRenderModal","preventSelectFocus","selectedNode","anchorNode","edge","depth","anchorBlockKey","blockKey","_Fragment","startIcon","BlockOption","isSelected","ListButton","location","isListActive","isListDisabled","anchorNodeEntry","focusNodeEntry","toggleList","StyledMenuItem","onSelect","LinkButton","isLinkActive","unhangRange","isLinkDisabled","addLink","shouldSaveLinkPath","Item","BlocksToolbar","modifiers","checkButtonDisabled","isButtonDisabled","checkIsActive","handleToggle","ToggleGroup","grow","overflow","StyledEditable","Editable","isExpandedMode","Wrapper","isOverDropTarget","DropPlaceholder","dragDirection","placeholderMargin","DIRECTIONS","UPWARD","DOWNWARD","DragItem","$dragVisibility","DragIconButton","$dragHandleTopMargin","neutral500","DragAndDropElement","setDragDirection","setLiveText","dragVisibility","setDragVisibility","handleMoveBlock","newIndex","currentIndex","currentIndexPosition","newIndexPosition","getTranslation","handlerId","isDragging","blockRef","dropRef","dragRef","useDragAndDrop","ItemTypes","BLOCKS","displayedValue","onDropItem","composedBoxRefs","useComposedRefs","marginLeft","as","CloneDragItem","data-handler-id","onDragStart","currentTarget","getAttribute","opacity","onDragEnd","onMouseMove","onMouseLeave","tabIndex","withTooltip","draggable","Drag","baseRenderLeaf","wrappedChildren","currentChildren","modifierEntry","leaf","renderLeaf","span","baseRenderElement","blockMatch","values","BlocksContent","ariaLabelId","blocksRef","handleMoveBlocks","checkSnippet","textNode","textNodePath","blockMatchingSnippet","handleEnter","selectedBlock","shiftKey","handleBackspaceEvent","handleKeyboardShortcuts","isCtrlOrCmd","metaKey","ctrlKey","isValidEventKey","handleKeyDown","blur","handleScrollSelectionIntoView","domRange","toDOMRange","domRect","getBoundingClientRect","blocksInput","editorRect","bottom","scrollBy","behavior","fontSize","lineHeight","paddingTop","paddingBottom","aria-labelledby","readOnly","onKeyDown","scrollSelectionIntoView","onDrop","CollapseIconButton","ExpandWrapper","EditorLayout","onCollapse","ariaDescriptionId","document","body","classList","add","remove","Portal","aria-modal","FocusTrap","onEscape","left","aria-describedby","Collapse","InputWrapper","$disabled","$hasError","danger600","neutral0","undefined","stylesToInherit","BoldText","fontWeight","ItalicText","UnderlineText","textDecoration","StrikeThroughText","InlineCode","baseCheckIsActive","marks","baseHandleToggle","endOfEditor","addMark","bold","Bold","italic","Italic","underline","Underline","strikethrough","StrikeThrough","Code","withImages","isVoid","withLinks","isInline","apply","insertData","operation","hasPrevious","transform","linksInSelection","selectionIsInLink","selectionIsAtEndOfLink","Point","data","pastedText","getData","withStrapiSchema","normalizeNode","selectorBlockKeys","BlocksEditorProvider","usePartialBlocksEditorContext","createContext","consumerName","context","useSlate","EditorDivider","Divider","ExpandIconButton","shadows","filterShadow","useResetKey","slateUpdatesCount","valueUpdatesCount","setKey","previousKey","incrementSlateUpdatesCount","pipe","fns","fn","BlocksEditor","contentProps","withHistory","withReact","createEditor","liveText","useId","setIsExpandedMode","handleToggleExpand","useImperativeHandle","handleSlateChange","isAstChange","operations","some","op","VisuallyHidden","aria-live","Slate","initialValue","Expand","BlocksInput","required","hint","labelAction","editorProps","field","useField","action","Hint","Error","MemoizedBlocksInput","memo","Initializer","cursor","PlusCircle","textColor","ComponentProvider","useComponent","AddComponentButton","hasError","isDisabled","StyledButton","StyledAddIcon","aria-hidden","$isOpen","danger200","ComponentCategory","category","onAddComponent","Accordion","Header","ResponsiveAccordionContent","Grid","displayName","ComponentBox","shrink","ComponentIcon","process","env","NODE_ENV","RESPONSIVE_CONTAINER_BREAKPOINTS","sm","motion","easings","easeOutQuad","primary200","ComponentPicker","dynamicComponentsByCategory","onClickAddComponent","handleAddComponentToDz","componentUid","defaultValue","DynamicComponent","onRemoveComponentClick","onMoveComponent","onGrabItem","onCancel","formValues","useForm","documentMeta","useDocumentContext","meta","rootDocumentMeta","edit","rootComponents","useDocumentLayout","model","relatedComponents","useMemo","title","mainField","settings","mainFieldValue","getIn","String","trim","mainValue","boxRef","dragPreviewRef","DYNAMIC_ZONE","onMoveItem","getEmptyImage","captureDraggingState","accordionValue","rawError","collapseToOpen","setCollapseToOpen","accordionActions","Trash","size","endIcon","focusable","SubRoot","SubTrigger","SubContent","MenuItem","accordionTitle","ComponentContainer","Rectangle","StyledBox","Preview","onValueChange","COMPONENT_ICONS","dashboard","Actions","AccordionContentRadius","layout","row","rowInd","col","s","xs","ResponsiveGridRoot","fieldName","fieldWithTranslatedLabel","ResponsiveGridItem","InputRenderer","tableShadow","primary500","DynamicZoneLabel","numberOfComponents","maxWidth","ellipsis","DynamicZoneProvider","useDynamicZone","isInDynamicZone","DynamicZone","attribute","disabledProp","Infinity","min","addComponentIsOpen","setAddComponentIsOpen","isLoading","addFieldRow","removeFieldRow","moveFieldRow","acc","info","toggleNotification","useNotification","dynamicDisplayedComponentsLength","handleAddComponent","schema","form","createDefaultForm","transformations","transformDocument","__component","handleClickOpenPicker","message","handleMoveComponent","getItemPos","handleCancel","handleGrabItem","handleDropItem","handleRemoveComponent","renderButtonLabel","number","componentName","__temp_key__","NotAllowedInput","TextInput","startAction","EyeStriked","getCollectionType","regex","RegExp","COLLECTION_TYPES","SINGLE_TYPES","CustomModalContent","Modal","RelationModalProvider","useRelationModal","parentModified","RelationModalForm","relation","triggerButtonLabel","navigate","useNavigate","pathname","search","useLocation","triggerRefetchDocument","useLazyGetDocumentQuery","currentDocument","currentDocumentMeta","changeDocument","documentHistory","setDocumentHistory","isConfirmationOpen","setIsConfirmationOpen","actionPosition","setActionPosition","isModalOpen","setIsModalOpen","parentContext","isNested","addDocumentToHistory","getPreviousDocument","lastDocument","removeLastDocumentFromHistory","handleToggleModal","collectionType","documentId","getFullPageLink","isSingleType","queryParams","params","locale","handleRedirection","editViewUrl","isRootDocumentUrl","handleConfirm","previousRelation","FormContext","method","initialValues","getInitialFormValues","validate","options","yupSchema","createYupSchema","status","abortEarly","modified","isSubmitting","resetForm","hasHistory","description","CustomTextButton","marginRight","ArrowLeft","RelationModalBody","ArrowsOut","Footer","Dialog","ConfirmDialog","onConfirm","TextButton","fontSizes","documentResponse","onPreview","documentLayoutResponse","plugins","permissions","isLoadingPermissions","useRBAC","PERMISSIONS","subject","Loader","small","EmptyStateLayout","WarningCircle","content","documentTitle","getTitle","hasDraftAndPublished","draftAndPublish","activeTab","fromRelationModal","fromPreview","Body","DocumentRBAC","DescriptionComponentRenderer","descriptions","apis","getDocumentActions","actions","filteredActions","flat","primaryAction","secondaryAction","DocumentActionButton","DocumentStatus","flex","FormLayout","hasBackground","useHandleDisconnect","handleDisconnect","connect","indexOfRelationInConnectArray","rel","apiData","RELATIONS_TO_DISPLAY","ONE_WAY_RELATIONS","RelationsField","currentPage","setCurrentPage","isRootDocument","query","useQueryParams","buildValidParams","isMorph","toLowerCase","componentId","componentUID","targetField","schemaAttributes","isRelatedToCurrentDocument","isFetching","useGetRelationsQuery","pageSize","page","refetchOnMountOrArgChange","skip","selectFromResult","result","results","handleLoadMore","isFetchingMoreRelations","realServerRelationsCount","pagination","total","relationsConnected","relationsDisconnected","disconnect","relationsCount","relations","ctx","targetModel","removeConnected","removeDisconnected","addLabelAndHref","transformedRels","sort","a","b","handleConnect","lastItemInList","generateNKeysBetween","getRelationLabel","wrap","StyledFlex","RelationsInput","pageCount","ArrowClockwise","RelationsList","serverData","relationType","connectedRelations","disconnectedRelations","unique","_unique","_ariaLabel","textValue","setTextValue","searchParams","setSearchParams","_q","fieldRef","useFocusInputField","searchParamsDebounced","useDebounce","searchForTrigger","useLazySearchRelationsQuery","idsToInclude","idsToOmit","handleSearch","hasNextPage","handleChange","relationId","opt","console","useLayoutEffect","Combobox","autocomplete","hasMoreItems","noOptionsMessage","loadingMessage","onLoadMore","onTextValueChange","onInputChange","ComboboxOption","RELATION_ITEM_HEIGHT","RELATION_GUTTER","listRef","outerListRef","setOverflow","handleNativeScroll","el","parentScrollContainerHeight","parentNode","scrollHeight","maxScrollBottom","scrollTop","outerListRefCurrent","addEventListener","removeEventListener","handleMoveItem","oldIndex","newData","currentRow","startKey","endKey","newKey","splice","array","relationOnServer","oldRelation","relationInFront","before","publishedAt","relationWithPosition","toReversed","_href","canReorder","dynamicListHeight","ShadowBox","$overflowDirection","FixedSizeList","outerRef","itemCount","itemSize","itemData","ariaDescribedBy","canDrag","itemKey","innerElementType","ListItem","relationRef","RELATION","dropSensitivity","DROP_SENSITIVITY","REGULAR","composedRefs","RelationItemPlaceholder","FlexWrapper","Cross","DisconnectButton","button","LinkEllipsis","MemoizedRelationsField","uidApi","contentManagerApi","injectEndpoints","endpoints","builder","getDefaultUID","config","transformResponse","response","generateUID","mutation","getAvailability","providesTags","_res","_error","contentTypeUID","useGenerateUIDMutation","useGetDefaultUIDQuery","useGetAvailabilityQuery","UID_REGEX","UIDInput","useDoc","allFormValues","availability","setAvailability","showRegenerate","setShowRegenerate","isCloning","useMatch","CLONE_PATH","debouncedValue","hasChanged","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","defaultGeneratedUID","isGeneratingDefaultUID","apiError","isGeneratingUID","handleRegenerateClick","res","err","availabilityData","isCheckingAvailability","availabilityError","test","timer","isAvailable","window","setTimeout","clearTimeout","shouldShowAvailability","endAction","TextValidation","$available","data-not-here-outer","pointerEvents","CheckCircle","FieldActionWrapper","onMouseEnter","LoadingWrapper","data-testid","Action","neutral400","success600","rotation","keyframes","MemoizedUIDInput","md","Markdown","html","xhtmlOut","breaks","langPrefix","linkify","typographer","highlight","str","getLanguage","utils","escapeHtml","highlightAuto","use","abbr","container","deflist","emoji","footnote","ins","mark","sub","sup","renderer","rules","footnote_ref","idx","slf","caption","footnote_caption","footnote_anchor","PreviewWysiwyg","sanitizeHtml","render","replaceAll","defaults","allowedTags","allowedAttributes","source","dangerouslySetInnerHTML","__html","listRE","emptyListRE","unorderedListRE","newlineAndIndentContinueMarkdownList","cm","getOption","CodeMirror","Pass","listSelections","replacements","i","pos","head","eolState","getStateAfter","line","inList","list","inQuote","getLine","exec","cursorBeforeBullet","ch","empty","execCommand","endOfQuote","endOfList","replaceRange","indent","after","numbered","indexOf","bullet","parseInt","replace","incrementRemainingMarkdownListNumbers","replaceSelections","startLine","lookAhead","skipCount","startItem","startIndent","nextLineNumber","nextLine","nextItem","nextIndent","newNumber","nextNumber","itemNumber","isNaN","editorRef","isPreviewMode","isExpandMode","textareaRef","onChangeRef","toTextArea","fromTextArea","lineWrapping","extraKeys","Enter","Tab","smartIndent","spellcheck","inputStyle","commands","on","doc","getValue","hasFocus","setValue","setOption","getInputField","scrollIntoView","args","EditorAndPreviewWrapper","EditorStylesContainer","$isExpandMode","textarea","previewContent","BoxWithBorder","ExpandButton","floor","padStart","neutral700","replaceText","markdownName","textToChange","editedText","insertListOrTitle","markdown","textToInsert","markdownHandler","markdownType","textToEdit","getSelection","replaceSelection","getCursor","endSelection","startSelection","setSelection","listHandler","listType","getDoc","insertion","somethingSelected","selections","lineInsertion","currentLine","listToInsert","lineContent","titleHandler","titleType","titleToInsert","lineWithNoTitle","newLastLineLength","setCursor","insertFile","files","file","contentLength","mime","insertWithTextToEdit","contentToMove","getRange","newLine","insertWithoutTextToEdit","quoteAndCodeHandler","IconButtonGroup","WysiwygFooter","onToggleExpand","WysiwygNav","onToggleMediaLib","onTogglePreviewMode","handleActionClick","currentEditorRef","Wysiwyg","setIsPreviewMode","mediaLibVisible","setMediaLibVisible","setIsExpandMode","handleToggleMediaLib","handleTogglePreviewMode","formattedFiles","f","MemoizedWysiwyg","visible","providedHint","rootModel","kind","isFormDisabled","canCreateFields","useDocumentRBAC","rbac","canReadFields","canUpdateFields","canUserAction","idToCheck","editableFields","readableFields","canUserReadField","canUserEditField","fields","app","attributeHasCustomFieldProperty","useFieldHint","fieldIsDisabled","CustomInput","FormInputRenderer","addedInputTypes","ComponentInput","inputProps","enum","_mainField","restProps","maximum","minimum","getMinMax","units","maxValue","hasMinAndMax","divider","br","Number","maxLength","minLength","MemoizedInputRenderer","modelName","panel","gridRowIndex","NonRepeatableComponent","completeFieldName","translatedLabel","RepeatableComponent","searchString","URLSearchParams","hasNestedErrors","isArray","hasNestedValue","errorOpenItems","componentTmpKeyWithFocussedField","has","fieldParam","subpath","prevValue","usePrev","toggleCollapses","handleMoveComponentField","handleValueChange","AccordionRoot","$error","nameWithIndex","Component","onDeleteComponent","TextButtonCustom","Plus","dragProps","displayValue","accordionRef","componentKey","COMPONENT","onStart","composedAccordionRefs","StyledSpan","showResetComponent","repeatable","handleInitialisationClick","MemoizedComponentInput"],"mappings":"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"}